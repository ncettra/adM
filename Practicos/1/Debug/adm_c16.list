
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003390  08003390  00013390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d0  080033d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033d8  080033d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000d61a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000f1fe  00000000  00000000  0002d656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d2d  00000000  00000000  0003c854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b98  00000000  00000000  0003e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d9746  00000000  00000000  0003f120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000ae0  00000000  00000000  00118868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023b2f  00000000  00000000  00119348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ce77  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030d8  00000000  00000000  0013cec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003378 	.word	0x08003378

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003378 	.word	0x08003378

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f0:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f2:	4770      	bx	lr

080001f4 <asm_zeros>:
   r1: longitud (longitud)

*/
.thumb_func
	asm_zeros:
	    cbz r0, exit_1   			// Salto a la etiqueta exit si r0 es cero
 80001f4:	b130      	cbz	r0, 8000204 <exit_1>
	    cbz r1, exit_1   			// Salto a la etiqueta exit si r1 es cero
 80001f6:	b129      	cbz	r1, 8000204 <exit_1>
	    movs r3, #0    				// Carga el valor cero en el registro r3
 80001f8:	2300      	movs	r3, #0
	    mov r2, r1     				// Copia el valor de r1 en r2
 80001fa:	460a      	mov	r2, r1

080001fc <loop_1>:
	loop_1:
	    subs r2, #1    				// Decrementa el valor de r2 en uno
 80001fc:	3a01      	subs	r2, #1
	    str r3, [r0, r2, LSL #2]  	// Almacena el valor cero en la dirección de memoria calculada a partir de r0 y r2, multiplicada por cuatro debido a LSL #2
 80001fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	    bne loop_1     				// Salta al loop si r2 no es cero
 8000202:	d1fb      	bne.n	80001fc <loop_1>

08000204 <exit_1>:
	exit_1:
	    bx lr          				// Retorno desde la función
 8000204:	4770      	bx	lr

08000206 <asm_productoEscalar32>:

*/

.thumb_func
    asm_productoEscalar32:
    	push {r4-r8}				//guarda los registros r4 a r8 en la pila
 8000206:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}

0800020a <loop_2>:
    loop_2:
    	subs r2, #1 				//decrementamos la longitud
 800020a:	3a01      	subs	r2, #1
    	ldr r4, [r0, r2, LSL #2] 	//cargamos un valor de 32bits en el r4 y lo desplazamos
 800020c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    	mul r4, r4, r3 			 	//multiplica r4 por el escalar en r3
 8000210:	fb04 f403 	mul.w	r4, r4, r3
    	str r4, [r1, r2, LSL #2] 	//guardamos el resultado de la multiplicacion
 8000214:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    	bne loop_2
 8000218:	d1f7      	bne.n	800020a <loop_2>
    	pop {r4-r8}					//restaura los valores previos de los registros
 800021a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
        bx lr
 800021e:	4770      	bx	lr

08000220 <asm_productoEscalar16>:

*/
//NOTA EL H INDICA EL THUMB de 16bits
.thumb_func
    asm_productoEscalar16:
    	push {r4}			   		//guardo r4 en pila
 8000220:	b410      	push	{r4}

08000222 <loop_3>:
    loop_3:
    	ldrh r3, [r0, r2, LSL #1]   // Cargar valor de medio palabra (16 bits) en r3
 8000222:	f830 3012 	ldrh.w	r3, [r0, r2, lsl #1]
    	mul r3, r3, r1              // Multiplicar r3 por el escalar r1
 8000226:	fb03 f301 	mul.w	r3, r3, r1
    	strh r3, [r0, r2, LSL #1]   // Sobrescribir el valor original en memoria
 800022a:	f820 3012 	strh.w	r3, [r0, r2, lsl #1]
		subs r2, #1				    //decremento la longitud en 1
 800022e:	3a01      	subs	r2, #1
    	bne loop_3
 8000230:	d1f7      	bne.n	8000222 <loop_3>
    	pop {r4}
 8000232:	bc10      	pop	{r4}
    	bx lr
 8000234:	4770      	bx	lr

08000236 <asm_productoEscalar12>:
	r3: escalar a multiplicar

*/
.thumb_func
asm_productoEscalar12:
	    push {r4,r5}              		// Guardar registros en la pila
 8000236:	b430      	push	{r4, r5}

08000238 <loop_4>:
	loop_4:
	    ldrh r4, [r0, r2, LSL #1]   // Cargar valor de medio palabra (16 bits) en r4
 8000238:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
	    mul r5, r4, r3              // Multiplicar r4 por el escalar r3 y lo tiro en r5
 800023c:	fb04 f503 	mul.w	r5, r4, r3
	    usat r4, #12, r5               // Saturar el resultado a 12 bits
 8000240:	f385 040c 	usat	r4, #12, r5
	    strh r4, [r1, r2, LSL #1]   // Almacenar el resultado en memoria
 8000244:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
	    subs r2, #1                 // Decrementar r2
 8000248:	3a01      	subs	r2, #1
	    bne loop_4                  // Mientras r2 > 0
 800024a:	d1f5      	bne.n	8000238 <loop_4>
	    pop {r4,r5}               		// Recuperar registros y retornar
 800024c:	bc30      	pop	{r4, r5}
	    bx lr
 800024e:	4770      	bx	lr

08000250 <asm_filtroVentana10>:
prototipo: void filtroVentana10(uint16_t * vectorIn, uint16_t * vectorOut, uint32_t longitudVectorIn);

*/
.thumb_func
asm_filtroVentana10:
    push {r4, r5, r6}           // Guardar registros en la pila
 8000250:	b470      	push	{r4, r5, r6}
    mov r6, #10                 // Longitud de la ventana
 8000252:	f04f 060a 	mov.w	r6, #10
    mov r5, r2                  // Puntero al vector de entrada
 8000256:	4615      	mov	r5, r2
    mov r4, r1                  // Puntero al vector de salida
 8000258:	460c      	mov	r4, r1
    ldr r3, [r5], #2            // Cargar primer valor de entrada
 800025a:	f855 3b02 	ldr.w	r3, [r5], #2
    movs r2, #0                 // Inicializar sumatoria a cero
 800025e:	2200      	movs	r2, #0
    mov r1, r6                  // Inicializar contador a longitud de ventana
 8000260:	4631      	mov	r1, r6
    mov r0, r1                  // Guardar longitud de ventana en r0
 8000262:	4608      	mov	r0, r1

08000264 <loop_5>:
loop_5:
    ldrh r1, [r5], #2           // Cargar siguiente valor de entrada
 8000264:	f835 1b02 	ldrh.w	r1, [r5], #2
    adds r2, r2, r1             // Sumar valor a la sumatoria
 8000268:	1852      	adds	r2, r2, r1
    subs r1, r2, r3             // Restar primer valor de la ventana
 800026a:	1ad1      	subs	r1, r2, r3
    strh r1, [r4], #2           // Guardar resultado en vector de salida
 800026c:	f824 1b02 	strh.w	r1, [r4], #2
    mov r3, r2                  // Actualizar primer valor de la ventana
 8000270:	4613      	mov	r3, r2
    subs r0, r0, #1             // Decrementar contador
 8000272:	3801      	subs	r0, #1
    bne loop_5                  // Repetir mientras contador no sea cero
 8000274:	d1f6      	bne.n	8000264 <loop_5>
    pop {r4, r5, r6, pc}        // Recuperar registros y retornar
 8000276:	bd70      	pop	{r4, r5, r6, pc}
    bx lr
 8000278:	4770      	bx	lr

0800027a <asm_pack32to16>:
prototipo: void pack32to16 (int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud);

*/
.thumb_func
asm_pack32to16:
    push {r4, r5}               	// Guardar registros en la pila
 800027a:	b430      	push	{r4, r5}
    mov r4, r0                      // Puntero al vector de entrada (32 bits)
 800027c:	4604      	mov	r4, r0
    mov r5, r1                      // Puntero al vector de salida (16 bits)
 800027e:	460d      	mov	r5, r1
    mov r0, r2                      // Longitud del vector
 8000280:	4610      	mov	r0, r2

08000282 <loop_6>:
loop_6:
    ldr r1, [r4], #4                // Cargar valor de 32 bits
 8000282:	f854 1b04 	ldr.w	r1, [r4], #4
    movs r1, r1, LSR #16            // Desplazar valor de 32 bits a la derecha para obtener 16 bits
 8000286:	0c09      	lsrs	r1, r1, #16
    strh r1, [r5], #2               // Almacenar valor de 16 bits en vector de salida
 8000288:	f825 1b02 	strh.w	r1, [r5], #2
    subs r0, r0, #1                 // Decrementar contador
 800028c:	3801      	subs	r0, #1
    bne loop_6                      // Repetir mientras contador no sea cero
 800028e:	d1f8      	bne.n	8000282 <loop_6>
    pop {r4, r5}                    // Recuperar registros y retornar
 8000290:	bc30      	pop	{r4, r5}
    bx lr
 8000292:	4770      	bx	lr

08000294 <asm_max32>:

*/

.thumb_func
asm_max32:
    push {r4, r5}               	// Guardar registros en la pila
 8000294:	b430      	push	{r4, r5}
    mov r4, r0                      // Puntero al vector de entrada
 8000296:	4604      	mov	r4, r0
    mov r0, r1                      // Longitud del vector
 8000298:	4608      	mov	r0, r1
    ldr r5, [r4], #4                // Cargar primer valor del vector
 800029a:	f854 5b04 	ldr.w	r5, [r4], #4
    mov r1, #0                      // Inicializar posición máxima a cero
 800029e:	f04f 0100 	mov.w	r1, #0
    mov r2, r0                      // Inicializar contador a longitud del vector
 80002a2:	4602      	mov	r2, r0

080002a4 <loop_7>:
loop_7:
    ldr r3, [r4], #4                // Cargar siguiente valor del vector
 80002a4:	f854 3b04 	ldr.w	r3, [r4], #4
    cmp r3, r5                      // Comparar valor con el máximo actual
 80002a8:	42ab      	cmp	r3, r5
    bgt update_max                  // Saltar si el valor es mayor al máximo actual
 80002aa:	dc04      	bgt.n	80002b6 <update_max>
    subs r2, r2, #1                 // Decrementar contador
 80002ac:	3a01      	subs	r2, #1
    bne loop_7                      // Repetir mientras contador no sea cero
 80002ae:	d1f9      	bne.n	80002a4 <loop_7>

080002b0 <exit_7>:
exit_7:
    mov r0, r1                      // Devolver posición del máximo en r0
 80002b0:	4608      	mov	r0, r1
    pop {r4, r5}                	// Recuperar registros y retornar
 80002b2:	bc30      	pop	{r4, r5}
    bx lr
 80002b4:	4770      	bx	lr

080002b6 <update_max>:
update_max:
    mov r5, r3                      // Actualizar máximo con el nuevo valor
 80002b6:	461d      	mov	r5, r3
    mov r1, r0                      // Actualizar posición máxima con el contador
 80002b8:	4601      	mov	r1, r0
    b loop_7                        // Continuar con el bucle
 80002ba:	e7f3      	b.n	80002a4 <loop_7>

080002bc <asm_downsampleM>:

*/

.thumb_func
asm_downsampleM:
    push {r4, r5}               	// Guardar registros en la pila
 80002bc:	b430      	push	{r4, r5}
    mov r4, r0                      // Puntero al vector de entrada
 80002be:	4604      	mov	r4, r0
    mov r5, r1                      // Puntero al vector de salida
 80002c0:	460d      	mov	r5, r1
    mov r0, r2                      // Longitud del vector
 80002c2:	4610      	mov	r0, r2
    mov r1, r3                      // Valor de N
 80002c4:	4619      	mov	r1, r3
    mov r3, #0                      // Inicializar contador
 80002c6:	f04f 0300 	mov.w	r3, #0

080002ca <loop_8>:
loop_8:
    ldr r2, [r4], #4                // Cargar siguiente muestra del vector de entrada
 80002ca:	f854 2b04 	ldr.w	r2, [r4], #4
    cmp r3, r1                      // Comparar contador con N
 80002ce:	428b      	cmp	r3, r1
    beq skip_8                      // Saltar si el contador es igual a N
 80002d0:	d003      	beq.n	80002da <skip_8>
    str r2, [r5], #4                // Almacenar muestra en el vector de salida
 80002d2:	f845 2b04 	str.w	r2, [r5], #4
    add r3, r3, #1                  // Incrementar contador
 80002d6:	f103 0301 	add.w	r3, r3, #1

080002da <skip_8>:
skip_8:
    subs r0, r0, #1                 // Decrementar contador de longitud
 80002da:	3801      	subs	r0, #1
    bne loop_8                      // Repetir mientras contador de longitud no sea cero
 80002dc:	d1f5      	bne.n	80002ca <loop_8>
    pop {r4, r5}                	// Recuperar registros y retornar
 80002de:	bc30      	pop	{r4, r5}
    bx lr
 80002e0:	4770      	bx	lr

080002e2 <asm_invertir>:
//PUEDO UTILIZAR EL REV directamente!!!!


.thumb_func
asm_invertir:
    mov r3, r0                      // Puntero al vector de entrada
 80002e2:	4603      	mov	r3, r0
    mov r0, r1                      // Longitud del vector
 80002e4:	4608      	mov	r0, r1
    lsl r1, r1, #1                  // Calcular el número total de bytes
 80002e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
    add r1, r3, r1                  // Calcular la dirección del último elemento
 80002ea:	4419      	add	r1, r3

080002ec <loop_9>:
loop_9:
    ldrh r2, [r1]                   // Cargar muestra del último elemento
 80002ec:	880a      	ldrh	r2, [r1, #0]
    strh r2, [r3], #-2              // Almacenar muestra en la dirección actual y retroceder 2 bytes
 80002ee:	f823 2902 	strh.w	r2, [r3], #-2

    subs r0, r0, #1                 // Decrementar contador de longitud
 80002f2:	3801      	subs	r0, #1
    cmp r0, #0                      // Comparar contador con cero
 80002f4:	2800      	cmp	r0, #0
    bne loop_9                      // Repetir mientras contador no sea cero
 80002f6:	d1f9      	bne.n	80002ec <loop_9>
    bx lr
 80002f8:	4770      	bx	lr

080002fa <asm_introducirEco>:

*/

.thumb_func
asm_introducirEco:
    push {r4}                   	// Guardar registros en la pila
 80002fa:	b410      	push	{r4}
    mov r4, r0                      // Puntero al vector de entrada
 80002fc:	4604      	mov	r4, r0
    mov r0, #4096                   // Longitud del vector (4096 muestras)
 80002fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    mov r1, #882                    // Cantidad de muestras para el eco (20 ms / 0.0227 ms por muestra = 882 muestras)
 8000302:	f240 3172 	movw	r1, #882	; 0x372
    lsl r2, r0, #1                  // Calcular el número total de bytes en el vector (longitud * 2 bytes por muestra)
 8000306:	ea4f 0240 	mov.w	r2, r0, lsl #1
    add r2, r4, r2                  // Calcular la dirección del último elemento del vector
 800030a:	4422      	add	r2, r4
    sub r3, r2, r1                  // Calcular la dirección del inicio del eco (retrocediendo 882 muestras)
 800030c:	eba2 0301 	sub.w	r3, r2, r1

08000310 <loop_10>:
loop_10:
    ldrsh r5, [r3]                  // Cargar muestra del eco
 8000310:	f9b3 5000 	ldrsh.w	r5, [r3]
    ldrsh r6, [r4]                  // Cargar muestra original
 8000314:	f9b4 6000 	ldrsh.w	r6, [r4]
    add r6, r6, r5, lsr #1          // Sumar muestra original y muestra de eco dividida por dos
 8000318:	eb06 0655 	add.w	r6, r6, r5, lsr #1
    strh r6, [r4], #2               // Almacenar muestra sumada en el vector original y avanzar 2 bytes
 800031c:	f824 6b02 	strh.w	r6, [r4], #2
    subs r0, r0, #1                 // Decrementar contador de longitud
 8000320:	3801      	subs	r0, #1
    cmp r0, #0                      // Comparar contador con cero
 8000322:	2800      	cmp	r0, #0
    bne loop_10                     // Repetir mientras contador no sea cero
 8000324:	d1f4      	bne.n	8000310 <loop_10>
    pop {r4}                    	// Recuperar registros y retornar
 8000326:	bc10      	pop	{r4}
    bx lr
 8000328:	4770      	bx	lr

0800032a <asm_calcularCorrelacion>:

*/

.thumb_func
asm_calcularCorrelacion:
    push {r4, r5, r6}           	// Guardar registros en la pila
 800032a:	b470      	push	{r4, r5, r6}
    mov r4, r0                      // Puntero al primer vector
 800032c:	4604      	mov	r4, r0
    mov r5, r1                      // Puntero al segundo vector
 800032e:	460d      	mov	r5, r1
    mov r6, r2                      // Longitud de los vectores
 8000330:	4616      	mov	r6, r2
    ldr r0, [r4]                    // Cargar el primer valor del primer vector
 8000332:	6820      	ldr	r0, [r4, #0]
    ldr r1, [r5]                    // Cargar el primer valor del segundo vector
 8000334:	6829      	ldr	r1, [r5, #0]
    mov r2, #0                      // Inicializar el acumulador de la correlación en cero
 8000336:	f04f 0200 	mov.w	r2, #0

0800033a <loop_11>:
loop_11:
    mul r3, r0, r1                  // Multiplicar los valores de los vectores
 800033a:	fb00 f301 	mul.w	r3, r0, r1
    add r2, r2, r3                  // Acumular el resultado de la multiplicación
 800033e:	441a      	add	r2, r3
    add r4, r4, #4                  // Avanzar al siguiente valor del primer vector (incrementar en 4 bytes)
 8000340:	f104 0404 	add.w	r4, r4, #4
    add r5, r5, #4                  // Avanzar al siguiente valor del segundo vector (incrementar en 4 bytes)
 8000344:	f105 0504 	add.w	r5, r5, #4
    ldr r0, [r4]                    // Cargar el siguiente valor del primer vector
 8000348:	6820      	ldr	r0, [r4, #0]
    ldr r1, [r5]                    // Cargar el siguiente valor del segundo vector
 800034a:	6829      	ldr	r1, [r5, #0]
    subs r6, r6, #1                 // Decrementar el contador de longitud en 1
 800034c:	3e01      	subs	r6, #1
    cmp r6, #0                      // Comparar el contador con cero
 800034e:	2e00      	cmp	r6, #0
    bne loop_11                     // Repetir mientras el contador no sea cero
 8000350:	d1f3      	bne.n	800033a <loop_11>
    pop {r4, r5, r6}            	// Recuperar registros y retornar
 8000352:	bc70      	pop	{r4, r5, r6}
    bx lr
 8000354:	4770      	bx	lr
	...

08000358 <__aeabi_uldivmod>:
 8000358:	b953      	cbnz	r3, 8000370 <__aeabi_uldivmod+0x18>
 800035a:	b94a      	cbnz	r2, 8000370 <__aeabi_uldivmod+0x18>
 800035c:	2900      	cmp	r1, #0
 800035e:	bf08      	it	eq
 8000360:	2800      	cmpeq	r0, #0
 8000362:	bf1c      	itt	ne
 8000364:	f04f 31ff 	movne.w	r1, #4294967295
 8000368:	f04f 30ff 	movne.w	r0, #4294967295
 800036c:	f000 b974 	b.w	8000658 <__aeabi_idiv0>
 8000370:	f1ad 0c08 	sub.w	ip, sp, #8
 8000374:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000378:	f000 f806 	bl	8000388 <__udivmoddi4>
 800037c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000380:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000384:	b004      	add	sp, #16
 8000386:	4770      	bx	lr

08000388 <__udivmoddi4>:
 8000388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800038c:	9d08      	ldr	r5, [sp, #32]
 800038e:	4604      	mov	r4, r0
 8000390:	468e      	mov	lr, r1
 8000392:	2b00      	cmp	r3, #0
 8000394:	d14d      	bne.n	8000432 <__udivmoddi4+0xaa>
 8000396:	428a      	cmp	r2, r1
 8000398:	4694      	mov	ip, r2
 800039a:	d969      	bls.n	8000470 <__udivmoddi4+0xe8>
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	b152      	cbz	r2, 80003b8 <__udivmoddi4+0x30>
 80003a2:	fa01 f302 	lsl.w	r3, r1, r2
 80003a6:	f1c2 0120 	rsb	r1, r2, #32
 80003aa:	fa20 f101 	lsr.w	r1, r0, r1
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	ea41 0e03 	orr.w	lr, r1, r3
 80003b6:	4094      	lsls	r4, r2
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	0c21      	lsrs	r1, r4, #16
 80003be:	fbbe f6f8 	udiv	r6, lr, r8
 80003c2:	fa1f f78c 	uxth.w	r7, ip
 80003c6:	fb08 e316 	mls	r3, r8, r6, lr
 80003ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003ce:	fb06 f107 	mul.w	r1, r6, r7
 80003d2:	4299      	cmp	r1, r3
 80003d4:	d90a      	bls.n	80003ec <__udivmoddi4+0x64>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f106 30ff 	add.w	r0, r6, #4294967295
 80003de:	f080 811f 	bcs.w	8000620 <__udivmoddi4+0x298>
 80003e2:	4299      	cmp	r1, r3
 80003e4:	f240 811c 	bls.w	8000620 <__udivmoddi4+0x298>
 80003e8:	3e02      	subs	r6, #2
 80003ea:	4463      	add	r3, ip
 80003ec:	1a5b      	subs	r3, r3, r1
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f4:	fb08 3310 	mls	r3, r8, r0, r3
 80003f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003fc:	fb00 f707 	mul.w	r7, r0, r7
 8000400:	42a7      	cmp	r7, r4
 8000402:	d90a      	bls.n	800041a <__udivmoddi4+0x92>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 33ff 	add.w	r3, r0, #4294967295
 800040c:	f080 810a 	bcs.w	8000624 <__udivmoddi4+0x29c>
 8000410:	42a7      	cmp	r7, r4
 8000412:	f240 8107 	bls.w	8000624 <__udivmoddi4+0x29c>
 8000416:	4464      	add	r4, ip
 8000418:	3802      	subs	r0, #2
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	1be4      	subs	r4, r4, r7
 8000420:	2600      	movs	r6, #0
 8000422:	b11d      	cbz	r5, 800042c <__udivmoddi4+0xa4>
 8000424:	40d4      	lsrs	r4, r2
 8000426:	2300      	movs	r3, #0
 8000428:	e9c5 4300 	strd	r4, r3, [r5]
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	428b      	cmp	r3, r1
 8000434:	d909      	bls.n	800044a <__udivmoddi4+0xc2>
 8000436:	2d00      	cmp	r5, #0
 8000438:	f000 80ef 	beq.w	800061a <__udivmoddi4+0x292>
 800043c:	2600      	movs	r6, #0
 800043e:	e9c5 0100 	strd	r0, r1, [r5]
 8000442:	4630      	mov	r0, r6
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	fab3 f683 	clz	r6, r3
 800044e:	2e00      	cmp	r6, #0
 8000450:	d14a      	bne.n	80004e8 <__udivmoddi4+0x160>
 8000452:	428b      	cmp	r3, r1
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0xd4>
 8000456:	4282      	cmp	r2, r0
 8000458:	f200 80f9 	bhi.w	800064e <__udivmoddi4+0x2c6>
 800045c:	1a84      	subs	r4, r0, r2
 800045e:	eb61 0303 	sbc.w	r3, r1, r3
 8000462:	2001      	movs	r0, #1
 8000464:	469e      	mov	lr, r3
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0e0      	beq.n	800042c <__udivmoddi4+0xa4>
 800046a:	e9c5 4e00 	strd	r4, lr, [r5]
 800046e:	e7dd      	b.n	800042c <__udivmoddi4+0xa4>
 8000470:	b902      	cbnz	r2, 8000474 <__udivmoddi4+0xec>
 8000472:	deff      	udf	#255	; 0xff
 8000474:	fab2 f282 	clz	r2, r2
 8000478:	2a00      	cmp	r2, #0
 800047a:	f040 8092 	bne.w	80005a2 <__udivmoddi4+0x21a>
 800047e:	eba1 010c 	sub.w	r1, r1, ip
 8000482:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000486:	fa1f fe8c 	uxth.w	lr, ip
 800048a:	2601      	movs	r6, #1
 800048c:	0c20      	lsrs	r0, r4, #16
 800048e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000492:	fb07 1113 	mls	r1, r7, r3, r1
 8000496:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049a:	fb0e f003 	mul.w	r0, lr, r3
 800049e:	4288      	cmp	r0, r1
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x12c>
 80004a2:	eb1c 0101 	adds.w	r1, ip, r1
 80004a6:	f103 38ff 	add.w	r8, r3, #4294967295
 80004aa:	d202      	bcs.n	80004b2 <__udivmoddi4+0x12a>
 80004ac:	4288      	cmp	r0, r1
 80004ae:	f200 80cb 	bhi.w	8000648 <__udivmoddi4+0x2c0>
 80004b2:	4643      	mov	r3, r8
 80004b4:	1a09      	subs	r1, r1, r0
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb1 f0f7 	udiv	r0, r1, r7
 80004bc:	fb07 1110 	mls	r1, r7, r0, r1
 80004c0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004c4:	fb0e fe00 	mul.w	lr, lr, r0
 80004c8:	45a6      	cmp	lr, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x156>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f100 31ff 	add.w	r1, r0, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x154>
 80004d6:	45a6      	cmp	lr, r4
 80004d8:	f200 80bb 	bhi.w	8000652 <__udivmoddi4+0x2ca>
 80004dc:	4608      	mov	r0, r1
 80004de:	eba4 040e 	sub.w	r4, r4, lr
 80004e2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x9a>
 80004e8:	f1c6 0720 	rsb	r7, r6, #32
 80004ec:	40b3      	lsls	r3, r6
 80004ee:	fa22 fc07 	lsr.w	ip, r2, r7
 80004f2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004f6:	fa20 f407 	lsr.w	r4, r0, r7
 80004fa:	fa01 f306 	lsl.w	r3, r1, r6
 80004fe:	431c      	orrs	r4, r3
 8000500:	40f9      	lsrs	r1, r7
 8000502:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000506:	fa00 f306 	lsl.w	r3, r0, r6
 800050a:	fbb1 f8f9 	udiv	r8, r1, r9
 800050e:	0c20      	lsrs	r0, r4, #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fb09 1118 	mls	r1, r9, r8, r1
 8000518:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800051c:	fb08 f00e 	mul.w	r0, r8, lr
 8000520:	4288      	cmp	r0, r1
 8000522:	fa02 f206 	lsl.w	r2, r2, r6
 8000526:	d90b      	bls.n	8000540 <__udivmoddi4+0x1b8>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000530:	f080 8088 	bcs.w	8000644 <__udivmoddi4+0x2bc>
 8000534:	4288      	cmp	r0, r1
 8000536:	f240 8085 	bls.w	8000644 <__udivmoddi4+0x2bc>
 800053a:	f1a8 0802 	sub.w	r8, r8, #2
 800053e:	4461      	add	r1, ip
 8000540:	1a09      	subs	r1, r1, r0
 8000542:	b2a4      	uxth	r4, r4
 8000544:	fbb1 f0f9 	udiv	r0, r1, r9
 8000548:	fb09 1110 	mls	r1, r9, r0, r1
 800054c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000550:	fb00 fe0e 	mul.w	lr, r0, lr
 8000554:	458e      	cmp	lr, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x1e2>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000560:	d26c      	bcs.n	800063c <__udivmoddi4+0x2b4>
 8000562:	458e      	cmp	lr, r1
 8000564:	d96a      	bls.n	800063c <__udivmoddi4+0x2b4>
 8000566:	3802      	subs	r0, #2
 8000568:	4461      	add	r1, ip
 800056a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800056e:	fba0 9402 	umull	r9, r4, r0, r2
 8000572:	eba1 010e 	sub.w	r1, r1, lr
 8000576:	42a1      	cmp	r1, r4
 8000578:	46c8      	mov	r8, r9
 800057a:	46a6      	mov	lr, r4
 800057c:	d356      	bcc.n	800062c <__udivmoddi4+0x2a4>
 800057e:	d053      	beq.n	8000628 <__udivmoddi4+0x2a0>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x212>
 8000582:	ebb3 0208 	subs.w	r2, r3, r8
 8000586:	eb61 010e 	sbc.w	r1, r1, lr
 800058a:	fa01 f707 	lsl.w	r7, r1, r7
 800058e:	fa22 f306 	lsr.w	r3, r2, r6
 8000592:	40f1      	lsrs	r1, r6
 8000594:	431f      	orrs	r7, r3
 8000596:	e9c5 7100 	strd	r7, r1, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	40d8      	lsrs	r0, r3
 80005a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ac:	fa21 f303 	lsr.w	r3, r1, r3
 80005b0:	4091      	lsls	r1, r2
 80005b2:	4301      	orrs	r1, r0
 80005b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005b8:	fa1f fe8c 	uxth.w	lr, ip
 80005bc:	fbb3 f0f7 	udiv	r0, r3, r7
 80005c0:	fb07 3610 	mls	r6, r7, r0, r3
 80005c4:	0c0b      	lsrs	r3, r1, #16
 80005c6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005ca:	fb00 f60e 	mul.w	r6, r0, lr
 80005ce:	429e      	cmp	r6, r3
 80005d0:	fa04 f402 	lsl.w	r4, r4, r2
 80005d4:	d908      	bls.n	80005e8 <__udivmoddi4+0x260>
 80005d6:	eb1c 0303 	adds.w	r3, ip, r3
 80005da:	f100 38ff 	add.w	r8, r0, #4294967295
 80005de:	d22f      	bcs.n	8000640 <__udivmoddi4+0x2b8>
 80005e0:	429e      	cmp	r6, r3
 80005e2:	d92d      	bls.n	8000640 <__udivmoddi4+0x2b8>
 80005e4:	3802      	subs	r0, #2
 80005e6:	4463      	add	r3, ip
 80005e8:	1b9b      	subs	r3, r3, r6
 80005ea:	b289      	uxth	r1, r1
 80005ec:	fbb3 f6f7 	udiv	r6, r3, r7
 80005f0:	fb07 3316 	mls	r3, r7, r6, r3
 80005f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005f8:	fb06 f30e 	mul.w	r3, r6, lr
 80005fc:	428b      	cmp	r3, r1
 80005fe:	d908      	bls.n	8000612 <__udivmoddi4+0x28a>
 8000600:	eb1c 0101 	adds.w	r1, ip, r1
 8000604:	f106 38ff 	add.w	r8, r6, #4294967295
 8000608:	d216      	bcs.n	8000638 <__udivmoddi4+0x2b0>
 800060a:	428b      	cmp	r3, r1
 800060c:	d914      	bls.n	8000638 <__udivmoddi4+0x2b0>
 800060e:	3e02      	subs	r6, #2
 8000610:	4461      	add	r1, ip
 8000612:	1ac9      	subs	r1, r1, r3
 8000614:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000618:	e738      	b.n	800048c <__udivmoddi4+0x104>
 800061a:	462e      	mov	r6, r5
 800061c:	4628      	mov	r0, r5
 800061e:	e705      	b.n	800042c <__udivmoddi4+0xa4>
 8000620:	4606      	mov	r6, r0
 8000622:	e6e3      	b.n	80003ec <__udivmoddi4+0x64>
 8000624:	4618      	mov	r0, r3
 8000626:	e6f8      	b.n	800041a <__udivmoddi4+0x92>
 8000628:	454b      	cmp	r3, r9
 800062a:	d2a9      	bcs.n	8000580 <__udivmoddi4+0x1f8>
 800062c:	ebb9 0802 	subs.w	r8, r9, r2
 8000630:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000634:	3801      	subs	r0, #1
 8000636:	e7a3      	b.n	8000580 <__udivmoddi4+0x1f8>
 8000638:	4646      	mov	r6, r8
 800063a:	e7ea      	b.n	8000612 <__udivmoddi4+0x28a>
 800063c:	4620      	mov	r0, r4
 800063e:	e794      	b.n	800056a <__udivmoddi4+0x1e2>
 8000640:	4640      	mov	r0, r8
 8000642:	e7d1      	b.n	80005e8 <__udivmoddi4+0x260>
 8000644:	46d0      	mov	r8, sl
 8000646:	e77b      	b.n	8000540 <__udivmoddi4+0x1b8>
 8000648:	3b02      	subs	r3, #2
 800064a:	4461      	add	r1, ip
 800064c:	e732      	b.n	80004b4 <__udivmoddi4+0x12c>
 800064e:	4630      	mov	r0, r6
 8000650:	e709      	b.n	8000466 <__udivmoddi4+0xde>
 8000652:	4464      	add	r4, ip
 8000654:	3802      	subs	r0, #2
 8000656:	e742      	b.n	80004de <__udivmoddi4+0x156>

08000658 <__aeabi_idiv0>:
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop

0800065c <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b088      	sub	sp, #32
 8000660:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000662:	f3ef 8314 	mrs	r3, CONTROL
 8000666:	607b      	str	r3, [r7, #4]
  return(result);
 8000668:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 800066a:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	f043 0301 	orr.w	r3, r3, #1
 8000672:	61fb      	str	r3, [r7, #28]
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	f383 8814 	msr	CONTROL, r3
}
 800067e:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000680:	f3ef 8314 	mrs	r3, CONTROL
 8000684:	60fb      	str	r3, [r7, #12]
  return(result);
 8000686:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 8000688:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	f023 0301 	bic.w	r3, r3, #1
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000696:	693b      	ldr	r3, [r7, #16]
 8000698:	f383 8814 	msr	CONTROL, r3
}
 800069c:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 800069e:	f3ef 8314 	mrs	r3, CONTROL
 80006a2:	617b      	str	r3, [r7, #20]
  return(result);
 80006a4:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 80006a6:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 80006a8:	f7ff fda0 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006ac:	f3ef 8314 	mrs	r3, CONTROL
 80006b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80006b2:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 80006b4:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 80006b6:	bf00      	nop
 80006b8:	3720      	adds	r7, #32
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}

080006be <zeros>:


void zeros(uint32_t *vector, uint32_t longitud) {
 80006be:	b480      	push	{r7}
 80006c0:	b085      	sub	sp, #20
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	e008      	b.n	80006e0 <zeros+0x22>
        vector[i] = 0;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4413      	add	r3, r2
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d3f2      	bcc.n	80006ce <zeros+0x10>
    }
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <zeros_optimizada>:

//optimizado, dsp aplicar en todos.....:

void zeros_optimizada(uint32_t *vector, uint32_t longitud) {
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
    for (; longitud >0; longitud--) {
 8000700:	e00b      	b.n	800071a <zeros_optimizada+0x24>
        vector[longitud-1] = 0;
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000708:	3b01      	subs	r3, #1
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	4413      	add	r3, r2
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
    for (; longitud >0; longitud--) {
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	3b01      	subs	r3, #1
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f0      	bne.n	8000702 <zeros_optimizada+0xc>
    }
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
	...

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b5b0      	push	{r4, r5, r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fc11 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f841 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073e:	f000 f94f 	bl	80009e0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000742:	f000 f8a7 	bl	8000894 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000746:	f000 f8f3 	bl	8000930 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800074a:	f000 f91b 	bl	8000984 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 800074e:	f7ff ff85 	bl	800065c <PrivilegiosSVC>
  DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos; //activar el contador
 8000752:	4b19      	ldr	r3, [pc, #100]	; (80007b8 <main+0x88>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a18      	ldr	r2, [pc, #96]	; (80007b8 <main+0x88>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6013      	str	r3, [r2, #0]

  uint32_t ciclosASM,ciclosC,ciclosC2;

  //const uint32_t Resultado = asm_sum (5, 3);

  uint32_t resultado[10] = {10,20,10,40,50,60,20,10,20,40};
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <main+0x8c>)
 8000760:	1d3c      	adds	r4, r7, #4
 8000762:	461d      	mov	r5, r3
 8000764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000770:	e884 0003 	stmia.w	r4, {r0, r1}

  DWT->CYCCNT = 0;
 8000774:	4b10      	ldr	r3, [pc, #64]	; (80007b8 <main+0x88>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]
  asm_zeros(resultado, 10);
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	210a      	movs	r1, #10
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fd38 	bl	80001f4 <asm_zeros>
  ciclosASM = DWT->CYCCNT;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <main+0x88>)
 8000786:	685b      	ldr	r3, [r3, #4]
 8000788:	637b      	str	r3, [r7, #52]	; 0x34

  DWT->CYCCNT = 0;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <main+0x88>)
 800078c:	2200      	movs	r2, #0
 800078e:	605a      	str	r2, [r3, #4]
  zeros(resultado, 10);
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	210a      	movs	r1, #10
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff92 	bl	80006be <zeros>
  ciclosC = DWT->CYCCNT;
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <main+0x88>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	633b      	str	r3, [r7, #48]	; 0x30


  DWT->CYCCNT = 0;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <main+0x88>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  zeros_optimizada(resultado, 10); //sin usar i en la iteracion
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	210a      	movs	r1, #10
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff ffa3 	bl	80006f6 <zeros_optimizada>
  ciclosC2 = DWT->CYCCNT;
 80007b0:	4b01      	ldr	r3, [pc, #4]	; (80007b8 <main+0x88>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <main+0x86>
 80007b8:	e0001000 	.word	0xe0001000
 80007bc:	08003390 	.word	0x08003390

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	; 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	; 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fdca 	bl	8003368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b28      	ldr	r3, [pc, #160]	; (800088c <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a27      	ldr	r2, [pc, #156]	; (800088c <SystemClock_Config+0xcc>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
 80007f4:	4b25      	ldr	r3, [pc, #148]	; (800088c <SystemClock_Config+0xcc>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a21      	ldr	r2, [pc, #132]	; (8000890 <SystemClock_Config+0xd0>)
 800080a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <SystemClock_Config+0xd0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081c:	2301      	movs	r3, #1
 800081e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000820:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800082e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000830:	2304      	movs	r3, #4
 8000832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000834:	23a8      	movs	r3, #168	; 0xa8
 8000836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800083c:	2307      	movs	r3, #7
 800083e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4618      	mov	r0, r3
 8000846:	f001 fb0f 	bl	8001e68 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000850:	f000 f974 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2302      	movs	r3, #2
 800085a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000860:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000866:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2105      	movs	r1, #5
 8000872:	4618      	mov	r0, r3
 8000874:	f001 fd70 	bl	8002358 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800087e:	f000 f95d 	bl	8000b3c <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	; 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_ETH_Init+0x84>)
 800089a:	4a20      	ldr	r2, [pc, #128]	; (800091c <MX_ETH_Init+0x88>)
 800089c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800089e:	4b20      	ldr	r3, [pc, #128]	; (8000920 <MX_ETH_Init+0x8c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_ETH_Init+0x8c>)
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008aa:	4b1d      	ldr	r3, [pc, #116]	; (8000920 <MX_ETH_Init+0x8c>)
 80008ac:	22e1      	movs	r2, #225	; 0xe1
 80008ae:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008b0:	4b1b      	ldr	r3, [pc, #108]	; (8000920 <MX_ETH_Init+0x8c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008b6:	4b1a      	ldr	r3, [pc, #104]	; (8000920 <MX_ETH_Init+0x8c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008bc:	4b18      	ldr	r3, [pc, #96]	; (8000920 <MX_ETH_Init+0x8c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_ETH_Init+0x84>)
 80008c4:	4a16      	ldr	r2, [pc, #88]	; (8000920 <MX_ETH_Init+0x8c>)
 80008c6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_ETH_Init+0x84>)
 80008ca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008ce:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_ETH_Init+0x84>)
 80008d2:	4a14      	ldr	r2, [pc, #80]	; (8000924 <MX_ETH_Init+0x90>)
 80008d4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_ETH_Init+0x84>)
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <MX_ETH_Init+0x94>)
 80008da:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_ETH_Init+0x84>)
 80008de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008e2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <MX_ETH_Init+0x84>)
 80008e6:	f000 fcb5 	bl	8001254 <HAL_ETH_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008f0:	f000 f924 	bl	8000b3c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008f4:	2238      	movs	r2, #56	; 0x38
 80008f6:	2100      	movs	r1, #0
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_ETH_Init+0x98>)
 80008fa:	f002 fd35 	bl	8003368 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008fe:	4b0b      	ldr	r3, [pc, #44]	; (800092c <MX_ETH_Init+0x98>)
 8000900:	2221      	movs	r2, #33	; 0x21
 8000902:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000904:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_ETH_Init+0x98>)
 8000906:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800090a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_ETH_Init+0x98>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200001a0 	.word	0x200001a0
 800091c:	40028000 	.word	0x40028000
 8000920:	200007a0 	.word	0x200007a0
 8000924:	20000100 	.word	0x20000100
 8000928:	20000060 	.word	0x20000060
 800092c:	20000028 	.word	0x20000028

08000930 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <MX_USART3_UART_Init+0x50>)
 8000938:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <MX_USART3_UART_Init+0x4c>)
 800093c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000940:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_USART3_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_USART3_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_USART3_UART_Init+0x4c>)
 8000968:	f001 ff16 	bl	8002798 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000972:	f000 f8e3 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000250 	.word	0x20000250
 8000980:	40004800 	.word	0x40004800

08000984 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800098a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800098e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000992:	2204      	movs	r2, #4
 8000994:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000998:	2202      	movs	r2, #2
 800099a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009bc:	2201      	movs	r2, #1
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80009c8:	f001 f931 	bl	8001c2e <HAL_PCD_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80009d2:	f000 f8b3 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000294 	.word	0x20000294

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	; 0x30
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
 80009fa:	4b4c      	ldr	r3, [pc, #304]	; (8000b2c <MX_GPIO_Init+0x14c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a4b      	ldr	r2, [pc, #300]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b49      	ldr	r3, [pc, #292]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	61bb      	str	r3, [r7, #24]
 8000a10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	4b45      	ldr	r3, [pc, #276]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a44      	ldr	r2, [pc, #272]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b42      	ldr	r3, [pc, #264]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b3e      	ldr	r3, [pc, #248]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a3d      	ldr	r2, [pc, #244]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b3b      	ldr	r3, [pc, #236]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b37      	ldr	r3, [pc, #220]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a36      	ldr	r2, [pc, #216]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b34      	ldr	r3, [pc, #208]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	4b30      	ldr	r3, [pc, #192]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a70:	f043 0308 	orr.w	r3, r3, #8
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0308 	and.w	r3, r3, #8
 8000a7e:	60bb      	str	r3, [r7, #8]
 8000a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b29      	ldr	r3, [pc, #164]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a28      	ldr	r2, [pc, #160]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b26      	ldr	r3, [pc, #152]	; (8000b2c <MX_GPIO_Init+0x14c>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000aa4:	4822      	ldr	r0, [pc, #136]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000aa6:	f001 f8a9 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2140      	movs	r1, #64	; 0x40
 8000aae:	4821      	ldr	r0, [pc, #132]	; (8000b34 <MX_GPIO_Init+0x154>)
 8000ab0:	f001 f8a4 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481b      	ldr	r0, [pc, #108]	; (8000b38 <MX_GPIO_Init+0x158>)
 8000acc:	f000 feea 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ad0:	f244 0381 	movw	r3, #16513	; 0x4081
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4811      	ldr	r0, [pc, #68]	; (8000b30 <MX_GPIO_Init+0x150>)
 8000aea:	f000 fedb 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aee:	2340      	movs	r3, #64	; 0x40
 8000af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	4619      	mov	r1, r3
 8000b04:	480b      	ldr	r0, [pc, #44]	; (8000b34 <MX_GPIO_Init+0x154>)
 8000b06:	f000 fecd 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <MX_GPIO_Init+0x154>)
 8000b1e:	f000 fec1 	bl	80018a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b22:	bf00      	nop
 8000b24:	3730      	adds	r7, #48	; 0x30
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400
 8000b34:	40021800 	.word	0x40021800
 8000b38:	40020800 	.word	0x40020800

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b56:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	603b      	str	r3, [r7, #0]
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08e      	sub	sp, #56	; 0x38
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a55      	ldr	r2, [pc, #340]	; (8000d0c <HAL_ETH_MspInit+0x174>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	f040 80a4 	bne.w	8000d04 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
 8000bc0:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a52      	ldr	r2, [pc, #328]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000bc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b50      	ldr	r3, [pc, #320]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd4:	623b      	str	r3, [r7, #32]
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
 8000bdc:	4b4c      	ldr	r3, [pc, #304]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a4b      	ldr	r2, [pc, #300]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000be2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000bf0:	61fb      	str	r3, [r7, #28]
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]
 8000bf8:	4b45      	ldr	r3, [pc, #276]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a44      	ldr	r2, [pc, #272]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000bfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b42      	ldr	r3, [pc, #264]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c0c:	61bb      	str	r3, [r7, #24]
 8000c0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	4b3e      	ldr	r3, [pc, #248]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4a3d      	ldr	r2, [pc, #244]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c1a:	f043 0304 	orr.w	r3, r3, #4
 8000c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000c20:	4b3b      	ldr	r3, [pc, #236]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c24:	f003 0304 	and.w	r3, r3, #4
 8000c28:	617b      	str	r3, [r7, #20]
 8000c2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	4b37      	ldr	r3, [pc, #220]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a36      	ldr	r2, [pc, #216]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3c:	4b34      	ldr	r3, [pc, #208]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a2f      	ldr	r2, [pc, #188]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c52:	f043 0302 	orr.w	r3, r3, #2
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
 8000c58:	4b2d      	ldr	r3, [pc, #180]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	f003 0302 	and.w	r3, r3, #2
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6c:	4a28      	ldr	r2, [pc, #160]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c72:	6313      	str	r3, [r2, #48]	; 0x30
 8000c74:	4b26      	ldr	r3, [pc, #152]	; (8000d10 <HAL_ETH_MspInit+0x178>)
 8000c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c80:	2332      	movs	r3, #50	; 0x32
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c90:	230b      	movs	r3, #11
 8000c92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	481e      	ldr	r0, [pc, #120]	; (8000d14 <HAL_ETH_MspInit+0x17c>)
 8000c9c:	f000 fe02 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ca0:	2386      	movs	r3, #134	; 0x86
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb0:	230b      	movs	r3, #11
 8000cb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4817      	ldr	r0, [pc, #92]	; (8000d18 <HAL_ETH_MspInit+0x180>)
 8000cbc:	f000 fdf2 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cd2:	230b      	movs	r3, #11
 8000cd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480f      	ldr	r0, [pc, #60]	; (8000d1c <HAL_ETH_MspInit+0x184>)
 8000cde:	f000 fde1 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ce2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf4:	230b      	movs	r3, #11
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4808      	ldr	r0, [pc, #32]	; (8000d20 <HAL_ETH_MspInit+0x188>)
 8000d00:	f000 fdd0 	bl	80018a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3738      	adds	r7, #56	; 0x38
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40028000 	.word	0x40028000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020800 	.word	0x40020800
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	40021800 	.word	0x40021800

08000d24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a19      	ldr	r2, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0x84>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d12c      	bne.n	8000da0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b18      	ldr	r3, [pc, #96]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a17      	ldr	r2, [pc, #92]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_UART_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d90:	2307      	movs	r3, #7
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_UART_MspInit+0x8c>)
 8000d9c:	f000 fd82 	bl	80018a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40004800 	.word	0x40004800
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020c00 	.word	0x40020c00

08000db4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dd4:	d13f      	bne.n	8000e56 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <HAL_PCD_MspInit+0xac>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a20      	ldr	r2, [pc, #128]	; (8000e60 <HAL_PCD_MspInit+0xac>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <HAL_PCD_MspInit+0xac>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000df2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e04:	230a      	movs	r3, #10
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4815      	ldr	r0, [pc, #84]	; (8000e64 <HAL_PCD_MspInit+0xb0>)
 8000e10:	f000 fd48 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	480e      	ldr	r0, [pc, #56]	; (8000e64 <HAL_PCD_MspInit+0xb0>)
 8000e2a:	f000 fd3b 	bl	80018a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_PCD_MspInit+0xac>)
 8000e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e32:	4a0b      	ldr	r2, [pc, #44]	; (8000e60 <HAL_PCD_MspInit+0xac>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	6353      	str	r3, [r2, #52]	; 0x34
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_PCD_MspInit+0xac>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <HAL_PCD_MspInit+0xac>)
 8000e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e48:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <HAL_PCD_MspInit+0xac>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e56:	bf00      	nop
 8000e58:	3728      	adds	r7, #40	; 0x28
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000

08000e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <NMI_Handler+0x4>

08000e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <HardFault_Handler+0x4>

08000e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <MemManage_Handler+0x4>

08000e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <BusFault_Handler+0x4>

08000e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <UsageFault_Handler+0x4>

08000e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b085      	sub	sp, #20
 8000e8a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000e8c:	f3ef 8314 	mrs	r3, CONTROL
 8000e90:	607b      	str	r3, [r7, #4]
  return(result);
 8000e92:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8000e94:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	f023 0301 	bic.w	r3, r3, #1
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	f383 8814 	msr	CONTROL, r3
}
 8000ea8:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 f893 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <SystemInit+0x20>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <SystemInit+0x20>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 8000f04:	bf00      	nop
  nop
 8000f06:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f40 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f0c:	480d      	ldr	r0, [pc, #52]	; (8000f44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f0e:	490e      	ldr	r1, [pc, #56]	; (8000f48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f10:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f24:	4c0b      	ldr	r4, [pc, #44]	; (8000f54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f32:	f7ff ffd5 	bl	8000ee0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f36:	f002 f9f3 	bl	8003320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3a:	f7ff fbf9 	bl	8000730 <main>
  bx  lr    
 8000f3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f40:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f4c:	080033e0 	.word	0x080033e0
  ldr r2, =_sbss
 8000f50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f54:	200007ac 	.word	0x200007ac

08000f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_Init+0x40>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_Init+0x40>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x40>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 f931 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f7ff fdda 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f93b 	bl	800123a <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f000 f911 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000000 	.word	0x20000000
 8000ff8:	20000008 	.word	0x20000008
 8000ffc:	20000004 	.word	0x20000004

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008
 8001024:	200007a8 	.word	0x200007a8

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	200007a8 	.word	0x200007a8

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	; (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
         );
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff47 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001214:	f7ff ff5c 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68b9      	ldr	r1, [r7, #8]
 800121e:	6978      	ldr	r0, [r7, #20]
 8001220:	f7ff ff8e 	bl	8001140 <NVIC_EncodePriority>
 8001224:	4602      	mov	r2, r0
 8001226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122a:	4611      	mov	r1, r2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff ff5d 	bl	80010ec <__NVIC_SetPriority>
}
 8001232:	bf00      	nop
 8001234:	3718      	adds	r7, #24
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff ffb0 	bl	80011a8 <SysTick_Config>
 8001248:	4603      	mov	r3, r0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
	...

08001254 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e06c      	b.n	8001340 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800126c:	2b00      	cmp	r3, #0
 800126e:	d106      	bne.n	800127e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2223      	movs	r2, #35	; 0x23
 8001274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fc8d 	bl	8000b98 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b31      	ldr	r3, [pc, #196]	; (8001348 <HAL_ETH_Init+0xf4>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a30      	ldr	r2, [pc, #192]	; (8001348 <HAL_ETH_Init+0xf4>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b2e      	ldr	r3, [pc, #184]	; (8001348 <HAL_ETH_Init+0xf4>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <HAL_ETH_Init+0xf8>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	4a2b      	ldr	r2, [pc, #172]	; (800134c <HAL_ETH_Init+0xf8>)
 80012a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012a4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <HAL_ETH_Init+0xf8>)
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4927      	ldr	r1, [pc, #156]	; (800134c <HAL_ETH_Init+0xf8>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <HAL_ETH_Init+0xf8>)
 80012b6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012d0:	f7ff feaa 	bl	8001028 <HAL_GetTick>
 80012d4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012d6:	e011      	b.n	80012fc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80012d8:	f7ff fea6 	bl	8001028 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012e6:	d909      	bls.n	80012fc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2204      	movs	r2, #4
 80012ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	22e0      	movs	r2, #224	; 0xe0
 80012f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e021      	b.n	8001340 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1e4      	bne.n	80012d8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f000 f958 	bl	80015c4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f9ff 	bl	8001718 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f000 fa55 	bl	80017ca <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	461a      	mov	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f9bd 	bl	80016a8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2210      	movs	r2, #16
 800133a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800133e:	2300      	movs	r3, #0
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40013800 	.word	0x40013800

08001350 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	4b51      	ldr	r3, [pc, #324]	; (80014ac <ETH_SetMACConfig+0x15c>)
 8001366:	4013      	ands	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	7c1b      	ldrb	r3, [r3, #16]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d102      	bne.n	8001378 <ETH_SetMACConfig+0x28>
 8001372:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001376:	e000      	b.n	800137a <ETH_SetMACConfig+0x2a>
 8001378:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	7c5b      	ldrb	r3, [r3, #17]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <ETH_SetMACConfig+0x38>
 8001382:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001386:	e000      	b.n	800138a <ETH_SetMACConfig+0x3a>
 8001388:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800138a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001390:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	7fdb      	ldrb	r3, [r3, #31]
 8001396:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001398:	431a      	orrs	r2, r3
                        macconf->Speed |
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800139e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	7f92      	ldrb	r2, [r2, #30]
 80013a4:	2a00      	cmp	r2, #0
 80013a6:	d102      	bne.n	80013ae <ETH_SetMACConfig+0x5e>
 80013a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013ac:	e000      	b.n	80013b0 <ETH_SetMACConfig+0x60>
 80013ae:	2200      	movs	r2, #0
                        macconf->Speed |
 80013b0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	7f1b      	ldrb	r3, [r3, #28]
 80013b6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013b8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	791b      	ldrb	r3, [r3, #4]
 80013c4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80013c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	f892 2020 	ldrb.w	r2, [r2, #32]
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d102      	bne.n	80013d8 <ETH_SetMACConfig+0x88>
 80013d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d6:	e000      	b.n	80013da <ETH_SetMACConfig+0x8a>
 80013d8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	7bdb      	ldrb	r3, [r3, #15]
 80013e0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80013e2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80013e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80013f0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013f2:	4313      	orrs	r3, r2
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff fe18 	bl	8001040 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001426:	4013      	ands	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001436:	2a00      	cmp	r2, #0
 8001438:	d101      	bne.n	800143e <ETH_SetMACConfig+0xee>
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	e000      	b.n	8001440 <ETH_SetMACConfig+0xf0>
 800143e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001440:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001446:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800144e:	2a01      	cmp	r2, #1
 8001450:	d101      	bne.n	8001456 <ETH_SetMACConfig+0x106>
 8001452:	2208      	movs	r2, #8
 8001454:	e000      	b.n	8001458 <ETH_SetMACConfig+0x108>
 8001456:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001458:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001460:	2a01      	cmp	r2, #1
 8001462:	d101      	bne.n	8001468 <ETH_SetMACConfig+0x118>
 8001464:	2204      	movs	r2, #4
 8001466:	e000      	b.n	800146a <ETH_SetMACConfig+0x11a>
 8001468:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800146a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001472:	2a01      	cmp	r2, #1
 8001474:	d101      	bne.n	800147a <ETH_SetMACConfig+0x12a>
 8001476:	2202      	movs	r2, #2
 8001478:	e000      	b.n	800147c <ETH_SetMACConfig+0x12c>
 800147a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800147c:	4313      	orrs	r3, r2
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	4313      	orrs	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	68fa      	ldr	r2, [r7, #12]
 800148a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001494:	2001      	movs	r0, #1
 8001496:	f7ff fdd3 	bl	8001040 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	ff20810f 	.word	0xff20810f

080014b0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4b3d      	ldr	r3, [pc, #244]	; (80015c0 <ETH_SetDMAConfig+0x110>)
 80014ca:	4013      	ands	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	7b1b      	ldrb	r3, [r3, #12]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <ETH_SetDMAConfig+0x2c>
 80014d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014da:	e000      	b.n	80014de <ETH_SetDMAConfig+0x2e>
 80014dc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	7b5b      	ldrb	r3, [r3, #13]
 80014e2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014e4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	7f52      	ldrb	r2, [r2, #29]
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	d102      	bne.n	80014f4 <ETH_SetDMAConfig+0x44>
 80014ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014f2:	e000      	b.n	80014f6 <ETH_SetDMAConfig+0x46>
 80014f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80014f6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	7b9b      	ldrb	r3, [r3, #14]
 80014fc:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80014fe:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001504:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	7f1b      	ldrb	r3, [r3, #28]
 800150a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800150c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	7f9b      	ldrb	r3, [r3, #30]
 8001512:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001514:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800151a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001522:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001524:	4313      	orrs	r3, r2
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	4313      	orrs	r3, r2
 800152a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001534:	461a      	mov	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001546:	2001      	movs	r0, #1
 8001548:	f7ff fd7a 	bl	8001040 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001554:	461a      	mov	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	791b      	ldrb	r3, [r3, #4]
 800155e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001564:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800156a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001570:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001578:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800157a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001580:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001582:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001588:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6812      	ldr	r2, [r2, #0]
 800158e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001592:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001596:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015a4:	2001      	movs	r0, #1
 80015a6:	f7ff fd4b 	bl	8001040 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6013      	str	r3, [r2, #0]
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	f8de3f23 	.word	0xf8de3f23

080015c4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0a6      	sub	sp, #152	; 0x98
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80015cc:	2301      	movs	r3, #1
 80015ce:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80015d8:	2300      	movs	r3, #0
 80015da:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80015e2:	2301      	movs	r3, #1
 80015e4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80015ee:	2301      	movs	r3, #1
 80015f0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001600:	2300      	movs	r3, #0
 8001602:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800160a:	2300      	movs	r3, #0
 800160c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001626:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800162c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001630:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f7ff fe86 	bl	8001350 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001644:	2301      	movs	r3, #1
 8001646:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001648:	2301      	movs	r3, #1
 800164a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800164c:	2301      	movs	r3, #1
 800164e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001652:	2301      	movs	r3, #1
 8001654:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800165a:	2300      	movs	r3, #0
 800165c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800166a:	2301      	movs	r3, #1
 800166c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001670:	2301      	movs	r3, #1
 8001672:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001678:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800167a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800167e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001684:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001686:	2301      	movs	r3, #1
 8001688:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001694:	f107 0308 	add.w	r3, r7, #8
 8001698:	4619      	mov	r1, r3
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ff08 	bl	80014b0 <ETH_SetDMAConfig>
}
 80016a0:	bf00      	nop
 80016a2:	3798      	adds	r7, #152	; 0x98
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3305      	adds	r3, #5
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	021b      	lsls	r3, r3, #8
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	3204      	adds	r2, #4
 80016c0:	7812      	ldrb	r2, [r2, #0]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	4b11      	ldr	r3, [pc, #68]	; (8001710 <ETH_MACAddressConfig+0x68>)
 80016ca:	4413      	add	r3, r2
 80016cc:	461a      	mov	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3303      	adds	r3, #3
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	061a      	lsls	r2, r3, #24
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3302      	adds	r3, #2
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	3301      	adds	r3, #1
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	021b      	lsls	r3, r3, #8
 80016ec:	4313      	orrs	r3, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <ETH_MACAddressConfig+0x6c>)
 80016fa:	4413      	add	r3, r2
 80016fc:	461a      	mov	r2, r3
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	6013      	str	r3, [r2, #0]
}
 8001702:	bf00      	nop
 8001704:	371c      	adds	r7, #28
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40028040 	.word	0x40028040
 8001714:	40028044 	.word	0x40028044

08001718 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e03e      	b.n	80017a4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68d9      	ldr	r1, [r3, #12]
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	440b      	add	r3, r1
 8001736:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001750:	68b9      	ldr	r1, [r7, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68fa      	ldr	r2, [r7, #12]
 8001756:	3206      	adds	r2, #6
 8001758:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2b02      	cmp	r3, #2
 800176c:	d80c      	bhi.n	8001788 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68d9      	ldr	r1, [r3, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	461a      	mov	r2, r3
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	e004      	b.n	8001792 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3301      	adds	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d9bd      	bls.n	8001726 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017bc:	611a      	str	r2, [r3, #16]
}
 80017be:	bf00      	nop
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	e046      	b.n	8001866 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6919      	ldr	r1, [r3, #16]
 80017dc:	68fa      	ldr	r2, [r7, #12]
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	440b      	add	r3, r1
 80017e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2200      	movs	r2, #0
 80017fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2200      	movs	r2, #0
 8001800:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001814:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800181c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800182a:	68b9      	ldr	r1, [r7, #8]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	3212      	adds	r2, #18
 8001832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2b02      	cmp	r3, #2
 800183a:	d80c      	bhi.n	8001856 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6919      	ldr	r1, [r3, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	440b      	add	r3, r1
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	60da      	str	r2, [r3, #12]
 8001854:	e004      	b.n	8001860 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	461a      	mov	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b03      	cmp	r3, #3
 800186a:	d9b5      	bls.n	80017d8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	691a      	ldr	r2, [r3, #16]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001896:	60da      	str	r2, [r3, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	; 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e177      	b.n	8001bb0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	429a      	cmp	r2, r3
 80018da:	f040 8166 	bne.w	8001baa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d005      	beq.n	80018f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d130      	bne.n	8001958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 0201 	and.w	r2, r3, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b03      	cmp	r3, #3
 8001962:	d017      	beq.n	8001994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d123      	bne.n	80019e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80c0 	beq.w	8001baa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b66      	ldr	r3, [pc, #408]	; (8001bc8 <HAL_GPIO_Init+0x324>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a32:	4a65      	ldr	r2, [pc, #404]	; (8001bc8 <HAL_GPIO_Init+0x324>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3a:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <HAL_GPIO_Init+0x324>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a46:	4a61      	ldr	r2, [pc, #388]	; (8001bcc <HAL_GPIO_Init+0x328>)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_GPIO_Init+0x32c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d037      	beq.n	8001ae2 <HAL_GPIO_Init+0x23e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a57      	ldr	r2, [pc, #348]	; (8001bd4 <HAL_GPIO_Init+0x330>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d031      	beq.n	8001ade <HAL_GPIO_Init+0x23a>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a56      	ldr	r2, [pc, #344]	; (8001bd8 <HAL_GPIO_Init+0x334>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d02b      	beq.n	8001ada <HAL_GPIO_Init+0x236>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a55      	ldr	r2, [pc, #340]	; (8001bdc <HAL_GPIO_Init+0x338>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d025      	beq.n	8001ad6 <HAL_GPIO_Init+0x232>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a54      	ldr	r2, [pc, #336]	; (8001be0 <HAL_GPIO_Init+0x33c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d01f      	beq.n	8001ad2 <HAL_GPIO_Init+0x22e>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a53      	ldr	r2, [pc, #332]	; (8001be4 <HAL_GPIO_Init+0x340>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d019      	beq.n	8001ace <HAL_GPIO_Init+0x22a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a52      	ldr	r2, [pc, #328]	; (8001be8 <HAL_GPIO_Init+0x344>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_GPIO_Init+0x226>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a51      	ldr	r2, [pc, #324]	; (8001bec <HAL_GPIO_Init+0x348>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_GPIO_Init+0x222>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a50      	ldr	r2, [pc, #320]	; (8001bf0 <HAL_GPIO_Init+0x34c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d007      	beq.n	8001ac2 <HAL_GPIO_Init+0x21e>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4f      	ldr	r2, [pc, #316]	; (8001bf4 <HAL_GPIO_Init+0x350>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d101      	bne.n	8001abe <HAL_GPIO_Init+0x21a>
 8001aba:	2309      	movs	r3, #9
 8001abc:	e012      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001abe:	230a      	movs	r3, #10
 8001ac0:	e010      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	e00e      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e00c      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001aca:	2306      	movs	r3, #6
 8001acc:	e00a      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ace:	2305      	movs	r3, #5
 8001ad0:	e008      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ad2:	2304      	movs	r3, #4
 8001ad4:	e006      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e004      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e002      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_GPIO_Init+0x240>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	69fa      	ldr	r2, [r7, #28]
 8001ae6:	f002 0203 	and.w	r2, r2, #3
 8001aea:	0092      	lsls	r2, r2, #2
 8001aec:	4093      	lsls	r3, r2
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af4:	4935      	ldr	r1, [pc, #212]	; (8001bcc <HAL_GPIO_Init+0x328>)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	089b      	lsrs	r3, r3, #2
 8001afa:	3302      	adds	r3, #2
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b26:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b2c:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b50:	4a29      	ldr	r2, [pc, #164]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b56:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4013      	ands	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d003      	beq.n	8001ba4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <HAL_GPIO_Init+0x354>)
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3301      	adds	r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	2b0f      	cmp	r3, #15
 8001bb4:	f67f ae84 	bls.w	80018c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40013800 	.word	0x40013800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020c00 	.word	0x40020c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40021400 	.word	0x40021400
 8001be8:	40021800 	.word	0x40021800
 8001bec:	40021c00 	.word	0x40021c00
 8001bf0:	40022000 	.word	0x40022000
 8001bf4:	40022400 	.word	0x40022400
 8001bf8:	40013c00 	.word	0x40013c00

08001bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c0c:	787b      	ldrb	r3, [r7, #1]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c18:	e003      	b.n	8001c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	041a      	lsls	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	619a      	str	r2, [r3, #24]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c30:	b08f      	sub	sp, #60	; 0x3c
 8001c32:	af0a      	add	r7, sp, #40	; 0x28
 8001c34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e10f      	b.n	8001e60 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff f8aa 	bl	8000db4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2203      	movs	r2, #3
 8001c64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d102      	bne.n	8001c7a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f001 f8ad 	bl	8002dde <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	603b      	str	r3, [r7, #0]
 8001c8a:	687e      	ldr	r6, [r7, #4]
 8001c8c:	466d      	mov	r5, sp
 8001c8e:	f106 0410 	add.w	r4, r6, #16
 8001c92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ca2:	1d33      	adds	r3, r6, #4
 8001ca4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca6:	6838      	ldr	r0, [r7, #0]
 8001ca8:	f001 f838 	bl	8002d1c <USB_CoreInit>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0d0      	b.n	8001e60 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f001 f89b 	bl	8002e00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	e04a      	b.n	8001d66 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	333d      	adds	r3, #61	; 0x3d
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ce4:	7bfa      	ldrb	r2, [r7, #15]
 8001ce6:	6879      	ldr	r1, [r7, #4]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	333c      	adds	r3, #60	; 0x3c
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	b298      	uxth	r0, r3
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3344      	adds	r3, #68	; 0x44
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d10:	7bfa      	ldrb	r2, [r7, #15]
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3340      	adds	r3, #64	; 0x40
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	3348      	adds	r3, #72	; 0x48
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d38:	7bfa      	ldrb	r2, [r7, #15]
 8001d3a:	6879      	ldr	r1, [r7, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	334c      	adds	r3, #76	; 0x4c
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	3354      	adds	r3, #84	; 0x54
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	3301      	adds	r3, #1
 8001d64:	73fb      	strb	r3, [r7, #15]
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d3af      	bcc.n	8001cd0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e044      	b.n	8001e00 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	4413      	add	r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d9e:	7bfa      	ldrb	r2, [r7, #15]
 8001da0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001da2:	7bfa      	ldrb	r2, [r7, #15]
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4413      	add	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001db4:	2200      	movs	r2, #0
 8001db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001db8:	7bfa      	ldrb	r2, [r7, #15]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001df6:	2200      	movs	r2, #0
 8001df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfa:	7bfb      	ldrb	r3, [r7, #15]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3b5      	bcc.n	8001d76 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	687e      	ldr	r6, [r7, #4]
 8001e12:	466d      	mov	r5, sp
 8001e14:	f106 0410 	add.w	r4, r6, #16
 8001e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e20:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e24:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e28:	1d33      	adds	r3, r6, #4
 8001e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e2c:	6838      	ldr	r0, [r7, #0]
 8001e2e:	f001 f833 	bl	8002e98 <USB_DevInit>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e00d      	b.n	8001e60 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 f9fe 	bl	800325a <USB_DevDisconnect>

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e267      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d075      	beq.n	8001f72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e86:	4b88      	ldr	r3, [pc, #544]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	d00c      	beq.n	8001eac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e92:	4b85      	ldr	r3, [pc, #532]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d112      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e9e:	4b82      	ldr	r3, [pc, #520]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	4b7e      	ldr	r3, [pc, #504]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d05b      	beq.n	8001f70 <HAL_RCC_OscConfig+0x108>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d157      	bne.n	8001f70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e242      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ecc:	d106      	bne.n	8001edc <HAL_RCC_OscConfig+0x74>
 8001ece:	4b76      	ldr	r3, [pc, #472]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a75      	ldr	r2, [pc, #468]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e01d      	b.n	8001f18 <HAL_RCC_OscConfig+0xb0>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x98>
 8001ee6:	4b70      	ldr	r3, [pc, #448]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6f      	ldr	r2, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6c      	ldr	r2, [pc, #432]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0xb0>
 8001f00:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a68      	ldr	r2, [pc, #416]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a65      	ldr	r2, [pc, #404]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff f882 	bl	8001028 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff f87e 	bl	8001028 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e207      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0xc0>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff f86e 	bl	8001028 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff f86a 	bl	8001028 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1f3      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0xe8>
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d063      	beq.n	8002046 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f7e:	4b4a      	ldr	r3, [pc, #296]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00b      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d11c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f96:	4b44      	ldr	r3, [pc, #272]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d116      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_RCC_OscConfig+0x152>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e1c7      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4937      	ldr	r1, [pc, #220]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	e03a      	b.n	8002046 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd8:	4b34      	ldr	r3, [pc, #208]	; (80020ac <HAL_RCC_OscConfig+0x244>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fde:	f7ff f823 	bl	8001028 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7ff f81f 	bl	8001028 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1a8      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	4b2b      	ldr	r3, [pc, #172]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4925      	ldr	r1, [pc, #148]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e015      	b.n	8002046 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201a:	4b24      	ldr	r3, [pc, #144]	; (80020ac <HAL_RCC_OscConfig+0x244>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff f802 	bl	8001028 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002028:	f7fe fffe 	bl	8001028 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e187      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d036      	beq.n	80020c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d016      	beq.n	8002088 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_RCC_OscConfig+0x248>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002060:	f7fe ffe2 	bl	8001028 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002068:	f7fe ffde 	bl	8001028 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e167      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_OscConfig+0x240>)
 800207c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x200>
 8002086:	e01b      	b.n	80020c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_OscConfig+0x248>)
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208e:	f7fe ffcb 	bl	8001028 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002094:	e00e      	b.n	80020b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002096:	f7fe ffc7 	bl	8001028 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d907      	bls.n	80020b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e150      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
 80020a8:	40023800 	.word	0x40023800
 80020ac:	42470000 	.word	0x42470000
 80020b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	4b88      	ldr	r3, [pc, #544]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1ea      	bne.n	8002096 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 8097 	beq.w	80021fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d2:	4b81      	ldr	r3, [pc, #516]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10f      	bne.n	80020fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
 80020e2:	4b7d      	ldr	r3, [pc, #500]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	4a7c      	ldr	r2, [pc, #496]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	; 0x40
 80020ee:	4b7a      	ldr	r3, [pc, #488]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fe:	4b77      	ldr	r3, [pc, #476]	; (80022dc <HAL_RCC_OscConfig+0x474>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d118      	bne.n	800213c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210a:	4b74      	ldr	r3, [pc, #464]	; (80022dc <HAL_RCC_OscConfig+0x474>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a73      	ldr	r2, [pc, #460]	; (80022dc <HAL_RCC_OscConfig+0x474>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002116:	f7fe ff87 	bl	8001028 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211e:	f7fe ff83 	bl	8001028 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e10c      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	4b6a      	ldr	r3, [pc, #424]	; (80022dc <HAL_RCC_OscConfig+0x474>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x2ea>
 8002144:	4b64      	ldr	r3, [pc, #400]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002148:	4a63      	ldr	r2, [pc, #396]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6713      	str	r3, [r2, #112]	; 0x70
 8002150:	e01c      	b.n	800218c <HAL_RCC_OscConfig+0x324>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b05      	cmp	r3, #5
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x30c>
 800215a:	4b5f      	ldr	r3, [pc, #380]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 800215c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215e:	4a5e      	ldr	r2, [pc, #376]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6713      	str	r3, [r2, #112]	; 0x70
 8002166:	4b5c      	ldr	r3, [pc, #368]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a5b      	ldr	r2, [pc, #364]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6713      	str	r3, [r2, #112]	; 0x70
 8002172:	e00b      	b.n	800218c <HAL_RCC_OscConfig+0x324>
 8002174:	4b58      	ldr	r3, [pc, #352]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a57      	ldr	r2, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 800217a:	f023 0301 	bic.w	r3, r3, #1
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	4b55      	ldr	r3, [pc, #340]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	4a54      	ldr	r2, [pc, #336]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002186:	f023 0304 	bic.w	r3, r3, #4
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d015      	beq.n	80021c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002194:	f7fe ff48 	bl	8001028 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219a:	e00a      	b.n	80021b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800219c:	f7fe ff44 	bl	8001028 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e0cb      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b2:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80021b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0ee      	beq.n	800219c <HAL_RCC_OscConfig+0x334>
 80021be:	e014      	b.n	80021ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c0:	f7fe ff32 	bl	8001028 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c6:	e00a      	b.n	80021de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c8:	f7fe ff2e 	bl	8001028 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e0b5      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021de:	4b3e      	ldr	r3, [pc, #248]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1ee      	bne.n	80021c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ea:	7dfb      	ldrb	r3, [r7, #23]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d105      	bne.n	80021fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	4a38      	ldr	r2, [pc, #224]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80021f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80a1 	beq.w	8002348 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002206:	4b34      	ldr	r3, [pc, #208]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b08      	cmp	r3, #8
 8002210:	d05c      	beq.n	80022cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b02      	cmp	r3, #2
 8002218:	d141      	bne.n	800229e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221a:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7fe ff02 	bl	8001028 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002228:	f7fe fefe 	bl	8001028 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e087      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223a:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69da      	ldr	r2, [r3, #28]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	019b      	lsls	r3, r3, #6
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	3b01      	subs	r3, #1
 8002260:	041b      	lsls	r3, r3, #16
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	491b      	ldr	r1, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 800226c:	4313      	orrs	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7fe fed7 	bl	8001028 <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227e:	f7fe fed3 	bl	8001028 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e05c      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x416>
 800229c:	e054      	b.n	8002348 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229e:	4b10      	ldr	r3, [pc, #64]	; (80022e0 <HAL_RCC_OscConfig+0x478>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7fe fec0 	bl	8001028 <HAL_GetTick>
 80022a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ac:	f7fe febc 	bl	8001028 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e045      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_RCC_OscConfig+0x470>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f0      	bne.n	80022ac <HAL_RCC_OscConfig+0x444>
 80022ca:	e03d      	b.n	8002348 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e038      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40007000 	.word	0x40007000
 80022e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022e4:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_RCC_OscConfig+0x4ec>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d028      	beq.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d121      	bne.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d11a      	bne.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002314:	4013      	ands	r3, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800231a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800231c:	4293      	cmp	r3, r2
 800231e:	d111      	bne.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232a:	085b      	lsrs	r3, r3, #1
 800232c:	3b01      	subs	r3, #1
 800232e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d107      	bne.n	8002344 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e0cc      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800236c:	4b68      	ldr	r3, [pc, #416]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	429a      	cmp	r2, r3
 8002378:	d90c      	bls.n	8002394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237a:	4b65      	ldr	r3, [pc, #404]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	b2d2      	uxtb	r2, r2
 8002380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d044      	beq.n	8002478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d119      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d003      	beq.n	8002416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	2b03      	cmp	r3, #3
 8002414:	d107      	bne.n	8002426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002416:	4b3f      	ldr	r3, [pc, #252]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e06f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002426:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e067      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002436:	4b37      	ldr	r3, [pc, #220]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 0203 	bic.w	r2, r3, #3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	4934      	ldr	r1, [pc, #208]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	4313      	orrs	r3, r2
 8002446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002448:	f7fe fdee 	bl	8001028 <HAL_GetTick>
 800244c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	e00a      	b.n	8002466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002450:	f7fe fdea 	bl	8001028 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	f241 3288 	movw	r2, #5000	; 0x1388
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e04f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 020c 	and.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	429a      	cmp	r2, r3
 8002476:	d1eb      	bne.n	8002450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d20c      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b22      	ldr	r3, [pc, #136]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f821 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	490a      	ldr	r1, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	5ccb      	ldrb	r3, [r1, r3]
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fd4e 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40023c00 	.word	0x40023c00
 8002514:	40023800 	.word	0x40023800
 8002518:	080033b8 	.word	0x080033b8
 800251c:	20000000 	.word	0x20000000
 8002520:	20000004 	.word	0x20000004

08002524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002528:	b094      	sub	sp, #80	; 0x50
 800252a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	647b      	str	r3, [r7, #68]	; 0x44
 8002530:	2300      	movs	r3, #0
 8002532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002534:	2300      	movs	r3, #0
 8002536:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253c:	4b79      	ldr	r3, [pc, #484]	; (8002724 <HAL_RCC_GetSysClockFreq+0x200>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b08      	cmp	r3, #8
 8002546:	d00d      	beq.n	8002564 <HAL_RCC_GetSysClockFreq+0x40>
 8002548:	2b08      	cmp	r3, #8
 800254a:	f200 80e1 	bhi.w	8002710 <HAL_RCC_GetSysClockFreq+0x1ec>
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0x34>
 8002552:	2b04      	cmp	r3, #4
 8002554:	d003      	beq.n	800255e <HAL_RCC_GetSysClockFreq+0x3a>
 8002556:	e0db      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002558:	4b73      	ldr	r3, [pc, #460]	; (8002728 <HAL_RCC_GetSysClockFreq+0x204>)
 800255a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800255c:	e0db      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255e:	4b73      	ldr	r3, [pc, #460]	; (800272c <HAL_RCC_GetSysClockFreq+0x208>)
 8002560:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002562:	e0d8      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002564:	4b6f      	ldr	r3, [pc, #444]	; (8002724 <HAL_RCC_GetSysClockFreq+0x200>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800256c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256e:	4b6d      	ldr	r3, [pc, #436]	; (8002724 <HAL_RCC_GetSysClockFreq+0x200>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d063      	beq.n	8002642 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257a:	4b6a      	ldr	r3, [pc, #424]	; (8002724 <HAL_RCC_GetSysClockFreq+0x200>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	2200      	movs	r2, #0
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
 8002584:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800258c:	633b      	str	r3, [r7, #48]	; 0x30
 800258e:	2300      	movs	r3, #0
 8002590:	637b      	str	r3, [r7, #52]	; 0x34
 8002592:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002596:	4622      	mov	r2, r4
 8002598:	462b      	mov	r3, r5
 800259a:	f04f 0000 	mov.w	r0, #0
 800259e:	f04f 0100 	mov.w	r1, #0
 80025a2:	0159      	lsls	r1, r3, #5
 80025a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a8:	0150      	lsls	r0, r2, #5
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	4621      	mov	r1, r4
 80025b0:	1a51      	subs	r1, r2, r1
 80025b2:	6139      	str	r1, [r7, #16]
 80025b4:	4629      	mov	r1, r5
 80025b6:	eb63 0301 	sbc.w	r3, r3, r1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025c8:	4659      	mov	r1, fp
 80025ca:	018b      	lsls	r3, r1, #6
 80025cc:	4651      	mov	r1, sl
 80025ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025d2:	4651      	mov	r1, sl
 80025d4:	018a      	lsls	r2, r1, #6
 80025d6:	4651      	mov	r1, sl
 80025d8:	ebb2 0801 	subs.w	r8, r2, r1
 80025dc:	4659      	mov	r1, fp
 80025de:	eb63 0901 	sbc.w	r9, r3, r1
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025f6:	4690      	mov	r8, r2
 80025f8:	4699      	mov	r9, r3
 80025fa:	4623      	mov	r3, r4
 80025fc:	eb18 0303 	adds.w	r3, r8, r3
 8002600:	60bb      	str	r3, [r7, #8]
 8002602:	462b      	mov	r3, r5
 8002604:	eb49 0303 	adc.w	r3, r9, r3
 8002608:	60fb      	str	r3, [r7, #12]
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002616:	4629      	mov	r1, r5
 8002618:	024b      	lsls	r3, r1, #9
 800261a:	4621      	mov	r1, r4
 800261c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002620:	4621      	mov	r1, r4
 8002622:	024a      	lsls	r2, r1, #9
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800262a:	2200      	movs	r2, #0
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
 800262e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002630:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002634:	f7fd fe90 	bl	8000358 <__aeabi_uldivmod>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4613      	mov	r3, r2
 800263e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002640:	e058      	b.n	80026f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002642:	4b38      	ldr	r3, [pc, #224]	; (8002724 <HAL_RCC_GetSysClockFreq+0x200>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	099b      	lsrs	r3, r3, #6
 8002648:	2200      	movs	r2, #0
 800264a:	4618      	mov	r0, r3
 800264c:	4611      	mov	r1, r2
 800264e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002652:	623b      	str	r3, [r7, #32]
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
 8002658:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800265c:	4642      	mov	r2, r8
 800265e:	464b      	mov	r3, r9
 8002660:	f04f 0000 	mov.w	r0, #0
 8002664:	f04f 0100 	mov.w	r1, #0
 8002668:	0159      	lsls	r1, r3, #5
 800266a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800266e:	0150      	lsls	r0, r2, #5
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4641      	mov	r1, r8
 8002676:	ebb2 0a01 	subs.w	sl, r2, r1
 800267a:	4649      	mov	r1, r9
 800267c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	f04f 0300 	mov.w	r3, #0
 8002688:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800268c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002690:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002694:	ebb2 040a 	subs.w	r4, r2, sl
 8002698:	eb63 050b 	sbc.w	r5, r3, fp
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	00eb      	lsls	r3, r5, #3
 80026a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026aa:	00e2      	lsls	r2, r4, #3
 80026ac:	4614      	mov	r4, r2
 80026ae:	461d      	mov	r5, r3
 80026b0:	4643      	mov	r3, r8
 80026b2:	18e3      	adds	r3, r4, r3
 80026b4:	603b      	str	r3, [r7, #0]
 80026b6:	464b      	mov	r3, r9
 80026b8:	eb45 0303 	adc.w	r3, r5, r3
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026ca:	4629      	mov	r1, r5
 80026cc:	028b      	lsls	r3, r1, #10
 80026ce:	4621      	mov	r1, r4
 80026d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026d4:	4621      	mov	r1, r4
 80026d6:	028a      	lsls	r2, r1, #10
 80026d8:	4610      	mov	r0, r2
 80026da:	4619      	mov	r1, r3
 80026dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026de:	2200      	movs	r2, #0
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	61fa      	str	r2, [r7, #28]
 80026e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e8:	f7fd fe36 	bl	8000358 <__aeabi_uldivmod>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4613      	mov	r3, r2
 80026f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	0c1b      	lsrs	r3, r3, #16
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	3301      	adds	r3, #1
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002704:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800270e:	e002      	b.n	8002716 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <HAL_RCC_GetSysClockFreq+0x204>)
 8002712:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002714:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002718:	4618      	mov	r0, r3
 800271a:	3750      	adds	r7, #80	; 0x50
 800271c:	46bd      	mov	sp, r7
 800271e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002722:	bf00      	nop
 8002724:	40023800 	.word	0x40023800
 8002728:	00f42400 	.word	0x00f42400
 800272c:	007a1200 	.word	0x007a1200

08002730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_RCC_GetHCLKFreq+0x14>)
 8002736:	681b      	ldr	r3, [r3, #0]
}
 8002738:	4618      	mov	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	20000000 	.word	0x20000000

08002748 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800274c:	f7ff fff0 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002750:	4602      	mov	r2, r0
 8002752:	4b05      	ldr	r3, [pc, #20]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	0a9b      	lsrs	r3, r3, #10
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	4903      	ldr	r1, [pc, #12]	; (800276c <HAL_RCC_GetPCLK1Freq+0x24>)
 800275e:	5ccb      	ldrb	r3, [r1, r3]
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	080033c8 	.word	0x080033c8

08002770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002774:	f7ff ffdc 	bl	8002730 <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <HAL_RCC_GetPCLK2Freq+0x20>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0b5b      	lsrs	r3, r3, #13
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4903      	ldr	r1, [pc, #12]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
}
 800278c:	4618      	mov	r0, r3
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40023800 	.word	0x40023800
 8002794:	080033c8 	.word	0x080033c8

08002798 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e03f      	b.n	800282a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fab0 	bl	8000d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2224      	movs	r2, #36	; 0x24
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 f829 	bl	8002834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695a      	ldr	r2, [r3, #20]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002800:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002810:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002838:	b0c0      	sub	sp, #256	; 0x100
 800283a:	af00      	add	r7, sp, #0
 800283c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800284c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002850:	68d9      	ldr	r1, [r3, #12]
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	ea40 0301 	orr.w	r3, r0, r1
 800285c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800285e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	431a      	orrs	r2, r3
 800286c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	431a      	orrs	r2, r3
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	4313      	orrs	r3, r2
 800287c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800288c:	f021 010c 	bic.w	r1, r1, #12
 8002890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800289a:	430b      	orrs	r3, r1
 800289c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800289e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ae:	6999      	ldr	r1, [r3, #24]
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	ea40 0301 	orr.w	r3, r0, r1
 80028ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	4b8f      	ldr	r3, [pc, #572]	; (8002b00 <UART_SetConfig+0x2cc>)
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d005      	beq.n	80028d4 <UART_SetConfig+0xa0>
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4b8d      	ldr	r3, [pc, #564]	; (8002b04 <UART_SetConfig+0x2d0>)
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d104      	bne.n	80028de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028d4:	f7ff ff4c 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 80028d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80028dc:	e003      	b.n	80028e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028de:	f7ff ff33 	bl	8002748 <HAL_RCC_GetPCLK1Freq>
 80028e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f0:	f040 810c 	bne.w	8002b0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f8:	2200      	movs	r2, #0
 80028fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002902:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002906:	4622      	mov	r2, r4
 8002908:	462b      	mov	r3, r5
 800290a:	1891      	adds	r1, r2, r2
 800290c:	65b9      	str	r1, [r7, #88]	; 0x58
 800290e:	415b      	adcs	r3, r3
 8002910:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002912:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002916:	4621      	mov	r1, r4
 8002918:	eb12 0801 	adds.w	r8, r2, r1
 800291c:	4629      	mov	r1, r5
 800291e:	eb43 0901 	adc.w	r9, r3, r1
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800292e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002932:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002936:	4690      	mov	r8, r2
 8002938:	4699      	mov	r9, r3
 800293a:	4623      	mov	r3, r4
 800293c:	eb18 0303 	adds.w	r3, r8, r3
 8002940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002944:	462b      	mov	r3, r5
 8002946:	eb49 0303 	adc.w	r3, r9, r3
 800294a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800294e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800295a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800295e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002962:	460b      	mov	r3, r1
 8002964:	18db      	adds	r3, r3, r3
 8002966:	653b      	str	r3, [r7, #80]	; 0x50
 8002968:	4613      	mov	r3, r2
 800296a:	eb42 0303 	adc.w	r3, r2, r3
 800296e:	657b      	str	r3, [r7, #84]	; 0x54
 8002970:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002974:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002978:	f7fd fcee 	bl	8000358 <__aeabi_uldivmod>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4b61      	ldr	r3, [pc, #388]	; (8002b08 <UART_SetConfig+0x2d4>)
 8002982:	fba3 2302 	umull	r2, r3, r3, r2
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	011c      	lsls	r4, r3, #4
 800298a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800298e:	2200      	movs	r2, #0
 8002990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002994:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002998:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800299c:	4642      	mov	r2, r8
 800299e:	464b      	mov	r3, r9
 80029a0:	1891      	adds	r1, r2, r2
 80029a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80029a4:	415b      	adcs	r3, r3
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029ac:	4641      	mov	r1, r8
 80029ae:	eb12 0a01 	adds.w	sl, r2, r1
 80029b2:	4649      	mov	r1, r9
 80029b4:	eb43 0b01 	adc.w	fp, r3, r1
 80029b8:	f04f 0200 	mov.w	r2, #0
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029cc:	4692      	mov	sl, r2
 80029ce:	469b      	mov	fp, r3
 80029d0:	4643      	mov	r3, r8
 80029d2:	eb1a 0303 	adds.w	r3, sl, r3
 80029d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029da:	464b      	mov	r3, r9
 80029dc:	eb4b 0303 	adc.w	r3, fp, r3
 80029e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029f8:	460b      	mov	r3, r1
 80029fa:	18db      	adds	r3, r3, r3
 80029fc:	643b      	str	r3, [r7, #64]	; 0x40
 80029fe:	4613      	mov	r3, r2
 8002a00:	eb42 0303 	adc.w	r3, r2, r3
 8002a04:	647b      	str	r3, [r7, #68]	; 0x44
 8002a06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a0e:	f7fd fca3 	bl	8000358 <__aeabi_uldivmod>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4611      	mov	r1, r2
 8002a18:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <UART_SetConfig+0x2d4>)
 8002a1a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2264      	movs	r2, #100	; 0x64
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	1acb      	subs	r3, r1, r3
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a2e:	4b36      	ldr	r3, [pc, #216]	; (8002b08 <UART_SetConfig+0x2d4>)
 8002a30:	fba3 2302 	umull	r2, r3, r3, r2
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a3c:	441c      	add	r4, r3
 8002a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a42:	2200      	movs	r2, #0
 8002a44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a48:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a50:	4642      	mov	r2, r8
 8002a52:	464b      	mov	r3, r9
 8002a54:	1891      	adds	r1, r2, r2
 8002a56:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a58:	415b      	adcs	r3, r3
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a60:	4641      	mov	r1, r8
 8002a62:	1851      	adds	r1, r2, r1
 8002a64:	6339      	str	r1, [r7, #48]	; 0x30
 8002a66:	4649      	mov	r1, r9
 8002a68:	414b      	adcs	r3, r1
 8002a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a78:	4659      	mov	r1, fp
 8002a7a:	00cb      	lsls	r3, r1, #3
 8002a7c:	4651      	mov	r1, sl
 8002a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a82:	4651      	mov	r1, sl
 8002a84:	00ca      	lsls	r2, r1, #3
 8002a86:	4610      	mov	r0, r2
 8002a88:	4619      	mov	r1, r3
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	189b      	adds	r3, r3, r2
 8002a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a94:	464b      	mov	r3, r9
 8002a96:	460a      	mov	r2, r1
 8002a98:	eb42 0303 	adc.w	r3, r2, r3
 8002a9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002aac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ab0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	18db      	adds	r3, r3, r3
 8002ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aba:	4613      	mov	r3, r2
 8002abc:	eb42 0303 	adc.w	r3, r2, r3
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ac6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002aca:	f7fd fc45 	bl	8000358 <__aeabi_uldivmod>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <UART_SetConfig+0x2d4>)
 8002ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad8:	095b      	lsrs	r3, r3, #5
 8002ada:	2164      	movs	r1, #100	; 0x64
 8002adc:	fb01 f303 	mul.w	r3, r1, r3
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	3332      	adds	r3, #50	; 0x32
 8002ae6:	4a08      	ldr	r2, [pc, #32]	; (8002b08 <UART_SetConfig+0x2d4>)
 8002ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8002aec:	095b      	lsrs	r3, r3, #5
 8002aee:	f003 0207 	and.w	r2, r3, #7
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4422      	add	r2, r4
 8002afa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002afc:	e105      	b.n	8002d0a <UART_SetConfig+0x4d6>
 8002afe:	bf00      	nop
 8002b00:	40011000 	.word	0x40011000
 8002b04:	40011400 	.word	0x40011400
 8002b08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b10:	2200      	movs	r2, #0
 8002b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b16:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b1e:	4642      	mov	r2, r8
 8002b20:	464b      	mov	r3, r9
 8002b22:	1891      	adds	r1, r2, r2
 8002b24:	6239      	str	r1, [r7, #32]
 8002b26:	415b      	adcs	r3, r3
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b2e:	4641      	mov	r1, r8
 8002b30:	1854      	adds	r4, r2, r1
 8002b32:	4649      	mov	r1, r9
 8002b34:	eb43 0501 	adc.w	r5, r3, r1
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	00eb      	lsls	r3, r5, #3
 8002b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b46:	00e2      	lsls	r2, r4, #3
 8002b48:	4614      	mov	r4, r2
 8002b4a:	461d      	mov	r5, r3
 8002b4c:	4643      	mov	r3, r8
 8002b4e:	18e3      	adds	r3, r4, r3
 8002b50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b54:	464b      	mov	r3, r9
 8002b56:	eb45 0303 	adc.w	r3, r5, r3
 8002b5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	008b      	lsls	r3, r1, #2
 8002b7e:	4621      	mov	r1, r4
 8002b80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b84:	4621      	mov	r1, r4
 8002b86:	008a      	lsls	r2, r1, #2
 8002b88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b8c:	f7fd fbe4 	bl	8000358 <__aeabi_uldivmod>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4b60      	ldr	r3, [pc, #384]	; (8002d18 <UART_SetConfig+0x4e4>)
 8002b96:	fba3 2302 	umull	r2, r3, r3, r2
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	011c      	lsls	r4, r3, #4
 8002b9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ba8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002bac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002bb0:	4642      	mov	r2, r8
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	1891      	adds	r1, r2, r2
 8002bb6:	61b9      	str	r1, [r7, #24]
 8002bb8:	415b      	adcs	r3, r3
 8002bba:	61fb      	str	r3, [r7, #28]
 8002bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bc0:	4641      	mov	r1, r8
 8002bc2:	1851      	adds	r1, r2, r1
 8002bc4:	6139      	str	r1, [r7, #16]
 8002bc6:	4649      	mov	r1, r9
 8002bc8:	414b      	adcs	r3, r1
 8002bca:	617b      	str	r3, [r7, #20]
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd8:	4659      	mov	r1, fp
 8002bda:	00cb      	lsls	r3, r1, #3
 8002bdc:	4651      	mov	r1, sl
 8002bde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002be2:	4651      	mov	r1, sl
 8002be4:	00ca      	lsls	r2, r1, #3
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	4603      	mov	r3, r0
 8002bec:	4642      	mov	r2, r8
 8002bee:	189b      	adds	r3, r3, r2
 8002bf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bf4:	464b      	mov	r3, r9
 8002bf6:	460a      	mov	r2, r1
 8002bf8:	eb42 0303 	adc.w	r3, r2, r3
 8002bfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c0a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c18:	4649      	mov	r1, r9
 8002c1a:	008b      	lsls	r3, r1, #2
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c22:	4641      	mov	r1, r8
 8002c24:	008a      	lsls	r2, r1, #2
 8002c26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c2a:	f7fd fb95 	bl	8000358 <__aeabi_uldivmod>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4b39      	ldr	r3, [pc, #228]	; (8002d18 <UART_SetConfig+0x4e4>)
 8002c34:	fba3 1302 	umull	r1, r3, r3, r2
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	2164      	movs	r1, #100	; 0x64
 8002c3c:	fb01 f303 	mul.w	r3, r1, r3
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	3332      	adds	r3, #50	; 0x32
 8002c46:	4a34      	ldr	r2, [pc, #208]	; (8002d18 <UART_SetConfig+0x4e4>)
 8002c48:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c52:	441c      	add	r4, r3
 8002c54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c58:	2200      	movs	r2, #0
 8002c5a:	673b      	str	r3, [r7, #112]	; 0x70
 8002c5c:	677a      	str	r2, [r7, #116]	; 0x74
 8002c5e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c62:	4642      	mov	r2, r8
 8002c64:	464b      	mov	r3, r9
 8002c66:	1891      	adds	r1, r2, r2
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	415b      	adcs	r3, r3
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c72:	4641      	mov	r1, r8
 8002c74:	1851      	adds	r1, r2, r1
 8002c76:	6039      	str	r1, [r7, #0]
 8002c78:	4649      	mov	r1, r9
 8002c7a:	414b      	adcs	r3, r1
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	f04f 0300 	mov.w	r3, #0
 8002c86:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c8a:	4659      	mov	r1, fp
 8002c8c:	00cb      	lsls	r3, r1, #3
 8002c8e:	4651      	mov	r1, sl
 8002c90:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c94:	4651      	mov	r1, sl
 8002c96:	00ca      	lsls	r2, r1, #3
 8002c98:	4610      	mov	r0, r2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4642      	mov	r2, r8
 8002ca0:	189b      	adds	r3, r3, r2
 8002ca2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ca4:	464b      	mov	r3, r9
 8002ca6:	460a      	mov	r2, r1
 8002ca8:	eb42 0303 	adc.w	r3, r2, r3
 8002cac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb8:	667a      	str	r2, [r7, #100]	; 0x64
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	008b      	lsls	r3, r1, #2
 8002cca:	4641      	mov	r1, r8
 8002ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cd0:	4641      	mov	r1, r8
 8002cd2:	008a      	lsls	r2, r1, #2
 8002cd4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002cd8:	f7fd fb3e 	bl	8000358 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <UART_SetConfig+0x4e4>)
 8002ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2164      	movs	r1, #100	; 0x64
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	3332      	adds	r3, #50	; 0x32
 8002cf4:	4a08      	ldr	r2, [pc, #32]	; (8002d18 <UART_SetConfig+0x4e4>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	f003 020f 	and.w	r2, r3, #15
 8002d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4422      	add	r2, r4
 8002d08:	609a      	str	r2, [r3, #8]
}
 8002d0a:	bf00      	nop
 8002d0c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d10:	46bd      	mov	sp, r7
 8002d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d16:	bf00      	nop
 8002d18:	51eb851f 	.word	0x51eb851f

08002d1c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d1c:	b084      	sub	sp, #16
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	f107 001c 	add.w	r0, r7, #28
 8002d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d122      	bne.n	8002d7a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d105      	bne.n	8002d6e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 faa2 	bl	80032b8 <USB_CoreReset>
 8002d74:	4603      	mov	r3, r0
 8002d76:	73fb      	strb	r3, [r7, #15]
 8002d78:	e01a      	b.n	8002db0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 fa96 	bl	80032b8 <USB_CoreReset>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
 8002da2:	e005      	b.n	8002db0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d10b      	bne.n	8002dce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f043 0206 	orr.w	r2, r3, #6
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dda:	b004      	add	sp, #16
 8002ddc:	4770      	bx	lr

08002dde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f023 0201 	bic.w	r2, r3, #1
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	460b      	mov	r3, r1
 8002e0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d115      	bne.n	8002e4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f7fe f906 	bl	8001040 <HAL_Delay>
      ms++;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3301      	adds	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa2e 	bl	800329c <USB_GetMode>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d01e      	beq.n	8002e84 <USB_SetCurrentMode+0x84>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b31      	cmp	r3, #49	; 0x31
 8002e4a:	d9f0      	bls.n	8002e2e <USB_SetCurrentMode+0x2e>
 8002e4c:	e01a      	b.n	8002e84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d115      	bne.n	8002e80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e60:	2001      	movs	r0, #1
 8002e62:	f7fe f8ed 	bl	8001040 <HAL_Delay>
      ms++;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fa15 	bl	800329c <USB_GetMode>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d005      	beq.n	8002e84 <USB_SetCurrentMode+0x84>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b31      	cmp	r3, #49	; 0x31
 8002e7c:	d9f0      	bls.n	8002e60 <USB_SetCurrentMode+0x60>
 8002e7e:	e001      	b.n	8002e84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e005      	b.n	8002e90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2b32      	cmp	r3, #50	; 0x32
 8002e88:	d101      	bne.n	8002e8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e98:	b084      	sub	sp, #16
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	e009      	b.n	8002ecc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	3340      	adds	r3, #64	; 0x40
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	2b0e      	cmp	r3, #14
 8002ed0:	d9f2      	bls.n	8002eb8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d11c      	bne.n	8002f12 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee6:	f043 0302 	orr.w	r3, r3, #2
 8002eea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f08:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38
 8002f10:	e00b      	b.n	8002f2a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f30:	461a      	mov	r2, r3
 8002f32:	2300      	movs	r3, #0
 8002f34:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f44:	461a      	mov	r2, r3
 8002f46:	680b      	ldr	r3, [r1, #0]
 8002f48:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d10c      	bne.n	8002f6a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d104      	bne.n	8002f60 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f56:	2100      	movs	r1, #0
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f965 	bl	8003228 <USB_SetDevSpeed>
 8002f5e:	e008      	b.n	8002f72 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f60:	2101      	movs	r1, #1
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f960 	bl	8003228 <USB_SetDevSpeed>
 8002f68:	e003      	b.n	8002f72 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f6a:	2103      	movs	r1, #3
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f95b 	bl	8003228 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f72:	2110      	movs	r1, #16
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f8f3 	bl	8003160 <USB_FlushTxFifo>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f91f 	bl	80031c8 <USB_FlushRxFifo>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2300      	movs	r3, #0
 8002faa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fb8:	2300      	movs	r3, #0
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	e043      	b.n	8003046 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fd4:	d118      	bne.n	8003008 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e013      	b.n	800301a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffe:	461a      	mov	r2, r3
 8003000:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e008      	b.n	800301a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4413      	add	r3, r2
 8003010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003014:	461a      	mov	r2, r3
 8003016:	2300      	movs	r3, #0
 8003018:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	2300      	movs	r3, #0
 800302a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	015a      	lsls	r2, r3, #5
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4413      	add	r3, r2
 8003034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003038:	461a      	mov	r2, r3
 800303a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800303e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	3301      	adds	r3, #1
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	429a      	cmp	r2, r3
 800304c:	d3b7      	bcc.n	8002fbe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	e043      	b.n	80030dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003066:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800306a:	d118      	bne.n	800309e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4413      	add	r3, r2
 800307a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800307e:	461a      	mov	r2, r3
 8003080:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e013      	b.n	80030b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003094:	461a      	mov	r2, r3
 8003096:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800309a:	6013      	str	r3, [r2, #0]
 800309c:	e008      	b.n	80030b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030aa:	461a      	mov	r2, r3
 80030ac:	2300      	movs	r3, #0
 80030ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030bc:	461a      	mov	r2, r3
 80030be:	2300      	movs	r3, #0
 80030c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ce:	461a      	mov	r2, r3
 80030d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	3301      	adds	r3, #1
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d3b7      	bcc.n	8003054 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003104:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699a      	ldr	r2, [r3, #24]
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <USB_DevInit+0x2c4>)
 800311e:	4313      	orrs	r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f043 0208 	orr.w	r2, r3, #8
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003138:	2b01      	cmp	r3, #1
 800313a:	d107      	bne.n	800314c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800314c:	7dfb      	ldrb	r3, [r7, #23]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003158:	b004      	add	sp, #16
 800315a:	4770      	bx	lr
 800315c:	803c3800 	.word	0x803c3800

08003160 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3301      	adds	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <USB_FlushTxFifo+0x64>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d901      	bls.n	8003180 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e01b      	b.n	80031b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	daf2      	bge.n	800316e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	019b      	lsls	r3, r3, #6
 8003190:	f043 0220 	orr.w	r2, r3, #32
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3301      	adds	r3, #1
 800319c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <USB_FlushTxFifo+0x64>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e006      	b.n	80031b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	f003 0320 	and.w	r3, r3, #32
 80031b2:	2b20      	cmp	r3, #32
 80031b4:	d0f0      	beq.n	8003198 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031b6:	2300      	movs	r3, #0
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr
 80031c4:	00030d40 	.word	0x00030d40

080031c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	3301      	adds	r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	4a11      	ldr	r2, [pc, #68]	; (8003224 <USB_FlushRxFifo+0x5c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d901      	bls.n	80031e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e018      	b.n	8003218 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	daf2      	bge.n	80031d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2210      	movs	r2, #16
 80031f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	3301      	adds	r3, #1
 80031fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4a08      	ldr	r2, [pc, #32]	; (8003224 <USB_FlushRxFifo+0x5c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e006      	b.n	8003218 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b10      	cmp	r3, #16
 8003214:	d0f0      	beq.n	80031f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	00030d40 	.word	0x00030d40

08003228 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	68f9      	ldr	r1, [r7, #12]
 8003244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003274:	f023 0303 	bic.w	r3, r3, #3
 8003278:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003288:	f043 0302 	orr.w	r3, r3, #2
 800328c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3714      	adds	r7, #20
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f003 0301 	and.w	r3, r3, #1
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	3301      	adds	r3, #1
 80032c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a13      	ldr	r2, [pc, #76]	; (800331c <USB_CoreReset+0x64>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e01b      	b.n	800330e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	daf2      	bge.n	80032c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	f043 0201 	orr.w	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3301      	adds	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4a09      	ldr	r2, [pc, #36]	; (800331c <USB_CoreReset+0x64>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e006      	b.n	800330e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d0f0      	beq.n	80032ee <USB_CoreReset+0x36>

  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	00030d40 	.word	0x00030d40

08003320 <__libc_init_array>:
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	4d0d      	ldr	r5, [pc, #52]	; (8003358 <__libc_init_array+0x38>)
 8003324:	4c0d      	ldr	r4, [pc, #52]	; (800335c <__libc_init_array+0x3c>)
 8003326:	1b64      	subs	r4, r4, r5
 8003328:	10a4      	asrs	r4, r4, #2
 800332a:	2600      	movs	r6, #0
 800332c:	42a6      	cmp	r6, r4
 800332e:	d109      	bne.n	8003344 <__libc_init_array+0x24>
 8003330:	4d0b      	ldr	r5, [pc, #44]	; (8003360 <__libc_init_array+0x40>)
 8003332:	4c0c      	ldr	r4, [pc, #48]	; (8003364 <__libc_init_array+0x44>)
 8003334:	f000 f820 	bl	8003378 <_init>
 8003338:	1b64      	subs	r4, r4, r5
 800333a:	10a4      	asrs	r4, r4, #2
 800333c:	2600      	movs	r6, #0
 800333e:	42a6      	cmp	r6, r4
 8003340:	d105      	bne.n	800334e <__libc_init_array+0x2e>
 8003342:	bd70      	pop	{r4, r5, r6, pc}
 8003344:	f855 3b04 	ldr.w	r3, [r5], #4
 8003348:	4798      	blx	r3
 800334a:	3601      	adds	r6, #1
 800334c:	e7ee      	b.n	800332c <__libc_init_array+0xc>
 800334e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003352:	4798      	blx	r3
 8003354:	3601      	adds	r6, #1
 8003356:	e7f2      	b.n	800333e <__libc_init_array+0x1e>
 8003358:	080033d8 	.word	0x080033d8
 800335c:	080033d8 	.word	0x080033d8
 8003360:	080033d8 	.word	0x080033d8
 8003364:	080033dc 	.word	0x080033dc

08003368 <memset>:
 8003368:	4402      	add	r2, r0
 800336a:	4603      	mov	r3, r0
 800336c:	4293      	cmp	r3, r2
 800336e:	d100      	bne.n	8003372 <memset+0xa>
 8003370:	4770      	bx	lr
 8003372:	f803 1b01 	strb.w	r1, [r3], #1
 8003376:	e7f9      	b.n	800336c <memset+0x4>

08003378 <_init>:
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337a:	bf00      	nop
 800337c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337e:	bc08      	pop	{r3}
 8003380:	469e      	mov	lr, r3
 8003382:	4770      	bx	lr

08003384 <_fini>:
 8003384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003386:	bf00      	nop
 8003388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800338a:	bc08      	pop	{r3}
 800338c:	469e      	mov	lr, r3
 800338e:	4770      	bx	lr
