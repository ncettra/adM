
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004228  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044ec  080044ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080044ec  080044ec  000144ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044f4  080044f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000d9ae  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000f77d  00000000  00000000  0002d9ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d9c  00000000  00000000  0003d167  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ba8  00000000  00000000  0003ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d98fc  00000000  00000000  0003fab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000af0  00000000  00000000  001193b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023b2f  00000000  00000000  00119ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d9cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003134  00000000  00000000  0013da20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080043bc 	.word	0x080043bc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080043bc 	.word	0x080043bc

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f0:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f2:	4770      	bx	lr

080001f4 <asm_zeros>:
   r1: longitud (longitud)
*/

.thumb_func
	asm_zeros:
	    cbz r0, exit_1   			// Salto a la etiqueta exit si r0 es cero
 80001f4:	b130      	cbz	r0, 8000204 <exit_1>
	    cbz r1, exit_1   			// Salto a la etiqueta exit si r1 es cero
 80001f6:	b129      	cbz	r1, 8000204 <exit_1>
	    movs r3, #0    				// Carga el valor cero en el registro r3
 80001f8:	2300      	movs	r3, #0
	    mov r2, r1     				// Copia el valor de r1 en r2
 80001fa:	460a      	mov	r2, r1

080001fc <loop_1>:
	loop_1:
	    subs r2, #1    				// Decrementa el valor de r2 en uno
 80001fc:	3a01      	subs	r2, #1
	    str r3, [r0, r2, LSL #2]  	// Almacena el valor cero en la dirección de memoria calculada a partir de r0 y r2, multiplicada por cuatro debido a LSL #2
 80001fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	    bne loop_1     				// Salta al loop si r2 no es cero
 8000202:	d1fb      	bne.n	80001fc <loop_1>

08000204 <exit_1>:
	exit_1:
	    bx lr          				// Retorno desde la función
 8000204:	4770      	bx	lr

08000206 <asm_productoEscalar32>:
	r3: escalar a multiplicar
*/

.thumb_func
    asm_productoEscalar32:
    	push {r4}					//guarda r4 en la pila
 8000206:	b410      	push	{r4}

08000208 <loop_2>:
    loop_2:
    	subs r2, #1 				//decrementamos la longitud
 8000208:	3a01      	subs	r2, #1
    	ldr r4, [r0, r2, LSL #2] 	//cargamos un valor de 32bits en el r4 y lo desplazamos
 800020a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    	mul r4, r4, r3 			 	//multiplica r4 por el escalar en r3
 800020e:	fb04 f403 	mul.w	r4, r4, r3
    	str r4, [r1, r2, LSL #2] 	//guardamos el resultado de la multiplicacion
 8000212:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    	bne loop_2
 8000216:	d1f7      	bne.n	8000208 <loop_2>
    	pop {r4}					//restaura los valores previos de los registros
 8000218:	bc10      	pop	{r4}
        bx lr
 800021a:	4770      	bx	lr

0800021c <asm_productoEscalar16>:
	r3: escalar a multiplicar
*/
//NOTA EL H INDICA EL THUMB de 16bits
.thumb_func
    asm_productoEscalar16:
    	push {r4}			   		//guardo r4 en pila
 800021c:	b410      	push	{r4}

0800021e <loop_3>:
    loop_3:
    	ldrh r4, [r0, r2, LSL #1] 	//cargamos un valor de 32bits en el r4 y lo desplazamos
 800021e:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
    	mul r4, r4, r3 			 	//multiplica r4 por el escalar en r3
 8000222:	fb04 f403 	mul.w	r4, r4, r3
    	strh r4, [r1, r2, LSL #1] 	//guardamos el resultado de la multiplicacion
 8000226:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
    	subs r2, #1 				//decrementamos la longitud
 800022a:	3a01      	subs	r2, #1
    	bne loop_2
 800022c:	d1ec      	bne.n	8000208 <loop_2>
    	pop {r4}					//restaura los valores previos de los registros
 800022e:	bc10      	pop	{r4}
        bx lr
 8000230:	4770      	bx	lr

08000232 <asm_productoEscalar12>:
	r3: escalar a multiplicar

*/
.thumb_func
asm_productoEscalar12:
	    push {r4,r5}              	// Guardar registros en la pila
 8000232:	b430      	push	{r4, r5}

08000234 <loop_4>:
	loop_4:
	    ldrh r4, [r0, r2, LSL #1]   // Cargar valor de medio palabra (16 bits) en r4
 8000234:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
	    mul r5, r4, r3              // Multiplicar r4 por el escalar r3 y lo tiro en r5
 8000238:	fb04 f503 	mul.w	r5, r4, r3
	    usat r4, #12, r5            // Saturar el resultado a 12 bits
 800023c:	f385 040c 	usat	r4, #12, r5
	    strh r4, [r1, r2, LSL #1]   // Almacenar el resultado en memoria
 8000240:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
	    subs r2, #1                 // Decrementar r2
 8000244:	3a01      	subs	r2, #1
	    bne loop_4                  // Mientras r2 > 0
 8000246:	d1f5      	bne.n	8000234 <loop_4>
	    pop {r4,r5}               	// Recuperar registros y retornar
 8000248:	bc30      	pop	{r4, r5}
	    bx lr
 800024a:	4770      	bx	lr

0800024c <asm_filtroVentana10>:


*/
.thumb_func
asm_filtroVentana10:
push {r4-r10}
 800024c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
	//r1 vector out
	//r2 logintud
	//r10 -> SampleOffset = 5 (ver en programa en C)
	//r9 -> WindowSize = SampleOffset*2 + 1 ---> 11

	mov r3, r2					// Resguardo longitud (r2) para ver cuando estoy fuera del vector
 8000250:	4613      	mov	r3, r2
	mov r9, #11 				// cantidad de muestras ventana
 8000252:	f04f 090b 	mov.w	r9, #11
	mov r10, #5 				// posicion de la ventana
 8000256:	f04f 0a05 	mov.w	sl, #5

0800025a <loop_5_1>:

loop_5_1: 						// Recorremos VectorIN
	subs r3, #1
 800025a:	3b01      	subs	r3, #1
	beq exit_5					// Si ya lo recorri saltar al exit
 800025c:	d01a      	beq.n	8000294 <exit_5>
	mov r6, #0					// Limpio el acumulador
 800025e:	f04f 0600 	mov.w	r6, #0
	add r4, r3, r10				// Posicion del vector + posicion central de la ventana r3+r10
 8000262:	eb03 040a 	add.w	r4, r3, sl
	cmp r4, r9					// Comparo con la cantidad de muestras que tiene la ventana
 8000266:	454c      	cmp	r4, r9
	mov r7, #0
 8000268:	f04f 0700 	mov.w	r7, #0
	itt gt						// Verifico que si la ventana es maás grande que las muestras restantes
 800026c:	bfc4      	itt	gt
	subgt r7, r4, r9
 800026e:	eba4 0709 	subgt.w	r7, r4, r9
	subgt r7, #1
 8000272:	3f01      	subgt	r7, #1
	mov r8, r9
 8000274:	46c8      	mov	r8, r9

08000276 <loop_5_2>:

loop_5_2:						// Recorremos la ventana para sumar y promediar
	subs r4, #1
 8000276:	3c01      	subs	r4, #1
	beq loop_5_1
 8000278:	d0ef      	beq.n	800025a <loop_5_1>
	cmp r2, r4					// ignorar operaciones si estamos afura del vector
 800027a:	42a2      	cmp	r2, r4
	bls loop_5_2
 800027c:	d9fb      	bls.n	8000276 <loop_5_2>
	cmp r4, r7
 800027e:	42bc      	cmp	r4, r7
	ittt ls						// Chequeo si llegue al final
 8000280:	bf9e      	ittt	ls
	udivls r6, r6, r8			// Si llegue divido para promediar
 8000282:	fbb6 f6f8 	udivls	r6, r6, r8
	strhls r6, [r1, r3, LSL #1]	// Guardo el resultado en vector out
 8000286:	f821 6013 	strhls.w	r6, [r1, r3, lsl #1]
	bls loop_5_1				// Sigue con el siguiente valor
 800028a:	e7e6      	bls.n	800025a <loop_5_1>

	ldrh r5, [r0, r4, LSL #1]
 800028c:	f830 5014 	ldrh.w	r5, [r0, r4, lsl #1]
	add r6, r6, r5				// r6 = r6 + r5 se suma una muetra más
 8000290:	442e      	add	r6, r5
	b loop_5_2
 8000292:	e7f0      	b.n	8000276 <loop_5_2>

08000294 <exit_5>:

exit_5:
	pop {r4-r10}
 8000294:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
	bx lr
 8000298:	4770      	bx	lr

0800029a <asm_pack32to16>:
prototipo: void pack32to16 (int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud);

*/
.thumb_func
asm_pack32to16:
    push {r4, r5}               	// Guardar registros en la pila
 800029a:	b430      	push	{r4, r5}
    mov r4, r0                      // Puntero al vector de entrada (32 bits)
 800029c:	4604      	mov	r4, r0
    mov r5, r1                      // Puntero al vector de salida (16 bits)
 800029e:	460d      	mov	r5, r1
    mov r0, r2                      // Longitud del vector
 80002a0:	4610      	mov	r0, r2

080002a2 <loop_6>:
loop_6:
    ldr r1, [r4], #4                // Cargar valor de 32 bits
 80002a2:	f854 1b04 	ldr.w	r1, [r4], #4
    movs r1, r1, LSR #16            // Desplazar valor de 32 bits a la derecha para obtener 16 bits
 80002a6:	0c09      	lsrs	r1, r1, #16
    strh r1, [r5], #2               // Almacenar valor de 16 bits en vector de salida
 80002a8:	f825 1b02 	strh.w	r1, [r5], #2
    subs r0, r0, #1                 // Decrementar contador
 80002ac:	3801      	subs	r0, #1
    bne loop_6                      // Repetir mientras contador no sea cero
 80002ae:	d1f8      	bne.n	80002a2 <loop_6>
    pop {r4, r5}                    // Recuperar registros y retornar
 80002b0:	bc30      	pop	{r4, r5}
    bx lr
 80002b2:	4770      	bx	lr

080002b4 <asm_max32>:
	retorno: la posicion del valor maximo en int32
*/

.thumb_func
asm_max32:
    push {r4}
 80002b4:	b410      	push	{r4}
    sub r1, #1
 80002b6:	f1a1 0101 	sub.w	r1, r1, #1
    ldr r2, [r0, r1, LSL #2]    // Se guarda el primer valor para comparar
 80002ba:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    mov r3, r1                 	// Se guarda el índice
 80002be:	460b      	mov	r3, r1
    subs r1, #1
 80002c0:	3901      	subs	r1, #1

080002c2 <loop_7>:
loop_7:
    ldr r4, [r0, r1, LSL #2]    // Se carga siguiente valor para comparar
 80002c2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    cmp r4, r2                 	// Se compara con el valor cargado previo
 80002c6:	4294      	cmp	r4, r2
    bgt greater_than           	// Salta a greater_than si r4 > r2
 80002c8:	dc02      	bgt.n	80002d0 <greater_than>
    subs r1, #1
 80002ca:	3901      	subs	r1, #1
    bne loop_7                 	// Vuelve al bucle si no se ha recorrido todo el vector
 80002cc:	d1f9      	bne.n	80002c2 <loop_7>
    b end
 80002ce:	e003      	b.n	80002d8 <end>

080002d0 <greater_than>:
greater_than:
    mov r2, r4                 	// Si el nuevo valor es mayor, se almacena en r2 para volver a comparar
 80002d0:	4622      	mov	r2, r4
    mov r3, r1                 	// Se guarda el índice
 80002d2:	460b      	mov	r3, r1
    subs r1, #1
 80002d4:	3901      	subs	r1, #1
    bne loop_7                 	// Vuelve al bucle si no se ha recorrido todo el vector
 80002d6:	d1f4      	bne.n	80002c2 <loop_7>

080002d8 <end>:
end:
    pop {r4}
 80002d8:	bc10      	pop	{r4}
    mov r0, r3                 	// Se guarda el valor de retorno
 80002da:	4618      	mov	r0, r3
    bx lr                      	// Colocar el resultado en el registro de retorno
 80002dc:	4770      	bx	lr

080002de <asm_downsampleM>:
	r3: N saltos
*/

.thumb_func
asm_downsampleM:
    push {r4-r6}
 80002de:	b470      	push	{r4, r5, r6}
    mov r4, #0                   // i = 0
 80002e0:	f04f 0400 	mov.w	r4, #0
    mov r5, #0                   // j = 0
 80002e4:	f04f 0500 	mov.w	r5, #0

080002e8 <loop_8>:
loop_8:
    ldr r6, [r0, r4, LSL #2]     // Cargar muestra de vectorIn
 80002e8:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
    str r6, [r1, r5, LSL #2]     // Almacenar muestra en vectorOut
 80002ec:	f841 6025 	str.w	r6, [r1, r5, lsl #2]
    add r4, r4, r3               // Incrementar i por N
 80002f0:	441c      	add	r4, r3
    add r5, r5, #1               // Incrementar j
 80002f2:	f105 0501 	add.w	r5, r5, #1
    cmp r4, r2                   // Comparar i con longitud
 80002f6:	4294      	cmp	r4, r2
    blt loop_8                   // Volver al bucle si i < longitud
 80002f8:	dbf6      	blt.n	80002e8 <loop_8>
    pop {r4-r6}
 80002fa:	bc70      	pop	{r4, r5, r6}
    bx lr
 80002fc:	4770      	bx	lr

080002fe <asm_invertir>:
	r1: longitud
*/

.thumb_func
asm_invertir:
push {r4}
 80002fe:	b410      	push	{r4}
    	mov r2, #0  				// posicion 0, en r1 tengo el otro extremo
 8000300:	f04f 0200 	mov.w	r2, #0

08000304 <loop_9>:
    loop_9:
    	subs r1, #1
 8000304:	3901      	subs	r1, #1

    	ldrh r3, [r0, r2, LSL #1]  	// !----->     !
 8000306:	f830 3012 	ldrh.w	r3, [r0, r2, lsl #1]
    	ldrh r4, [r0, r1, LSL #1]  	// !     <-----!
 800030a:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]

    	cmp r1, r2 					//verifico que el indice izq sea distinto al derecho
 800030e:	4291      	cmp	r1, r2

		itte hi 					// uso el if and then con doble condicionante
 8000310:	bf86      	itte	hi
		strhhi r3, [r0, r1, LSL #1]	// Intercambio valores de los extremos
 8000312:	f820 3011 	strhhi.w	r3, [r0, r1, lsl #1]
		strhhi r4, [r0, r2, LSL #1]
 8000316:	f820 4012 	strhhi.w	r4, [r0, r2, lsl #1]
		bls exit_9					// Se ejecuta hasta que las posiciones de r2 y r1 se solapen
 800031a:	e002      	bls.n	8000322 <exit_9>

    	add r2, #1 					// de un lado decresco y de este crezco (es más facil verlo en la funcion en C)
 800031c:	f102 0201 	add.w	r2, r2, #1
		bne loop_9
 8000320:	d1f0      	bne.n	8000304 <loop_9>

08000322 <exit_9>:
    exit_9:
    	pop {r4}
 8000322:	bc10      	pop	{r4}
        bx lr
 8000324:	4770      	bx	lr

08000326 <asm_eco>:
	aca hardcodie algunas cosas como las muestras, pero podria introducirlas y calcular mas cosas en funcion de los parametros
*/

.thumb_func
asm_eco:
    	push {r4-r6}
 8000326:	b470      	push	{r4, r5, r6}
    	mov r4, #882  				// Retraso de 20ms (882)
 8000328:	f240 3472 	movw	r4, #882	; 0x372
    	mov r2, #4095 				// Cant de muestras (4096)
 800032c:	f640 72ff 	movw	r2, #4095	; 0xfff

08000330 <loop_10>:
    loop_10:
    	sub r3, r2, r4  			// (4096 - 882)
 8000330:	eba2 0304 	sub.w	r3, r2, r4
    	ldrsh r5, [r0, r2, LSL #1]  // Cargo la muestra
 8000334:	f930 5012 	ldrsh.w	r5, [r0, r2, lsl #1]
    	ldrsh r6, [r0, r3, LSL #1]  // Cargo la muestra desplazada
 8000338:	f930 6013 	ldrsh.w	r6, [r0, r3, lsl #1]
    	asr r6, #1					// Hago un desplazamiento hacia la derecha para dividir por dos
 800033c:	ea4f 0666 	mov.w	r6, r6, asr #1
    	add r6, r5, r6 				// Sumo la division anterior a la muestra
 8000340:	442e      	add	r6, r5
    	strh r6, [r1, r2, LSL #1]
 8000342:	f821 6012 	strh.w	r6, [r1, r2, lsl #1]
    	cmp r2, r4  				// Si el desplazamiento de las muestras alcanza a 882, no hay que agregar "eco"
 8000346:	42a2      	cmp	r2, r4
    	sub r2, #1
 8000348:	f1a2 0201 	sub.w	r2, r2, #1
    	bne loop_10					// si ya no se agrega "eco" copiamos las muestras directamente
 800034c:	d1f0      	bne.n	8000330 <loop_10>

0800034e <loop_10_2>:
    loop_10_2:
    	ldrh r6, [r0, r2, LSL #1]
 800034e:	f830 6012 	ldrh.w	r6, [r0, r2, lsl #1]
    	strh r6, [r1, r2, LSL #1]
 8000352:	f821 6012 	strh.w	r6, [r1, r2, lsl #1]
    	subs r2, #1
 8000356:	3a01      	subs	r2, #1
    	bne loop_10_2
 8000358:	d1f9      	bne.n	800034e <loop_10_2>
    	pop {r4-r6}
 800035a:	bc70      	pop	{r4, r5, r6}
        bx lr
 800035c:	4770      	bx	lr

0800035e <asm_calcularCorrelacion>:
*/

.thumb_func
asm_calcularCorrelacion: //APLICANDO SIMD

    push {r4, r5, r6, r7, r8, r9, r10}
 800035e:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
    mov r4, #0
 8000362:	f04f 0400 	mov.w	r4, #0
    mov r5, r0                  // r5 = vectorX
 8000366:	4605      	mov	r5, r0
    mov r6, r1                  // r6 = vectorY
 8000368:	460e      	mov	r6, r1
    mov r7, r2                  // r7 = vectorCorr
 800036a:	4617      	mov	r7, r2
    mov r8, r3                  // r8 = longitud
 800036c:	4698      	mov	r8, r3

0800036e <loop_out_11>:

loop_out_11:
    mov r9, r4                  // r9 = i
 800036e:	46a1      	mov	r9, r4
    mov r10, #0                 // r10 = sum
 8000370:	f04f 0a00 	mov.w	sl, #0

08000374 <loop_in_11>:

loop_in_11:
    lsl r11, r9, #1             // r11 = 2 * i
 8000374:	ea4f 0b49 	mov.w	fp, r9, lsl #1
    lsl r12, r4, #1             // r12 = 2 * j
 8000378:	ea4f 0c44 	mov.w	ip, r4, lsl #1

    ldrh r0, [r5, r11]          // r0 = vectorX[i + j]
 800037c:	f835 000b 	ldrh.w	r0, [r5, fp]
    ldrh r1, [r6, r12]          // r1 = vectorY[j]
 8000380:	f836 100c 	ldrh.w	r1, [r6, ip]

    smull r0, r1, r0, r1        // r0:r1 = vectorX[i + j] * vectorY[j]
 8000384:	fb80 0101 	smull	r0, r1, r0, r1
    add r10, r10, r0            // r10 += vectorX[i + j] * vectorY[j]
 8000388:	4482      	add	sl, r0

    add r9, r9, #1              // i++
 800038a:	f109 0901 	add.w	r9, r9, #1
    cmp r9, r8
 800038e:	45c1      	cmp	r9, r8
    blt loop_in_11
 8000390:	dbf0      	blt.n	8000374 <loop_in_11>

    strh r10, [r7, r4, lsl #1]  // vectorCorr[i] = sum
 8000392:	f827 a014 	strh.w	sl, [r7, r4, lsl #1]

    add r4, r4, #1              // j++
 8000396:	f104 0401 	add.w	r4, r4, #1
    cmp r4, r8
 800039a:	4544      	cmp	r4, r8
    blt loop_out_11
 800039c:	dbe7      	blt.n	800036e <loop_out_11>

    pop {r4, r5, r6, r7, r8, r9, r10}
 800039e:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    bx lr
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_uldivmod>:
 80003a4:	b953      	cbnz	r3, 80003bc <__aeabi_uldivmod+0x18>
 80003a6:	b94a      	cbnz	r2, 80003bc <__aeabi_uldivmod+0x18>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bf08      	it	eq
 80003ac:	2800      	cmpeq	r0, #0
 80003ae:	bf1c      	itt	ne
 80003b0:	f04f 31ff 	movne.w	r1, #4294967295
 80003b4:	f04f 30ff 	movne.w	r0, #4294967295
 80003b8:	f000 b974 	b.w	80006a4 <__aeabi_idiv0>
 80003bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80003c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c4:	f000 f806 	bl	80003d4 <__udivmoddi4>
 80003c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d0:	b004      	add	sp, #16
 80003d2:	4770      	bx	lr

080003d4 <__udivmoddi4>:
 80003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d8:	9d08      	ldr	r5, [sp, #32]
 80003da:	4604      	mov	r4, r0
 80003dc:	468e      	mov	lr, r1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d14d      	bne.n	800047e <__udivmoddi4+0xaa>
 80003e2:	428a      	cmp	r2, r1
 80003e4:	4694      	mov	ip, r2
 80003e6:	d969      	bls.n	80004bc <__udivmoddi4+0xe8>
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	b152      	cbz	r2, 8000404 <__udivmoddi4+0x30>
 80003ee:	fa01 f302 	lsl.w	r3, r1, r2
 80003f2:	f1c2 0120 	rsb	r1, r2, #32
 80003f6:	fa20 f101 	lsr.w	r1, r0, r1
 80003fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000402:	4094      	lsls	r4, r2
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	0c21      	lsrs	r1, r4, #16
 800040a:	fbbe f6f8 	udiv	r6, lr, r8
 800040e:	fa1f f78c 	uxth.w	r7, ip
 8000412:	fb08 e316 	mls	r3, r8, r6, lr
 8000416:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800041a:	fb06 f107 	mul.w	r1, r6, r7
 800041e:	4299      	cmp	r1, r3
 8000420:	d90a      	bls.n	8000438 <__udivmoddi4+0x64>
 8000422:	eb1c 0303 	adds.w	r3, ip, r3
 8000426:	f106 30ff 	add.w	r0, r6, #4294967295
 800042a:	f080 811f 	bcs.w	800066c <__udivmoddi4+0x298>
 800042e:	4299      	cmp	r1, r3
 8000430:	f240 811c 	bls.w	800066c <__udivmoddi4+0x298>
 8000434:	3e02      	subs	r6, #2
 8000436:	4463      	add	r3, ip
 8000438:	1a5b      	subs	r3, r3, r1
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3310 	mls	r3, r8, r0, r3
 8000444:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000448:	fb00 f707 	mul.w	r7, r0, r7
 800044c:	42a7      	cmp	r7, r4
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x92>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f100 33ff 	add.w	r3, r0, #4294967295
 8000458:	f080 810a 	bcs.w	8000670 <__udivmoddi4+0x29c>
 800045c:	42a7      	cmp	r7, r4
 800045e:	f240 8107 	bls.w	8000670 <__udivmoddi4+0x29c>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	1be4      	subs	r4, r4, r7
 800046c:	2600      	movs	r6, #0
 800046e:	b11d      	cbz	r5, 8000478 <__udivmoddi4+0xa4>
 8000470:	40d4      	lsrs	r4, r2
 8000472:	2300      	movs	r3, #0
 8000474:	e9c5 4300 	strd	r4, r3, [r5]
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	428b      	cmp	r3, r1
 8000480:	d909      	bls.n	8000496 <__udivmoddi4+0xc2>
 8000482:	2d00      	cmp	r5, #0
 8000484:	f000 80ef 	beq.w	8000666 <__udivmoddi4+0x292>
 8000488:	2600      	movs	r6, #0
 800048a:	e9c5 0100 	strd	r0, r1, [r5]
 800048e:	4630      	mov	r0, r6
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	fab3 f683 	clz	r6, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d14a      	bne.n	8000534 <__udivmoddi4+0x160>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xd4>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 80f9 	bhi.w	800069a <__udivmoddi4+0x2c6>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb61 0303 	sbc.w	r3, r1, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	469e      	mov	lr, r3
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e0      	beq.n	8000478 <__udivmoddi4+0xa4>
 80004b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80004ba:	e7dd      	b.n	8000478 <__udivmoddi4+0xa4>
 80004bc:	b902      	cbnz	r2, 80004c0 <__udivmoddi4+0xec>
 80004be:	deff      	udf	#255	; 0xff
 80004c0:	fab2 f282 	clz	r2, r2
 80004c4:	2a00      	cmp	r2, #0
 80004c6:	f040 8092 	bne.w	80005ee <__udivmoddi4+0x21a>
 80004ca:	eba1 010c 	sub.w	r1, r1, ip
 80004ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d2:	fa1f fe8c 	uxth.w	lr, ip
 80004d6:	2601      	movs	r6, #1
 80004d8:	0c20      	lsrs	r0, r4, #16
 80004da:	fbb1 f3f7 	udiv	r3, r1, r7
 80004de:	fb07 1113 	mls	r1, r7, r3, r1
 80004e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e6:	fb0e f003 	mul.w	r0, lr, r3
 80004ea:	4288      	cmp	r0, r1
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x12c>
 80004ee:	eb1c 0101 	adds.w	r1, ip, r1
 80004f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f6:	d202      	bcs.n	80004fe <__udivmoddi4+0x12a>
 80004f8:	4288      	cmp	r0, r1
 80004fa:	f200 80cb 	bhi.w	8000694 <__udivmoddi4+0x2c0>
 80004fe:	4643      	mov	r3, r8
 8000500:	1a09      	subs	r1, r1, r0
 8000502:	b2a4      	uxth	r4, r4
 8000504:	fbb1 f0f7 	udiv	r0, r1, r7
 8000508:	fb07 1110 	mls	r1, r7, r0, r1
 800050c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000510:	fb0e fe00 	mul.w	lr, lr, r0
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x156>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d202      	bcs.n	8000528 <__udivmoddi4+0x154>
 8000522:	45a6      	cmp	lr, r4
 8000524:	f200 80bb 	bhi.w	800069e <__udivmoddi4+0x2ca>
 8000528:	4608      	mov	r0, r1
 800052a:	eba4 040e 	sub.w	r4, r4, lr
 800052e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000532:	e79c      	b.n	800046e <__udivmoddi4+0x9a>
 8000534:	f1c6 0720 	rsb	r7, r6, #32
 8000538:	40b3      	lsls	r3, r6
 800053a:	fa22 fc07 	lsr.w	ip, r2, r7
 800053e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000542:	fa20 f407 	lsr.w	r4, r0, r7
 8000546:	fa01 f306 	lsl.w	r3, r1, r6
 800054a:	431c      	orrs	r4, r3
 800054c:	40f9      	lsrs	r1, r7
 800054e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000552:	fa00 f306 	lsl.w	r3, r0, r6
 8000556:	fbb1 f8f9 	udiv	r8, r1, r9
 800055a:	0c20      	lsrs	r0, r4, #16
 800055c:	fa1f fe8c 	uxth.w	lr, ip
 8000560:	fb09 1118 	mls	r1, r9, r8, r1
 8000564:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000568:	fb08 f00e 	mul.w	r0, r8, lr
 800056c:	4288      	cmp	r0, r1
 800056e:	fa02 f206 	lsl.w	r2, r2, r6
 8000572:	d90b      	bls.n	800058c <__udivmoddi4+0x1b8>
 8000574:	eb1c 0101 	adds.w	r1, ip, r1
 8000578:	f108 3aff 	add.w	sl, r8, #4294967295
 800057c:	f080 8088 	bcs.w	8000690 <__udivmoddi4+0x2bc>
 8000580:	4288      	cmp	r0, r1
 8000582:	f240 8085 	bls.w	8000690 <__udivmoddi4+0x2bc>
 8000586:	f1a8 0802 	sub.w	r8, r8, #2
 800058a:	4461      	add	r1, ip
 800058c:	1a09      	subs	r1, r1, r0
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb1 f0f9 	udiv	r0, r1, r9
 8000594:	fb09 1110 	mls	r1, r9, r0, r1
 8000598:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800059c:	fb00 fe0e 	mul.w	lr, r0, lr
 80005a0:	458e      	cmp	lr, r1
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x1e2>
 80005a4:	eb1c 0101 	adds.w	r1, ip, r1
 80005a8:	f100 34ff 	add.w	r4, r0, #4294967295
 80005ac:	d26c      	bcs.n	8000688 <__udivmoddi4+0x2b4>
 80005ae:	458e      	cmp	lr, r1
 80005b0:	d96a      	bls.n	8000688 <__udivmoddi4+0x2b4>
 80005b2:	3802      	subs	r0, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005ba:	fba0 9402 	umull	r9, r4, r0, r2
 80005be:	eba1 010e 	sub.w	r1, r1, lr
 80005c2:	42a1      	cmp	r1, r4
 80005c4:	46c8      	mov	r8, r9
 80005c6:	46a6      	mov	lr, r4
 80005c8:	d356      	bcc.n	8000678 <__udivmoddi4+0x2a4>
 80005ca:	d053      	beq.n	8000674 <__udivmoddi4+0x2a0>
 80005cc:	b15d      	cbz	r5, 80005e6 <__udivmoddi4+0x212>
 80005ce:	ebb3 0208 	subs.w	r2, r3, r8
 80005d2:	eb61 010e 	sbc.w	r1, r1, lr
 80005d6:	fa01 f707 	lsl.w	r7, r1, r7
 80005da:	fa22 f306 	lsr.w	r3, r2, r6
 80005de:	40f1      	lsrs	r1, r6
 80005e0:	431f      	orrs	r7, r3
 80005e2:	e9c5 7100 	strd	r7, r1, [r5]
 80005e6:	2600      	movs	r6, #0
 80005e8:	4631      	mov	r1, r6
 80005ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	40d8      	lsrs	r0, r3
 80005f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f8:	fa21 f303 	lsr.w	r3, r1, r3
 80005fc:	4091      	lsls	r1, r2
 80005fe:	4301      	orrs	r1, r0
 8000600:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000604:	fa1f fe8c 	uxth.w	lr, ip
 8000608:	fbb3 f0f7 	udiv	r0, r3, r7
 800060c:	fb07 3610 	mls	r6, r7, r0, r3
 8000610:	0c0b      	lsrs	r3, r1, #16
 8000612:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000616:	fb00 f60e 	mul.w	r6, r0, lr
 800061a:	429e      	cmp	r6, r3
 800061c:	fa04 f402 	lsl.w	r4, r4, r2
 8000620:	d908      	bls.n	8000634 <__udivmoddi4+0x260>
 8000622:	eb1c 0303 	adds.w	r3, ip, r3
 8000626:	f100 38ff 	add.w	r8, r0, #4294967295
 800062a:	d22f      	bcs.n	800068c <__udivmoddi4+0x2b8>
 800062c:	429e      	cmp	r6, r3
 800062e:	d92d      	bls.n	800068c <__udivmoddi4+0x2b8>
 8000630:	3802      	subs	r0, #2
 8000632:	4463      	add	r3, ip
 8000634:	1b9b      	subs	r3, r3, r6
 8000636:	b289      	uxth	r1, r1
 8000638:	fbb3 f6f7 	udiv	r6, r3, r7
 800063c:	fb07 3316 	mls	r3, r7, r6, r3
 8000640:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000644:	fb06 f30e 	mul.w	r3, r6, lr
 8000648:	428b      	cmp	r3, r1
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x28a>
 800064c:	eb1c 0101 	adds.w	r1, ip, r1
 8000650:	f106 38ff 	add.w	r8, r6, #4294967295
 8000654:	d216      	bcs.n	8000684 <__udivmoddi4+0x2b0>
 8000656:	428b      	cmp	r3, r1
 8000658:	d914      	bls.n	8000684 <__udivmoddi4+0x2b0>
 800065a:	3e02      	subs	r6, #2
 800065c:	4461      	add	r1, ip
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000664:	e738      	b.n	80004d8 <__udivmoddi4+0x104>
 8000666:	462e      	mov	r6, r5
 8000668:	4628      	mov	r0, r5
 800066a:	e705      	b.n	8000478 <__udivmoddi4+0xa4>
 800066c:	4606      	mov	r6, r0
 800066e:	e6e3      	b.n	8000438 <__udivmoddi4+0x64>
 8000670:	4618      	mov	r0, r3
 8000672:	e6f8      	b.n	8000466 <__udivmoddi4+0x92>
 8000674:	454b      	cmp	r3, r9
 8000676:	d2a9      	bcs.n	80005cc <__udivmoddi4+0x1f8>
 8000678:	ebb9 0802 	subs.w	r8, r9, r2
 800067c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000680:	3801      	subs	r0, #1
 8000682:	e7a3      	b.n	80005cc <__udivmoddi4+0x1f8>
 8000684:	4646      	mov	r6, r8
 8000686:	e7ea      	b.n	800065e <__udivmoddi4+0x28a>
 8000688:	4620      	mov	r0, r4
 800068a:	e794      	b.n	80005b6 <__udivmoddi4+0x1e2>
 800068c:	4640      	mov	r0, r8
 800068e:	e7d1      	b.n	8000634 <__udivmoddi4+0x260>
 8000690:	46d0      	mov	r8, sl
 8000692:	e77b      	b.n	800058c <__udivmoddi4+0x1b8>
 8000694:	3b02      	subs	r3, #2
 8000696:	4461      	add	r1, ip
 8000698:	e732      	b.n	8000500 <__udivmoddi4+0x12c>
 800069a:	4630      	mov	r0, r6
 800069c:	e709      	b.n	80004b2 <__udivmoddi4+0xde>
 800069e:	4464      	add	r4, ip
 80006a0:	3802      	subs	r0, #2
 80006a2:	e742      	b.n	800052a <__udivmoddi4+0x156>

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b088      	sub	sp, #32
 80006ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006ae:	f3ef 8314 	mrs	r3, CONTROL
 80006b2:	607b      	str	r3, [r7, #4]
  return(result);
 80006b4:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 80006b6:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	f043 0301 	orr.w	r3, r3, #1
 80006be:	61fb      	str	r3, [r7, #28]
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	f383 8814 	msr	CONTROL, r3
}
 80006ca:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006cc:	f3ef 8314 	mrs	r3, CONTROL
 80006d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80006d2:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 80006d4:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	f023 0301 	bic.w	r3, r3, #1
 80006dc:	61fb      	str	r3, [r7, #28]
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	f383 8814 	msr	CONTROL, r3
}
 80006e8:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006ea:	f3ef 8314 	mrs	r3, CONTROL
 80006ee:	617b      	str	r3, [r7, #20]
  return(result);
 80006f0:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 80006f2:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 80006f4:	f7ff fd7a 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006f8:	f3ef 8314 	mrs	r3, CONTROL
 80006fc:	61bb      	str	r3, [r7, #24]
  return(result);
 80006fe:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 8000700:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 8000702:	bf00      	nop
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <zeros>:


void zeros(uint32_t *vector, uint32_t longitud) {
 800070a:	b480      	push	{r7}
 800070c:	b085      	sub	sp, #20
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
 8000712:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e008      	b.n	800072c <zeros+0x22>
        vector[i] = 0;
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	3301      	adds	r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fa      	ldr	r2, [r7, #12]
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	d3f2      	bcc.n	800071a <zeros+0x10>
    }
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <zeros_optimizada>:
//optimizado, dsp aplicar en todos.....:
void zeros_optimizada(uint32_t *vector, uint32_t longitud) {
 8000742:	b480      	push	{r7}
 8000744:	b083      	sub	sp, #12
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	6039      	str	r1, [r7, #0]
    for (; longitud >0; longitud--) {
 800074c:	e00b      	b.n	8000766 <zeros_optimizada+0x24>
        vector[longitud-1] = 0;
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000754:	3b01      	subs	r3, #1
 8000756:	009b      	lsls	r3, r3, #2
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	4413      	add	r3, r2
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
    for (; longitud >0; longitud--) {
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	3b01      	subs	r3, #1
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d1f0      	bne.n	800074e <zeros_optimizada+0xc>
    }
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <productoEscalar32>:
void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar) {
 800077a:	b480      	push	{r7}
 800077c:	b087      	sub	sp, #28
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < longitud; i++) { //en clase no utilizaron la variable auxiliar i,
 8000788:	2300      	movs	r3, #0
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	e00f      	b.n	80007ae <productoEscalar32+0x34>
        vectorOut[i] = vectorIn[i] * escalar;
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	4413      	add	r3, r2
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	68b9      	ldr	r1, [r7, #8]
 800079e:	440b      	add	r3, r1
 80007a0:	6839      	ldr	r1, [r7, #0]
 80007a2:	fb01 f202 	mul.w	r2, r1, r2
 80007a6:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) { //en clase no utilizaron la variable auxiliar i,
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	3301      	adds	r3, #1
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d3eb      	bcc.n	800078e <productoEscalar32+0x14>
    }
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	371c      	adds	r7, #28
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <productoEscalar16>:
void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar) {
 80007c4:	b480      	push	{r7}
 80007c6:	b087      	sub	sp, #28
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	807b      	strh	r3, [r7, #2]
    for (uint32_t i = 0; i < longitud; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
 80007d6:	e010      	b.n	80007fa <productoEscalar16+0x36>
        vectorOut[i] = vectorIn[i] * escalar;
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	68fa      	ldr	r2, [r7, #12]
 80007de:	4413      	add	r3, r2
 80007e0:	881a      	ldrh	r2, [r3, #0]
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	68b9      	ldr	r1, [r7, #8]
 80007e8:	440b      	add	r3, r1
 80007ea:	8879      	ldrh	r1, [r7, #2]
 80007ec:	fb11 f202 	smulbb	r2, r1, r2
 80007f0:	b292      	uxth	r2, r2
 80007f2:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 80007f4:	697b      	ldr	r3, [r7, #20]
 80007f6:	3301      	adds	r3, #1
 80007f8:	617b      	str	r3, [r7, #20]
 80007fa:	697a      	ldr	r2, [r7, #20]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d3ea      	bcc.n	80007d8 <productoEscalar16+0x14>
    }
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	371c      	adds	r7, #28
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <productoEscalar12>:
void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar) {
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	807b      	strh	r3, [r7, #2]
    for (uint32_t i = 0; i < longitud; i++) {
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
 8000822:	e01f      	b.n	8000864 <productoEscalar12+0x54>
        uint32_t resultado = (uint32_t)vectorIn[i] * (uint32_t)escalar;
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	4413      	add	r3, r2
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	887b      	ldrh	r3, [r7, #2]
 8000832:	fb02 f303 	mul.w	r3, r2, r3
 8000836:	613b      	str	r3, [r7, #16]
        if (resultado > 0xFFF) {
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800083e:	d307      	bcc.n	8000850 <productoEscalar12+0x40>
            vectorOut[i] = 0xFFF; // Saturación a 12 bits
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	68ba      	ldr	r2, [r7, #8]
 8000846:	4413      	add	r3, r2
 8000848:	f640 72ff 	movw	r2, #4095	; 0xfff
 800084c:	801a      	strh	r2, [r3, #0]
 800084e:	e006      	b.n	800085e <productoEscalar12+0x4e>
        } else {
            vectorOut[i] = (uint16_t)resultado;
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	4413      	add	r3, r2
 8000858:	693a      	ldr	r2, [r7, #16]
 800085a:	b292      	uxth	r2, r2
 800085c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	3301      	adds	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697a      	ldr	r2, [r7, #20]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	429a      	cmp	r2, r3
 800086a:	d3db      	bcc.n	8000824 <productoEscalar12+0x14>
        }
    }
}
 800086c:	bf00      	nop
 800086e:	bf00      	nop
 8000870:	371c      	adds	r7, #28
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <filtroVentana10>:
void filtroVentana10(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud) {
 800087a:	b480      	push	{r7}
 800087c:	b089      	sub	sp, #36	; 0x24
 800087e:	af00      	add	r7, sp, #0
 8000880:	60f8      	str	r0, [r7, #12]
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
    int32_t p;
    const uint8_t SampleOffset = 5;
 8000886:	2305      	movs	r3, #5
 8000888:	75fb      	strb	r3, [r7, #23]
    const uint8_t WindowSize = (SampleOffset * 2) + 1;
 800088a:	7dfb      	ldrb	r3, [r7, #23]
 800088c:	005b      	lsls	r3, r3, #1
 800088e:	b2db      	uxtb	r3, r3
 8000890:	3301      	adds	r3, #1
 8000892:	75bb      	strb	r3, [r7, #22]

    for (int32_t i = longitud - 1; i >= 0; i--) {
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	61fb      	str	r3, [r7, #28]
 800089a:	e03f      	b.n	800091c <filtroVentana10+0xa2>
        p = i;
 800089c:	69fb      	ldr	r3, [r7, #28]
 800089e:	613b      	str	r3, [r7, #16]
        vectorOut[p] = 0;
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	68ba      	ldr	r2, [r7, #8]
 80008a6:	4413      	add	r3, r2
 80008a8:	2200      	movs	r2, #0
 80008aa:	801a      	strh	r2, [r3, #0]

        for (int32_t j = p + SampleOffset; j >= p - SampleOffset; j--) {
 80008ac:	7dfb      	ldrb	r3, [r7, #23]
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4413      	add	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
 80008b4:	e01a      	b.n	80008ec <filtroVentana10+0x72>
            if (j < longitud && j >= 0) {
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d913      	bls.n	80008e6 <filtroVentana10+0x6c>
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	db10      	blt.n	80008e6 <filtroVentana10+0x6c>
                vectorOut[p] += vectorIn[j];
 80008c4:	693b      	ldr	r3, [r7, #16]
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	68ba      	ldr	r2, [r7, #8]
 80008ca:	4413      	add	r3, r2
 80008cc:	8819      	ldrh	r1, [r3, #0]
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	68fa      	ldr	r2, [r7, #12]
 80008d4:	4413      	add	r3, r2
 80008d6:	881a      	ldrh	r2, [r3, #0]
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	68b8      	ldr	r0, [r7, #8]
 80008de:	4403      	add	r3, r0
 80008e0:	440a      	add	r2, r1
 80008e2:	b292      	uxth	r2, r2
 80008e4:	801a      	strh	r2, [r3, #0]
        for (int32_t j = p + SampleOffset; j >= p - SampleOffset; j--) {
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	7dfb      	ldrb	r3, [r7, #23]
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	dade      	bge.n	80008b6 <filtroVentana10+0x3c>
            }
        }
        vectorOut[p] /= WindowSize;
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	68ba      	ldr	r2, [r7, #8]
 80008fe:	4413      	add	r3, r2
 8000900:	881b      	ldrh	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	7dbb      	ldrb	r3, [r7, #22]
 8000906:	fb92 f1f3 	sdiv	r1, r2, r3
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	4413      	add	r3, r2
 8000912:	b28a      	uxth	r2, r1
 8000914:	801a      	strh	r2, [r3, #0]
    for (int32_t i = longitud - 1; i >= 0; i--) {
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b01      	subs	r3, #1
 800091a:	61fb      	str	r3, [r7, #28]
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	2b00      	cmp	r3, #0
 8000920:	dabc      	bge.n	800089c <filtroVentana10+0x22>
    }
}
 8000922:	bf00      	nop
 8000924:	bf00      	nop
 8000926:	3724      	adds	r7, #36	; 0x24
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <pack32to16>:
void pack32to16(int32_t *vectorIn, int16_t *vectorOut, uint32_t longitud) {
 8000930:	b480      	push	{r7}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < longitud; i++) {
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	e00e      	b.n	8000960 <pack32to16+0x30>
        vectorOut[i] = (int16_t)(vectorIn[i] >> 16);
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	4413      	add	r3, r2
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	1419      	asrs	r1, r3, #16
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	4413      	add	r3, r2
 8000956:	b20a      	sxth	r2, r1
 8000958:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	3301      	adds	r3, #1
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	d3ec      	bcc.n	8000942 <pack32to16+0x12>
    }
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	371c      	adds	r7, #28
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <max>:
int32_t max(int32_t *vectorIn, uint32_t longitud) {
 8000976:	b480      	push	{r7}
 8000978:	b087      	sub	sp, #28
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
 800097e:	6039      	str	r1, [r7, #0]
    int32_t maxValor = vectorIn[0];
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	617b      	str	r3, [r7, #20]
    uint32_t maxPosicion = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]

    for (uint32_t i = 1; i < longitud; i++) {
 800098a:	2301      	movs	r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	e012      	b.n	80009b6 <max+0x40>
        if (vectorIn[i] > maxValor) {
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	687a      	ldr	r2, [r7, #4]
 8000996:	4413      	add	r3, r2
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	429a      	cmp	r2, r3
 800099e:	da07      	bge.n	80009b0 <max+0x3a>
            maxValor = vectorIn[i];
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	4413      	add	r3, r2
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	617b      	str	r3, [r7, #20]
            maxPosicion = i;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 1; i < longitud; i++) {
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	429a      	cmp	r2, r3
 80009bc:	d3e8      	bcc.n	8000990 <max+0x1a>
        }
    }

    return maxPosicion;
 80009be:	693b      	ldr	r3, [r7, #16]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	371c      	adds	r7, #28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <downsampleM>:
void downsampleM(int32_t *vectorIn, int32_t *vectorOut, uint32_t longitud, uint32_t N) {
 80009cc:	b480      	push	{r7}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
 80009d8:	603b      	str	r3, [r7, #0]
    uint32_t i;
    uint32_t j = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	613b      	str	r3, [r7, #16]

    for (i = 0; i < longitud; i += N) {
 80009de:	2300      	movs	r3, #0
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	e010      	b.n	8000a06 <downsampleM+0x3a>
        vectorOut[j] = vectorIn[i];
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	441a      	add	r2, r3
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	440b      	add	r3, r1
 80009f4:	6812      	ldr	r2, [r2, #0]
 80009f6:	601a      	str	r2, [r3, #0]
        j++;
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	3301      	adds	r3, #1
 80009fc:	613b      	str	r3, [r7, #16]
    for (i = 0; i < longitud; i += N) {
 80009fe:	697a      	ldr	r2, [r7, #20]
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	697a      	ldr	r2, [r7, #20]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d3ea      	bcc.n	80009e4 <downsampleM+0x18>
    }
}
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
 8000a12:	371c      	adds	r7, #28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <invertir>:
void invertir(uint16_t *vector, uint32_t longitud) {
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint16_t temp;

    for (i = 0; i < longitud / 2; i++) {
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	e022      	b.n	8000a72 <invertir+0x56>
        temp = vector[i];
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	4413      	add	r3, r2
 8000a34:	881b      	ldrh	r3, [r3, #0]
 8000a36:	817b      	strh	r3, [r7, #10]
        vector[i] = vector[longitud - i - 1];
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	1ad3      	subs	r3, r2, r3
 8000a3e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000a42:	3b01      	subs	r3, #1
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	441a      	add	r2, r3
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	440b      	add	r3, r1
 8000a52:	8812      	ldrh	r2, [r2, #0]
 8000a54:	801a      	strh	r2, [r3, #0]
        vector[longitud - i - 1] = temp;
 8000a56:	683a      	ldr	r2, [r7, #0]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000a60:	3b01      	subs	r3, #1
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	897a      	ldrh	r2, [r7, #10]
 8000a6a:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < longitud / 2; i++) {
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	085b      	lsrs	r3, r3, #1
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d3d7      	bcc.n	8000a2c <invertir+0x10>
    }
}
 8000a7c:	bf00      	nop
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr

08000a8a <introducirEco>:
void introducirEco(int16_t *vector, int16_t *vectorOut) {
 8000a8a:	b480      	push	{r7}
 8000a8c:	b089      	sub	sp, #36	; 0x24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
 8000a92:	6039      	str	r1, [r7, #0]
    uint32_t retrasoMuestras = 882; // 20ms de retraso = 882 muetras
 8000a94:	f240 3372 	movw	r3, #882	; 0x372
 8000a98:	617b      	str	r3, [r7, #20]
    uint32_t longitud = 4096;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a9e:	613b      	str	r3, [r7, #16]
    int16_t mitadAmplitud = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	81fb      	strh	r3, [r7, #14]

    //SIN ECO
    for (uint32_t i = 0; i < retrasoMuestras; i++) {
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
 8000aa8:	e00d      	b.n	8000ac6 <introducirEco+0x3c>
        vectorOut[i] = vector[i];
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	441a      	add	r2, r3
 8000ab2:	69fb      	ldr	r3, [r7, #28]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	6839      	ldr	r1, [r7, #0]
 8000ab8:	440b      	add	r3, r1
 8000aba:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000abe:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < retrasoMuestras; i++) {
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	61fb      	str	r3, [r7, #28]
 8000ac6:	69fa      	ldr	r2, [r7, #28]
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d3ed      	bcc.n	8000aaa <introducirEco+0x20>
    }

    //ECO
    for (uint32_t i = retrasoMuestras; i < longitud; i++) {
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	e027      	b.n	8000b24 <introducirEco+0x9a>
        mitadAmplitud = vector[i - retrasoMuestras] / 2; //retraso
 8000ad4:	69ba      	ldr	r2, [r7, #24]
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	1ad3      	subs	r3, r2, r3
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	4413      	add	r3, r2
 8000ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae4:	0fda      	lsrs	r2, r3, #31
 8000ae6:	4413      	add	r3, r2
 8000ae8:	105b      	asrs	r3, r3, #1
 8000aea:	81fb      	strh	r3, [r7, #14]
        vectorOut[i] += vector[i] + mitadAmplitud;
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	683a      	ldr	r2, [r7, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	6879      	ldr	r1, [r7, #4]
 8000b00:	440b      	add	r3, r1
 8000b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b06:	b299      	uxth	r1, r3
 8000b08:	89fb      	ldrh	r3, [r7, #14]
 8000b0a:	440b      	add	r3, r1
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4413      	add	r3, r2
 8000b10:	b299      	uxth	r1, r3
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	4413      	add	r3, r2
 8000b1a:	b20a      	sxth	r2, r1
 8000b1c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = retrasoMuestras; i < longitud; i++) {
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	3301      	adds	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	69ba      	ldr	r2, [r7, #24]
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d3d3      	bcc.n	8000ad4 <introducirEco+0x4a>
    }

}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <introducirEco_Intrinsic>:
void introducirEco_Intrinsic(int16_t *vector, int16_t *vectorOut) {
 8000b3a:	b480      	push	{r7}
 8000b3c:	b08f      	sub	sp, #60	; 0x3c
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	6078      	str	r0, [r7, #4]
 8000b42:	6039      	str	r1, [r7, #0]
    uint32_t retrasoMuestras = 882; // 20ms de retraso = 882 muetras
 8000b44:	f240 3372 	movw	r3, #882	; 0x372
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t longitud = 4096;
 8000b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
    int16_t mitadAmplitud = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	84fb      	strh	r3, [r7, #38]	; 0x26

    //SIN ECO
    for (uint32_t i = 0; i < retrasoMuestras; i++) {
 8000b54:	2300      	movs	r3, #0
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
 8000b58:	e00d      	b.n	8000b76 <introducirEco_Intrinsic+0x3c>
        vectorOut[i] = vector[i];
 8000b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	441a      	add	r2, r3
 8000b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	6839      	ldr	r1, [r7, #0]
 8000b68:	440b      	add	r3, r1
 8000b6a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b6e:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < retrasoMuestras; i++) {
 8000b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b72:	3301      	adds	r3, #1
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
 8000b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d3ed      	bcc.n	8000b5a <introducirEco_Intrinsic+0x20>
    }

    //ECO
    for (uint32_t i = retrasoMuestras; i < longitud; i++) {
 8000b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
 8000b82:	e034      	b.n	8000bee <introducirEco_Intrinsic+0xb4>
        mitadAmplitud = vector[i - retrasoMuestras] / 2; //retraso
 8000b84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	4413      	add	r3, r2
 8000b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b94:	0fda      	lsrs	r2, r3, #31
 8000b96:	4413      	add	r3, r2
 8000b98:	105b      	asrs	r3, r3, #1
 8000b9a:	84fb      	strh	r3, [r7, #38]	; 0x26
        vectorOut[i] = __QADD16(vectorOut[i], __QADD16(vector[i], mitadAmplitud));
 8000b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	683a      	ldr	r2, [r7, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000bbc:	617a      	str	r2, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]

__STATIC_FORCEINLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	fa93 f312 	qadd16	r3, r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  return(result);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	6239      	str	r1, [r7, #32]
 8000bce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000bd0:	6a3b      	ldr	r3, [r7, #32]
 8000bd2:	69fa      	ldr	r2, [r7, #28]
 8000bd4:	fa93 f312 	qadd16	r3, r3, r2
 8000bd8:	61bb      	str	r3, [r7, #24]
  return(result);
 8000bda:	69b9      	ldr	r1, [r7, #24]
 8000bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	b20a      	sxth	r2, r1
 8000be6:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = retrasoMuestras; i < longitud; i++) {
 8000be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bea:	3301      	adds	r3, #1
 8000bec:	633b      	str	r3, [r7, #48]	; 0x30
 8000bee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d3c6      	bcc.n	8000b84 <introducirEco_Intrinsic+0x4a>
    }

}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	373c      	adds	r7, #60	; 0x3c
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <corr>:
void corr(int16_t *vectorX, int16_t *vectorY, int16_t *vectorCorr, uint32_t longitud) {
 8000c04:	b480      	push	{r7}
 8000c06:	b087      	sub	sp, #28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	603b      	str	r3, [r7, #0]
    uint32_t i, j;

    for (i = 0; i < longitud; i++) {
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e03a      	b.n	8000c8e <corr+0x8a>
        vectorCorr[i] = 0;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	4413      	add	r3, r2
 8000c20:	2200      	movs	r2, #0
 8000c22:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < longitud; j++) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
 8000c28:	e02a      	b.n	8000c80 <corr+0x7c>
            if (i + j < longitud) {
 8000c2a:	697a      	ldr	r2, [r7, #20]
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	4413      	add	r3, r2
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d921      	bls.n	8000c7a <corr+0x76>
                vectorCorr[i] += vectorX[i + j] * vectorY[j];
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	6979      	ldr	r1, [r7, #20]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	440b      	add	r3, r1
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	68f9      	ldr	r1, [r7, #12]
 8000c4e:	440b      	add	r3, r1
 8000c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c54:	b299      	uxth	r1, r3
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	68b8      	ldr	r0, [r7, #8]
 8000c5c:	4403      	add	r3, r0
 8000c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	fb11 f303 	smulbb	r3, r1, r3
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	4413      	add	r3, r2
 8000c6c:	b299      	uxth	r1, r3
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	b20a      	sxth	r2, r1
 8000c78:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < longitud; j++) {
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d3d0      	bcc.n	8000c2a <corr+0x26>
    for (i = 0; i < longitud; i++) {
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3c0      	bcc.n	8000c18 <corr+0x14>
            }
        }
    }
}
 8000c96:	bf00      	nop
 8000c98:	bf00      	nop
 8000c9a:	371c      	adds	r7, #28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <corr_Intrinsic>:
void corr_Intrinsic(int16_t *vectorX, int16_t *vectorY, int16_t *vectorCorr, uint32_t longitud) {
 8000ca4:	b480      	push	{r7}
 8000ca6:	b08b      	sub	sp, #44	; 0x2c
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	603b      	str	r3, [r7, #0]
    uint32_t i, j;

    for (i = 0; i < longitud; i++) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8000cb6:	e049      	b.n	8000d4c <corr_Intrinsic+0xa8>
        vectorCorr[i] = 0;
 8000cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	687a      	ldr	r2, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < longitud; j++) {
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
 8000cc8:	e039      	b.n	8000d3e <corr_Intrinsic+0x9a>
            if (i + j < longitud) {
 8000cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	4413      	add	r3, r2
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d930      	bls.n	8000d38 <corr_Intrinsic+0x94>
                vectorCorr[i] += (int16_t)__SMLAD(vectorX[i + j], vectorY[j], vectorCorr[i]);
 8000cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
 8000cda:	4413      	add	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	6a3b      	ldr	r3, [r7, #32]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	4413      	add	r3, r2
 8000cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d02:	61f8      	str	r0, [r7, #28]
 8000d04:	61b9      	str	r1, [r7, #24]
 8000d06:	617b      	str	r3, [r7, #20]

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	6979      	ldr	r1, [r7, #20]
 8000d0e:	fb23 1302 	smlad	r3, r3, r2, r1
 8000d12:	613b      	str	r3, [r7, #16]
  return(result);
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	b219      	sxth	r1, r3
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	4413      	add	r3, r2
 8000d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	b28b      	uxth	r3, r1
 8000d28:	4413      	add	r3, r2
 8000d2a:	b299      	uxth	r1, r3
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	687a      	ldr	r2, [r7, #4]
 8000d32:	4413      	add	r3, r2
 8000d34:	b20a      	sxth	r2, r1
 8000d36:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < longitud; j++) {
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	623b      	str	r3, [r7, #32]
 8000d3e:	6a3a      	ldr	r2, [r7, #32]
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d3c1      	bcc.n	8000cca <corr_Intrinsic+0x26>
    for (i = 0; i < longitud; i++) {
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	3301      	adds	r3, #1
 8000d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d3b1      	bcc.n	8000cb8 <corr_Intrinsic+0x14>
            }
        }
    }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	372c      	adds	r7, #44	; 0x2c
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d68:	f5ad 4d84 	sub.w	sp, sp, #16896	; 0x4200
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d70:	f001 f916 	bl	8001fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d74:	f000 fd46 	bl	8001804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d78:	f000 fe54 	bl	8001a24 <MX_GPIO_Init>
  MX_ETH_Init();
 8000d7c:	f000 fdac 	bl	80018d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d80:	f000 fdf8 	bl	8001974 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d84:	f000 fe20 	bl	80019c8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 8000d88:	f7ff fc8e 	bl	80006a8 <PrivilegiosSVC>
  DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos; //activar el contador
 8000d8c:	4bcb      	ldr	r3, [pc, #812]	; (80010bc <main+0x358>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4aca      	ldr	r2, [pc, #808]	; (80010bc <main+0x358>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	6013      	str	r3, [r2, #0]

  /*
   * 	EJERCICIO 1 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint32_t resultado[10] = {10,20,10,40,50,60,20,10,20,40};
 8000d98:	4bc9      	ldr	r3, [pc, #804]	; (80010c0 <main+0x35c>)
 8000d9a:	f507 4483 	add.w	r4, r7, #16768	; 0x4180
 8000d9e:	f104 0420 	add.w	r4, r4, #32
 8000da2:	461d      	mov	r5, r3
 8000da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000db0:	e884 0003 	stmia.w	r4, {r0, r1}
  DWT->CYCCNT = 0;  asm_zeros(resultado, 10);  ciclosASM = DWT->CYCCNT;
 8000db4:	4bc1      	ldr	r3, [pc, #772]	; (80010bc <main+0x358>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000dbe:	f103 0320 	add.w	r3, r3, #32
 8000dc2:	210a      	movs	r1, #10
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff fa15 	bl	80001f4 <asm_zeros>
 8000dca:	4bbc      	ldr	r3, [pc, #752]	; (80010bc <main+0x358>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000dd2:	f102 0214 	add.w	r2, r2, #20
 8000dd6:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  zeros(resultado, 10);  ciclosC = DWT->CYCCNT;
 8000dd8:	4bb8      	ldr	r3, [pc, #736]	; (80010bc <main+0x358>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000de2:	f103 0320 	add.w	r3, r3, #32
 8000de6:	210a      	movs	r1, #10
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fc8e 	bl	800070a <zeros>
 8000dee:	4bb3      	ldr	r3, [pc, #716]	; (80010bc <main+0x358>)
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000df6:	f102 0210 	add.w	r2, r2, #16
 8000dfa:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  zeros_optimizada(resultado, 10);  ciclosC2 = DWT->CYCCNT;
 8000dfc:	4baf      	ldr	r3, [pc, #700]	; (80010bc <main+0x358>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000e06:	f103 0320 	add.w	r3, r3, #32
 8000e0a:	210a      	movs	r1, #10
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fc98 	bl	8000742 <zeros_optimizada>
 8000e12:	4baa      	ldr	r3, [pc, #680]	; (80010bc <main+0x358>)
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000e1a:	f102 020c 	add.w	r2, r2, #12
 8000e1e:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 2 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint32_t vectorIN_ej2[10] = {10,20,10,40,50,60,70,80,90,100};
 8000e20:	4ba8      	ldr	r3, [pc, #672]	; (80010c4 <main+0x360>)
 8000e22:	f507 4482 	add.w	r4, r7, #16640	; 0x4100
 8000e26:	f104 0478 	add.w	r4, r4, #120	; 0x78
 8000e2a:	461d      	mov	r5, r3
 8000e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e34:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e38:	e884 0003 	stmia.w	r4, {r0, r1}
  uint32_t vectorOUT_ej2[10] = {0};
 8000e3c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000e40:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000e44:	2228      	movs	r2, #40	; 0x28
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 faaf 	bl	80043ac <memset>
  uint32_t longitud_ej2 = 10, escalar_ej2 = 2;
 8000e4e:	230a      	movs	r3, #10
 8000e50:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000e54:	f102 0208 	add.w	r2, r2, #8
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000e60:	f102 0204 	add.w	r2, r2, #4
 8000e64:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_productoEscalar32(vectorIN_ej2,vectorOUT_ej2,longitud_ej2,escalar_ej2);  ciclosASM = DWT->CYCCNT;
 8000e66:	4b95      	ldr	r3, [pc, #596]	; (80010bc <main+0x358>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000e70:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8000e74:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000e78:	f100 0078 	add.w	r0, r0, #120	; 0x78
 8000e7c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000e80:	f103 0304 	add.w	r3, r3, #4
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000e8a:	f102 0208 	add.w	r2, r2, #8
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	f7ff f9b9 	bl	8000206 <asm_productoEscalar32>
 8000e94:	4b89      	ldr	r3, [pc, #548]	; (80010bc <main+0x358>)
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000e9c:	f102 0214 	add.w	r2, r2, #20
 8000ea0:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  productoEscalar32(vectorIN_ej2,vectorOUT_ej2,longitud_ej2,escalar_ej2);  ciclosC = DWT->CYCCNT;
 8000ea2:	4b86      	ldr	r3, [pc, #536]	; (80010bc <main+0x358>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000eac:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8000eb0:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000eb4:	f100 0078 	add.w	r0, r0, #120	; 0x78
 8000eb8:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000ebc:	f103 0304 	add.w	r3, r3, #4
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000ec6:	f102 0208 	add.w	r2, r2, #8
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	f7ff fc55 	bl	800077a <productoEscalar32>
 8000ed0:	4b7a      	ldr	r3, [pc, #488]	; (80010bc <main+0x358>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000ed8:	f102 0210 	add.w	r2, r2, #16
 8000edc:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 3 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint16_t vectorIN_ej3[5] = {10,20,10,40,50};
 8000ede:	4a7a      	ldr	r2, [pc, #488]	; (80010c8 <main+0x364>)
 8000ee0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000ee4:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8000ee8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eea:	c303      	stmia	r3!, {r0, r1}
 8000eec:	801a      	strh	r2, [r3, #0]
  uint16_t vectorOUT_ej3[5] = {0};
 8000eee:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000ef2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	811a      	strh	r2, [r3, #8]
  uint32_t longitud_ej3 = 5;
 8000efe:	2305      	movs	r3, #5
 8000f00:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000f04:	6013      	str	r3, [r2, #0]
  uint16_t escalar_ej3 = 2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000f0c:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8000f10:	8013      	strh	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_productoEscalar16(vectorIN_ej3,vectorOUT_ej3,longitud_ej3,escalar_ej3);  ciclosASM = DWT->CYCCNT;
 8000f12:	4b6a      	ldr	r3, [pc, #424]	; (80010bc <main+0x358>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000f1c:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8000f20:	881b      	ldrh	r3, [r3, #0]
 8000f22:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000f26:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8000f2a:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000f2e:	f100 0044 	add.w	r0, r0, #68	; 0x44
 8000f32:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000f36:	6812      	ldr	r2, [r2, #0]
 8000f38:	f7ff f970 	bl	800021c <asm_productoEscalar16>
 8000f3c:	4b5f      	ldr	r3, [pc, #380]	; (80010bc <main+0x358>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000f44:	f102 0214 	add.w	r2, r2, #20
 8000f48:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  productoEscalar16(vectorIN_ej3,vectorOUT_ej3,longitud_ej3,escalar_ej3);  ciclosC = DWT->CYCCNT;
 8000f4a:	4b5c      	ldr	r3, [pc, #368]	; (80010bc <main+0x358>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000f54:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000f5e:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8000f62:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000f66:	f100 0044 	add.w	r0, r0, #68	; 0x44
 8000f6a:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	f7ff fc28 	bl	80007c4 <productoEscalar16>
 8000f74:	4b51      	ldr	r3, [pc, #324]	; (80010bc <main+0x358>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000f7c:	f102 0210 	add.w	r2, r2, #16
 8000f80:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 4 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint16_t vectorIN_ej4[5] = {10000,10000,10000,10000,10000};
 8000f82:	4a52      	ldr	r2, [pc, #328]	; (80010cc <main+0x368>)
 8000f84:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000f88:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000f8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f8e:	c303      	stmia	r3!, {r0, r1}
 8000f90:	801a      	strh	r2, [r3, #0]
  uint16_t vectorOUT_ej4[5] = {0};
 8000f92:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000f96:	f103 0320 	add.w	r3, r3, #32
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	811a      	strh	r2, [r3, #8]
  uint32_t longitud_ej4 = 5;
 8000fa2:	2305      	movs	r3, #5
 8000fa4:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000fa8:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8000fac:	6013      	str	r3, [r2, #0]
  uint16_t escalar_ej4 = 6;
 8000fae:	2306      	movs	r3, #6
 8000fb0:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000fb4:	f102 0276 	add.w	r2, r2, #118	; 0x76
 8000fb8:	8013      	strh	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_productoEscalar12(vectorIN_ej4,vectorOUT_ej4,longitud_ej4,escalar_ej4);  ciclosASM = DWT->CYCCNT;
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <main+0x358>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000fc4:	f103 0376 	add.w	r3, r3, #118	; 0x76
 8000fc8:	881b      	ldrh	r3, [r3, #0]
 8000fca:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000fce:	f101 0120 	add.w	r1, r1, #32
 8000fd2:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000fd6:	f100 002c 	add.w	r0, r0, #44	; 0x2c
 8000fda:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000fde:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	f7ff f925 	bl	8000232 <asm_productoEscalar12>
 8000fe8:	4b34      	ldr	r3, [pc, #208]	; (80010bc <main+0x358>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000ff0:	f102 0214 	add.w	r2, r2, #20
 8000ff4:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  productoEscalar12(vectorIN_ej4,vectorOUT_ej4,longitud_ej4,escalar_ej4);  ciclosC = DWT->CYCCNT;
 8000ff6:	4b31      	ldr	r3, [pc, #196]	; (80010bc <main+0x358>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8001000:	f103 0376 	add.w	r3, r3, #118	; 0x76
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 800100a:	f101 0120 	add.w	r1, r1, #32
 800100e:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8001012:	f100 002c 	add.w	r0, r0, #44	; 0x2c
 8001016:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 800101a:	f102 0278 	add.w	r2, r2, #120	; 0x78
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	f7ff fbf6 	bl	8000810 <productoEscalar12>
 8001024:	4b25      	ldr	r3, [pc, #148]	; (80010bc <main+0x358>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 800102c:	f102 0210 	add.w	r2, r2, #16
 8001030:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 5 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint16_t vectorIN_ej5[10] = {1,2,3,4,5,6,7,8,9};
 8001032:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001036:	f103 0318 	add.w	r3, r3, #24
 800103a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800103e:	461a      	mov	r2, r3
 8001040:	2300      	movs	r3, #0
 8001042:	6013      	str	r3, [r2, #0]
 8001044:	6053      	str	r3, [r2, #4]
 8001046:	6093      	str	r3, [r2, #8]
 8001048:	60d3      	str	r3, [r2, #12]
 800104a:	6113      	str	r3, [r2, #16]
 800104c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001050:	f103 0318 	add.w	r3, r3, #24
 8001054:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001058:	2201      	movs	r2, #1
 800105a:	801a      	strh	r2, [r3, #0]
 800105c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001060:	f103 0318 	add.w	r3, r3, #24
 8001064:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001068:	2202      	movs	r2, #2
 800106a:	805a      	strh	r2, [r3, #2]
 800106c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001070:	f103 0318 	add.w	r3, r3, #24
 8001074:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001078:	2203      	movs	r2, #3
 800107a:	809a      	strh	r2, [r3, #4]
 800107c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001080:	f103 0318 	add.w	r3, r3, #24
 8001084:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001088:	2204      	movs	r2, #4
 800108a:	80da      	strh	r2, [r3, #6]
 800108c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001090:	f103 0318 	add.w	r3, r3, #24
 8001094:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001098:	2205      	movs	r2, #5
 800109a:	811a      	strh	r2, [r3, #8]
 800109c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80010a0:	f103 0318 	add.w	r3, r3, #24
 80010a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010a8:	2206      	movs	r2, #6
 80010aa:	815a      	strh	r2, [r3, #10]
 80010ac:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80010b0:	f103 0318 	add.w	r3, r3, #24
 80010b4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010b8:	e00a      	b.n	80010d0 <main+0x36c>
 80010ba:	bf00      	nop
 80010bc:	e0001000 	.word	0xe0001000
 80010c0:	080043d4 	.word	0x080043d4
 80010c4:	080043fc 	.word	0x080043fc
 80010c8:	08004424 	.word	0x08004424
 80010cc:	08004430 	.word	0x08004430
 80010d0:	2207      	movs	r2, #7
 80010d2:	819a      	strh	r2, [r3, #12]
 80010d4:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80010d8:	f103 0318 	add.w	r3, r3, #24
 80010dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010e0:	2208      	movs	r2, #8
 80010e2:	81da      	strh	r2, [r3, #14]
 80010e4:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80010e8:	f103 0318 	add.w	r3, r3, #24
 80010ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010f0:	2209      	movs	r2, #9
 80010f2:	821a      	strh	r2, [r3, #16]
  uint16_t vectorOUT_ej5[10] = {0};
 80010f4:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80010f8:	f103 0318 	add.w	r3, r3, #24
 80010fc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001100:	461a      	mov	r2, r3
 8001102:	2300      	movs	r3, #0
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	6053      	str	r3, [r2, #4]
 8001108:	6093      	str	r3, [r2, #8]
 800110a:	60d3      	str	r3, [r2, #12]
 800110c:	6113      	str	r3, [r2, #16]
  uint32_t longitud_ej5 = 10;
 800110e:	230a      	movs	r3, #10
 8001110:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001114:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8001118:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_filtroVentana10(vectorIN_ej5,vectorOUT_ej5,longitud_ej5);  ciclosASM = DWT->CYCCNT;
 800111a:	4bcd      	ldr	r3, [pc, #820]	; (8001450 <main+0x6ec>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8001124:	f101 0178 	add.w	r1, r1, #120	; 0x78
 8001128:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800112c:	f103 030c 	add.w	r3, r3, #12
 8001130:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001134:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8001138:	6812      	ldr	r2, [r2, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f886 	bl	800024c <asm_filtroVentana10>
 8001140:	4bc3      	ldr	r3, [pc, #780]	; (8001450 <main+0x6ec>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8001148:	f102 0214 	add.w	r2, r2, #20
 800114c:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  filtroVentana10(vectorIN_ej5,vectorOUT_ej5,longitud_ej5);  ciclosC = DWT->CYCCNT;
 800114e:	4bc0      	ldr	r3, [pc, #768]	; (8001450 <main+0x6ec>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8001158:	f101 0178 	add.w	r1, r1, #120	; 0x78
 800115c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001160:	f103 030c 	add.w	r3, r3, #12
 8001164:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001168:	f102 0270 	add.w	r2, r2, #112	; 0x70
 800116c:	6812      	ldr	r2, [r2, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fb83 	bl	800087a <filtroVentana10>
 8001174:	4bb6      	ldr	r3, [pc, #728]	; (8001450 <main+0x6ec>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 800117c:	f102 0210 	add.w	r2, r2, #16
 8001180:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 6 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint32_t vectorIN_ej6[5] = {0xFFFF,0xFEFF,0xEAFF,0xE9FF,0x01FF};
 8001182:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001186:	f103 0318 	add.w	r3, r3, #24
 800118a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800118e:	4ab1      	ldr	r2, [pc, #708]	; (8001454 <main+0x6f0>)
 8001190:	461c      	mov	r4, r3
 8001192:	4615      	mov	r5, r2
 8001194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001198:	682b      	ldr	r3, [r5, #0]
 800119a:	6023      	str	r3, [r4, #0]
  uint32_t vectorOUT_ej6[5] = {0};
 800119c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80011a0:	f103 0318 	add.w	r3, r3, #24
 80011a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80011a8:	461a      	mov	r2, r3
 80011aa:	2300      	movs	r3, #0
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	6053      	str	r3, [r2, #4]
 80011b0:	6093      	str	r3, [r2, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
 80011b4:	6113      	str	r3, [r2, #16]
  uint32_t longitud_ej6 = 5;
 80011b6:	2305      	movs	r3, #5
 80011b8:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80011bc:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80011c0:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_pack32to16(vectorIN_ej6,vectorOUT_ej6,longitud_ej6);  ciclosASM = DWT->CYCCNT;
 80011c2:	4ba3      	ldr	r3, [pc, #652]	; (8001450 <main+0x6ec>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 80011cc:	f101 0150 	add.w	r1, r1, #80	; 0x50
 80011d0:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80011d4:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80011d8:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80011dc:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80011e0:	6812      	ldr	r2, [r2, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f859 	bl	800029a <asm_pack32to16>
 80011e8:	4b99      	ldr	r3, [pc, #612]	; (8001450 <main+0x6ec>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80011f0:	f102 0214 	add.w	r2, r2, #20
 80011f4:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  pack32to16(vectorIN_ej6,vectorOUT_ej6,longitud_ej6);  ciclosC = DWT->CYCCNT;
 80011f6:	4b96      	ldr	r3, [pc, #600]	; (8001450 <main+0x6ec>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8001200:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8001204:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001208:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800120c:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001210:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8001214:	6812      	ldr	r2, [r2, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fb8a 	bl	8000930 <pack32to16>
 800121c:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <main+0x6ec>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8001224:	f102 0210 	add.w	r2, r2, #16
 8001228:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 7 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint32_t vectorIN_ej7[10] = {1,2,3,5,4,8,2,3,5,0};
 800122a:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 800122e:	f103 0318 	add.w	r3, r3, #24
 8001232:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001236:	4a88      	ldr	r2, [pc, #544]	; (8001458 <main+0x6f4>)
 8001238:	461c      	mov	r4, r3
 800123a:	4615      	mov	r5, r2
 800123c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001244:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001248:	e884 0003 	stmia.w	r4, {r0, r1}
  uint32_t longitud_ej7 = 10;
 800124c:	230a      	movs	r3, #10
 800124e:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001252:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001256:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  uint32_t pos = asm_max32(vectorIN_ej7,longitud_ej7);  ciclosASM = DWT->CYCCNT;
 8001258:	4b7d      	ldr	r3, [pc, #500]	; (8001450 <main+0x6ec>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001262:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001266:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 800126a:	f102 0268 	add.w	r2, r2, #104	; 0x68
 800126e:	6811      	ldr	r1, [r2, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f81f 	bl	80002b4 <asm_max32>
 8001276:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 800127a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800127e:	6018      	str	r0, [r3, #0]
 8001280:	4b73      	ldr	r3, [pc, #460]	; (8001450 <main+0x6ec>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8001288:	f102 0214 	add.w	r2, r2, #20
 800128c:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  uint32_t pos2 = max(vectorIN_ej7,longitud_ej7);  ciclosC = DWT->CYCCNT;
 800128e:	4b70      	ldr	r3, [pc, #448]	; (8001450 <main+0x6ec>)
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001298:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800129c:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80012a0:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80012a4:	6811      	ldr	r1, [r2, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fb65 	bl	8000976 <max>
 80012ac:	4603      	mov	r3, r0
 80012ae:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80012b2:	f102 0260 	add.w	r2, r2, #96	; 0x60
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b65      	ldr	r3, [pc, #404]	; (8001450 <main+0x6ec>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80012c0:	f102 0210 	add.w	r2, r2, #16
 80012c4:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 8 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint32_t vectorIN_ej8[10] = {1,2,3,4,5,6,7,8,9,10};
 80012c6:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80012ca:	f103 0318 	add.w	r3, r3, #24
 80012ce:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80012d2:	4a62      	ldr	r2, [pc, #392]	; (800145c <main+0x6f8>)
 80012d4:	461c      	mov	r4, r3
 80012d6:	4615      	mov	r5, r2
 80012d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012e4:	e884 0003 	stmia.w	r4, {r0, r1}
  uint32_t vectorOUT_ej8[10] = {0};
 80012e8:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80012ec:	f103 0318 	add.w	r3, r3, #24
 80012f0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80012f4:	4618      	mov	r0, r3
 80012f6:	2328      	movs	r3, #40	; 0x28
 80012f8:	461a      	mov	r2, r3
 80012fa:	2100      	movs	r1, #0
 80012fc:	f003 f856 	bl	80043ac <memset>
  uint32_t longitud_ej8 = 10;
 8001300:	230a      	movs	r3, #10
 8001302:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001306:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 800130a:	6013      	str	r3, [r2, #0]
  uint32_t N = 2;
 800130c:	2302      	movs	r3, #2
 800130e:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001312:	f102 0258 	add.w	r2, r2, #88	; 0x58
 8001316:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_downsampleM(vectorIN_ej8,vectorOUT_ej8,longitud_ej8,N);  ciclosASM = DWT->CYCCNT;
 8001318:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <main+0x6ec>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 8001322:	f101 0158 	add.w	r1, r1, #88	; 0x58
 8001326:	f507 4081 	add.w	r0, r7, #16512	; 0x4080
 800132a:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 800132e:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001338:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	f7fe ffce 	bl	80002de <asm_downsampleM>
 8001342:	4b43      	ldr	r3, [pc, #268]	; (8001450 <main+0x6ec>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 800134a:	f102 0214 	add.w	r2, r2, #20
 800134e:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  downsampleM(vectorIN_ej8,vectorOUT_ej8,longitud_ej8,N);  ciclosC = DWT->CYCCNT;
 8001350:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <main+0x6ec>)
 8001352:	2200      	movs	r2, #0
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 800135a:	f101 0158 	add.w	r1, r1, #88	; 0x58
 800135e:	f507 4081 	add.w	r0, r7, #16512	; 0x4080
 8001362:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8001366:	f103 0358 	add.w	r3, r3, #88	; 0x58
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001370:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	f7ff fb29 	bl	80009cc <downsampleM>
 800137a:	4b35      	ldr	r3, [pc, #212]	; (8001450 <main+0x6ec>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8001382:	f102 0210 	add.w	r2, r2, #16
 8001386:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 9 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint16_t vectorIN_ej9[10] = {1,2,3,4,5,6,7,8,9,10};
 8001388:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 800138c:	f103 0318 	add.w	r3, r3, #24
 8001390:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001394:	4a32      	ldr	r2, [pc, #200]	; (8001460 <main+0x6fc>)
 8001396:	461c      	mov	r4, r3
 8001398:	4615      	mov	r5, r2
 800139a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139e:	682b      	ldr	r3, [r5, #0]
 80013a0:	6023      	str	r3, [r4, #0]
  uint32_t longitud_ej9 = 10;
 80013a2:	230a      	movs	r3, #10
 80013a4:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80013a8:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80013ac:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_invertir(vectorIN_ej9,longitud_ej9);  ciclosASM = DWT->CYCCNT;
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <main+0x6ec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80013b8:	f103 0344 	add.w	r3, r3, #68	; 0x44
 80013bc:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80013c0:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80013c4:	6811      	ldr	r1, [r2, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7fe ff99 	bl	80002fe <asm_invertir>
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <main+0x6ec>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80013d4:	f102 0214 	add.w	r2, r2, #20
 80013d8:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  invertir(vectorIN_ej9,longitud_ej9);  ciclosC = DWT->CYCCNT;
 80013da:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <main+0x6ec>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80013e4:	f103 0344 	add.w	r3, r3, #68	; 0x44
 80013e8:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80013ec:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80013f0:	6811      	ldr	r1, [r2, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fb12 	bl	8000a1c <invertir>
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <main+0x6ec>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8001400:	f102 0210 	add.w	r2, r2, #16
 8001404:	6013      	str	r3, [r2, #0]
  int16_t muestras[4096];
  int16_t muestras_eco[4096];

 //prueba de eco, no hago una funcion asm con SIMD porque no encuentro donde aplicarlo eficientemente
  muestras[0] = 10;  muestras[1] = 15;  muestras[2] = 20;  muestras[3] = 25;
 8001406:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800140a:	f103 0318 	add.w	r3, r3, #24
 800140e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001412:	220a      	movs	r2, #10
 8001414:	801a      	strh	r2, [r3, #0]
 8001416:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800141a:	f103 0318 	add.w	r3, r3, #24
 800141e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001422:	220f      	movs	r2, #15
 8001424:	805a      	strh	r2, [r3, #2]
 8001426:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800142a:	f103 0318 	add.w	r3, r3, #24
 800142e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001432:	2214      	movs	r2, #20
 8001434:	809a      	strh	r2, [r3, #4]
 8001436:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800143a:	f103 0318 	add.w	r3, r3, #24
 800143e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001442:	2219      	movs	r2, #25
 8001444:	80da      	strh	r2, [r3, #6]
  muestras[882] = 10;  muestras[883] = 20;  muestras[884] = 30;  muestras[885] = 40;
 8001446:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800144a:	f103 0318 	add.w	r3, r3, #24
 800144e:	e009      	b.n	8001464 <main+0x700>
 8001450:	e0001000 	.word	0xe0001000
 8001454:	0800443c 	.word	0x0800443c
 8001458:	08004450 	.word	0x08004450
 800145c:	08004478 	.word	0x08004478
 8001460:	080044a0 	.word	0x080044a0
 8001464:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001468:	220a      	movs	r2, #10
 800146a:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 800146e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001472:	f103 0318 	add.w	r3, r3, #24
 8001476:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800147a:	2214      	movs	r2, #20
 800147c:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 8001480:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001484:	f103 0318 	add.w	r3, r3, #24
 8001488:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800148c:	221e      	movs	r2, #30
 800148e:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 8001492:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001496:	f103 0318 	add.w	r3, r3, #24
 800149a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800149e:	2228      	movs	r2, #40	; 0x28
 80014a0:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  muestras_eco[882] = 0;  muestras_eco[883] = 0;  muestras_eco[884] = 0;  muestras_eco[885] = 0;
 80014a4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80014a8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80014ac:	2200      	movs	r2, #0
 80014ae:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 80014b2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80014b6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80014ba:	2200      	movs	r2, #0
 80014bc:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 80014c0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80014c4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80014c8:	2200      	movs	r2, #0
 80014ca:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 80014ce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80014d2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80014d6:	2200      	movs	r2, #0
 80014d8:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  DWT->CYCCNT = 0;  asm_eco(muestras, muestras_eco);  ciclosASM = DWT->CYCCNT;
 80014dc:	4bc7      	ldr	r3, [pc, #796]	; (80017fc <main+0xa98>)
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80014e6:	3a54      	subs	r2, #84	; 0x54
 80014e8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80014ec:	f103 0318 	add.w	r3, r3, #24
 80014f0:	3b14      	subs	r3, #20
 80014f2:	4611      	mov	r1, r2
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ff16 	bl	8000326 <asm_eco>
 80014fa:	4bc0      	ldr	r3, [pc, #768]	; (80017fc <main+0xa98>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8001502:	f102 0214 	add.w	r2, r2, #20
 8001506:	6013      	str	r3, [r2, #0]

  muestras[0] = 10;  muestras[1] = 15;  muestras[2] = 20;  muestras[3] = 25;
 8001508:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800150c:	f103 0318 	add.w	r3, r3, #24
 8001510:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001514:	220a      	movs	r2, #10
 8001516:	801a      	strh	r2, [r3, #0]
 8001518:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800151c:	f103 0318 	add.w	r3, r3, #24
 8001520:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001524:	220f      	movs	r2, #15
 8001526:	805a      	strh	r2, [r3, #2]
 8001528:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800152c:	f103 0318 	add.w	r3, r3, #24
 8001530:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001534:	2214      	movs	r2, #20
 8001536:	809a      	strh	r2, [r3, #4]
 8001538:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800153c:	f103 0318 	add.w	r3, r3, #24
 8001540:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001544:	2219      	movs	r2, #25
 8001546:	80da      	strh	r2, [r3, #6]
  muestras[882] = 10;  muestras[883] = 20;  muestras[884] = 30;  muestras[885] = 40;
 8001548:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800154c:	f103 0318 	add.w	r3, r3, #24
 8001550:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001554:	220a      	movs	r2, #10
 8001556:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 800155a:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800155e:	f103 0318 	add.w	r3, r3, #24
 8001562:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001566:	2214      	movs	r2, #20
 8001568:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 800156c:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001570:	f103 0318 	add.w	r3, r3, #24
 8001574:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001578:	221e      	movs	r2, #30
 800157a:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 800157e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001582:	f103 0318 	add.w	r3, r3, #24
 8001586:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800158a:	2228      	movs	r2, #40	; 0x28
 800158c:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  muestras_eco[882] = 0;  muestras_eco[883] = 0;  muestras_eco[884] = 0;  muestras_eco[885] = 0;
 8001590:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001594:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001598:	2200      	movs	r2, #0
 800159a:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 800159e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80015a2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80015a6:	2200      	movs	r2, #0
 80015a8:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 80015ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80015b0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80015b4:	2200      	movs	r2, #0
 80015b6:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 80015ba:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80015be:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80015c2:	2200      	movs	r2, #0
 80015c4:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  DWT->CYCCNT = 0;  introducirEco(muestras, muestras_eco);  ciclosC = DWT->CYCCNT;
 80015c8:	4b8c      	ldr	r3, [pc, #560]	; (80017fc <main+0xa98>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80015d2:	3a54      	subs	r2, #84	; 0x54
 80015d4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015d8:	f103 0318 	add.w	r3, r3, #24
 80015dc:	3b14      	subs	r3, #20
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fa52 	bl	8000a8a <introducirEco>
 80015e6:	4b85      	ldr	r3, [pc, #532]	; (80017fc <main+0xa98>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80015ee:	f102 0210 	add.w	r2, r2, #16
 80015f2:	6013      	str	r3, [r2, #0]

  muestras[0] = 10;  muestras[1] = 15;  muestras[2] = 20;  muestras[3] = 25;
 80015f4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80015f8:	f103 0318 	add.w	r3, r3, #24
 80015fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001600:	220a      	movs	r2, #10
 8001602:	801a      	strh	r2, [r3, #0]
 8001604:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001608:	f103 0318 	add.w	r3, r3, #24
 800160c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001610:	220f      	movs	r2, #15
 8001612:	805a      	strh	r2, [r3, #2]
 8001614:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001618:	f103 0318 	add.w	r3, r3, #24
 800161c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001620:	2214      	movs	r2, #20
 8001622:	809a      	strh	r2, [r3, #4]
 8001624:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001628:	f103 0318 	add.w	r3, r3, #24
 800162c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001630:	2219      	movs	r2, #25
 8001632:	80da      	strh	r2, [r3, #6]
  muestras[882] = 10;  muestras[883] = 20;  muestras[884] = 30;  muestras[885] = 40;
 8001634:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001638:	f103 0318 	add.w	r3, r3, #24
 800163c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001640:	220a      	movs	r2, #10
 8001642:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 8001646:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800164a:	f103 0318 	add.w	r3, r3, #24
 800164e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001652:	2214      	movs	r2, #20
 8001654:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 8001658:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800165c:	f103 0318 	add.w	r3, r3, #24
 8001660:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001664:	221e      	movs	r2, #30
 8001666:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 800166a:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800166e:	f103 0318 	add.w	r3, r3, #24
 8001672:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001676:	2228      	movs	r2, #40	; 0x28
 8001678:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  muestras_eco[882] = 0;  muestras_eco[883] = 0;  muestras_eco[884] = 0;  muestras_eco[885] = 0;
 800167c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001680:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001684:	2200      	movs	r2, #0
 8001686:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 800168a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800168e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001692:	2200      	movs	r2, #0
 8001694:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 8001698:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800169c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80016a0:	2200      	movs	r2, #0
 80016a2:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 80016a6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80016aa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80016ae:	2200      	movs	r2, #0
 80016b0:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  DWT->CYCCNT = 0;  introducirEco_Intrinsic(muestras, muestras_eco);  ciclosC = DWT->CYCCNT;
 80016b4:	4b51      	ldr	r3, [pc, #324]	; (80017fc <main+0xa98>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80016be:	3a54      	subs	r2, #84	; 0x54
 80016c0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80016c4:	f103 0318 	add.w	r3, r3, #24
 80016c8:	3b14      	subs	r3, #20
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff fa34 	bl	8000b3a <introducirEco_Intrinsic>
 80016d2:	4b4a      	ldr	r3, [pc, #296]	; (80017fc <main+0xa98>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80016da:	f102 0210 	add.w	r2, r2, #16
 80016de:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 10 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
	uint32_t longitude = 15;
 80016e0:	230f      	movs	r3, #15
 80016e2:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80016e6:	f102 0250 	add.w	r2, r2, #80	; 0x50
 80016ea:	6013      	str	r3, [r2, #0]
	int16_t vX[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5};
 80016ec:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80016f0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80016f4:	4a42      	ldr	r2, [pc, #264]	; (8001800 <main+0xa9c>)
 80016f6:	461c      	mov	r4, r3
 80016f8:	4615      	mov	r5, r2
 80016fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001702:	c407      	stmia	r4!, {r0, r1, r2}
 8001704:	8023      	strh	r3, [r4, #0]
	int16_t vY[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5};
 8001706:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800170a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800170e:	4a3c      	ldr	r2, [pc, #240]	; (8001800 <main+0xa9c>)
 8001710:	461c      	mov	r4, r3
 8001712:	4615      	mov	r5, r2
 8001714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001718:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800171c:	c407      	stmia	r4!, {r0, r1, r2}
 800171e:	8023      	strh	r3, [r4, #0]
	int16_t vOut[longitude];
 8001720:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8001724:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001728:	6819      	ldr	r1, [r3, #0]
 800172a:	460b      	mov	r3, r1
 800172c:	3b01      	subs	r3, #1
 800172e:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001732:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	2300      	movs	r3, #0
 800173a:	468a      	mov	sl, r1
 800173c:	469b      	mov	fp, r3
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800174a:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800174e:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001752:	2300      	movs	r3, #0
 8001754:	4688      	mov	r8, r1
 8001756:	4699      	mov	r9, r3
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001764:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001768:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800176c:	004b      	lsls	r3, r1, #1
 800176e:	3307      	adds	r3, #7
 8001770:	08db      	lsrs	r3, r3, #3
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	ebad 0d03 	sub.w	sp, sp, r3
 8001778:	466b      	mov	r3, sp
 800177a:	3301      	adds	r3, #1
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001784:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001788:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0;    corr(vX, vY, vOut, longitude);    ciclosC = DWT->CYCCNT;
 800178a:	4b1c      	ldr	r3, [pc, #112]	; (80017fc <main+0xa98>)
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	f107 0118 	add.w	r1, r7, #24
 8001794:	3914      	subs	r1, #20
 8001796:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800179a:	3874      	subs	r0, #116	; 0x74
 800179c:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 80017a0:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80017aa:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	f7ff fa28 	bl	8000c04 <corr>
 80017b4:	4b11      	ldr	r3, [pc, #68]	; (80017fc <main+0xa98>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80017bc:	f102 0210 	add.w	r2, r2, #16
 80017c0:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0;	corr_Intrinsic(vX, vY, vOut, longitude);    ciclosC = DWT->CYCCNT;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <main+0xa98>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	f107 0118 	add.w	r1, r7, #24
 80017cc:	3914      	subs	r1, #20
 80017ce:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80017d2:	3874      	subs	r0, #116	; 0x74
 80017d4:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 80017d8:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80017e2:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	f7ff fa5c 	bl	8000ca4 <corr_Intrinsic>
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <main+0xa98>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80017f4:	f102 0210 	add.w	r2, r2, #16
 80017f8:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <main+0xa96>
 80017fc:	e0001000 	.word	0xe0001000
 8001800:	080044b4 	.word	0x080044b4

08001804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b094      	sub	sp, #80	; 0x50
 8001808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180a:	f107 0320 	add.w	r3, r7, #32
 800180e:	2230      	movs	r2, #48	; 0x30
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fdca 	bl	80043ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]
 800182c:	4b28      	ldr	r3, [pc, #160]	; (80018d0 <SystemClock_Config+0xcc>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	4a27      	ldr	r2, [pc, #156]	; (80018d0 <SystemClock_Config+0xcc>)
 8001832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001836:	6413      	str	r3, [r2, #64]	; 0x40
 8001838:	4b25      	ldr	r3, [pc, #148]	; (80018d0 <SystemClock_Config+0xcc>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001844:	2300      	movs	r3, #0
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <SystemClock_Config+0xd0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a21      	ldr	r2, [pc, #132]	; (80018d4 <SystemClock_Config+0xd0>)
 800184e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <SystemClock_Config+0xd0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001860:	2301      	movs	r3, #1
 8001862:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001864:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186a:	2302      	movs	r3, #2
 800186c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800186e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001872:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001874:	2304      	movs	r3, #4
 8001876:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001878:	23a8      	movs	r3, #168	; 0xa8
 800187a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800187c:	2302      	movs	r3, #2
 800187e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001880:	2307      	movs	r3, #7
 8001882:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001884:	f107 0320 	add.w	r3, r7, #32
 8001888:	4618      	mov	r0, r3
 800188a:	f001 fb0f 	bl	8002eac <HAL_RCC_OscConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001894:	f000 f974 	bl	8001b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001898:	230f      	movs	r3, #15
 800189a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800189c:	2302      	movs	r3, #2
 800189e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018a8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018b0:	f107 030c 	add.w	r3, r7, #12
 80018b4:	2105      	movs	r1, #5
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fd70 	bl	800339c <HAL_RCC_ClockConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018c2:	f000 f95d 	bl	8001b80 <Error_Handler>
  }
}
 80018c6:	bf00      	nop
 80018c8:	3750      	adds	r7, #80	; 0x50
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40007000 	.word	0x40007000

080018d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <MX_ETH_Init+0x84>)
 80018de:	4a20      	ldr	r2, [pc, #128]	; (8001960 <MX_ETH_Init+0x88>)
 80018e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <MX_ETH_Init+0x8c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <MX_ETH_Init+0x8c>)
 80018ea:	2280      	movs	r2, #128	; 0x80
 80018ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_ETH_Init+0x8c>)
 80018f0:	22e1      	movs	r2, #225	; 0xe1
 80018f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_ETH_Init+0x8c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_ETH_Init+0x8c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001900:	4b18      	ldr	r3, [pc, #96]	; (8001964 <MX_ETH_Init+0x8c>)
 8001902:	2200      	movs	r2, #0
 8001904:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <MX_ETH_Init+0x84>)
 8001908:	4a16      	ldr	r2, [pc, #88]	; (8001964 <MX_ETH_Init+0x8c>)
 800190a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800190c:	4b13      	ldr	r3, [pc, #76]	; (800195c <MX_ETH_Init+0x84>)
 800190e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001912:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_ETH_Init+0x84>)
 8001916:	4a14      	ldr	r2, [pc, #80]	; (8001968 <MX_ETH_Init+0x90>)
 8001918:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <MX_ETH_Init+0x84>)
 800191c:	4a13      	ldr	r2, [pc, #76]	; (800196c <MX_ETH_Init+0x94>)
 800191e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_ETH_Init+0x84>)
 8001922:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001926:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001928:	480c      	ldr	r0, [pc, #48]	; (800195c <MX_ETH_Init+0x84>)
 800192a:	f000 fcb5 	bl	8002298 <HAL_ETH_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001934:	f000 f924 	bl	8001b80 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001938:	2238      	movs	r2, #56	; 0x38
 800193a:	2100      	movs	r1, #0
 800193c:	480c      	ldr	r0, [pc, #48]	; (8001970 <MX_ETH_Init+0x98>)
 800193e:	f002 fd35 	bl	80043ac <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001942:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <MX_ETH_Init+0x98>)
 8001944:	2221      	movs	r2, #33	; 0x21
 8001946:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001948:	4b09      	ldr	r3, [pc, #36]	; (8001970 <MX_ETH_Init+0x98>)
 800194a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800194e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <MX_ETH_Init+0x98>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200001a0 	.word	0x200001a0
 8001960:	40028000 	.word	0x40028000
 8001964:	200007a0 	.word	0x200007a0
 8001968:	20000100 	.word	0x20000100
 800196c:	20000060 	.word	0x20000060
 8001970:	20000028 	.word	0x20000028

08001974 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <MX_USART3_UART_Init+0x4c>)
 800197a:	4a12      	ldr	r2, [pc, #72]	; (80019c4 <MX_USART3_UART_Init+0x50>)
 800197c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800197e:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <MX_USART3_UART_Init+0x4c>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <MX_USART3_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_USART3_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <MX_USART3_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_USART3_UART_Init+0x4c>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <MX_USART3_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_USART3_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	; (80019c0 <MX_USART3_UART_Init+0x4c>)
 80019ac:	f001 ff16 	bl	80037dc <HAL_UART_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019b6:	f000 f8e3 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000250 	.word	0x20000250
 80019c4:	40004800 	.word	0x40004800

080019c8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019d6:	2204      	movs	r2, #4
 80019d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019dc:	2202      	movs	r2, #2
 80019de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e8:	2202      	movs	r2, #2
 80019ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a0c:	f001 f931 	bl	8002c72 <HAL_PCD_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a16:	f000 f8b3 	bl	8001b80 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000294 	.word	0x20000294

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	; 0x30
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 031c 	add.w	r3, r7, #28
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
 8001a3e:	4b4c      	ldr	r3, [pc, #304]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a4b      	ldr	r2, [pc, #300]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b49      	ldr	r3, [pc, #292]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	61bb      	str	r3, [r7, #24]
 8001a54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	4b45      	ldr	r3, [pc, #276]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a44      	ldr	r2, [pc, #272]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	613b      	str	r3, [r7, #16]
 8001a76:	4b3e      	ldr	r3, [pc, #248]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a3d      	ldr	r2, [pc, #244]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	4b37      	ldr	r3, [pc, #220]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	4a36      	ldr	r2, [pc, #216]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9e:	4b34      	ldr	r3, [pc, #208]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
 8001aae:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	4b29      	ldr	r3, [pc, #164]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a28      	ldr	r2, [pc, #160]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <MX_GPIO_Init+0x14c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f244 0181 	movw	r1, #16513	; 0x4081
 8001ae8:	4822      	ldr	r0, [pc, #136]	; (8001b74 <MX_GPIO_Init+0x150>)
 8001aea:	f001 f8a9 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2140      	movs	r1, #64	; 0x40
 8001af2:	4821      	ldr	r0, [pc, #132]	; (8001b78 <MX_GPIO_Init+0x154>)
 8001af4:	f001 f8a4 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001af8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001afe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	481b      	ldr	r0, [pc, #108]	; (8001b7c <MX_GPIO_Init+0x158>)
 8001b10:	f000 feea 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b14:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b22:	2300      	movs	r3, #0
 8001b24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	f107 031c 	add.w	r3, r7, #28
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4811      	ldr	r0, [pc, #68]	; (8001b74 <MX_GPIO_Init+0x150>)
 8001b2e:	f000 fedb 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b32:	2340      	movs	r3, #64	; 0x40
 8001b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b42:	f107 031c 	add.w	r3, r7, #28
 8001b46:	4619      	mov	r1, r3
 8001b48:	480b      	ldr	r0, [pc, #44]	; (8001b78 <MX_GPIO_Init+0x154>)
 8001b4a:	f000 fecd 	bl	80028e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b52:	2300      	movs	r3, #0
 8001b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_GPIO_Init+0x154>)
 8001b62:	f000 fec1 	bl	80028e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b66:	bf00      	nop
 8001b68:	3730      	adds	r7, #48	; 0x30
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40021800 	.word	0x40021800
 8001b7c:	40020800 	.word	0x40020800

08001b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b88:	e7fe      	b.n	8001b88 <Error_Handler+0x8>
	...

08001b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b10      	ldr	r3, [pc, #64]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	4a0f      	ldr	r2, [pc, #60]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001b9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ba2:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	603b      	str	r3, [r7, #0]
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_MspInit+0x4c>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800

08001bdc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08e      	sub	sp, #56	; 0x38
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a55      	ldr	r2, [pc, #340]	; (8001d50 <HAL_ETH_MspInit+0x174>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	f040 80a4 	bne.w	8001d48 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c08:	4a52      	ldr	r2, [pc, #328]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c10:	4b50      	ldr	r3, [pc, #320]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	623b      	str	r3, [r7, #32]
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61fb      	str	r3, [r7, #28]
 8001c20:	4b4c      	ldr	r3, [pc, #304]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	4a4b      	ldr	r2, [pc, #300]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2c:	4b49      	ldr	r3, [pc, #292]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c34:	61fb      	str	r3, [r7, #28]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c40:	4a44      	ldr	r2, [pc, #272]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c46:	6313      	str	r3, [r2, #48]	; 0x30
 8001c48:	4b42      	ldr	r3, [pc, #264]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4a3d      	ldr	r2, [pc, #244]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
 8001c64:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	4b37      	ldr	r3, [pc, #220]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c78:	4a36      	ldr	r2, [pc, #216]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c7a:	f043 0301 	orr.w	r3, r3, #1
 8001c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c80:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	4b30      	ldr	r3, [pc, #192]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	4a2f      	ldr	r2, [pc, #188]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	4a28      	ldr	r2, [pc, #160]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb8:	4b26      	ldr	r3, [pc, #152]	; (8001d54 <HAL_ETH_MspInit+0x178>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001cc4:	2332      	movs	r3, #50	; 0x32
 8001cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cd4:	230b      	movs	r3, #11
 8001cd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cdc:	4619      	mov	r1, r3
 8001cde:	481e      	ldr	r0, [pc, #120]	; (8001d58 <HAL_ETH_MspInit+0x17c>)
 8001ce0:	f000 fe02 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001ce4:	2386      	movs	r3, #134	; 0x86
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cf4:	230b      	movs	r3, #11
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4817      	ldr	r0, [pc, #92]	; (8001d5c <HAL_ETH_MspInit+0x180>)
 8001d00:	f000 fdf2 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d16:	230b      	movs	r3, #11
 8001d18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001d1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480f      	ldr	r0, [pc, #60]	; (8001d60 <HAL_ETH_MspInit+0x184>)
 8001d22:	f000 fde1 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d38:	230b      	movs	r3, #11
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d40:	4619      	mov	r1, r3
 8001d42:	4808      	ldr	r0, [pc, #32]	; (8001d64 <HAL_ETH_MspInit+0x188>)
 8001d44:	f000 fdd0 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001d48:	bf00      	nop
 8001d4a:	3738      	adds	r7, #56	; 0x38
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	40028000 	.word	0x40028000
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020000 	.word	0x40020000
 8001d60:	40020400 	.word	0x40020400
 8001d64:	40021800 	.word	0x40021800

08001d68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	; 0x28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d70:	f107 0314 	add.w	r3, r7, #20
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	60da      	str	r2, [r3, #12]
 8001d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a19      	ldr	r2, [pc, #100]	; (8001dec <HAL_UART_MspInit+0x84>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d12c      	bne.n	8001de4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	4b18      	ldr	r3, [pc, #96]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d92:	4a17      	ldr	r2, [pc, #92]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9a:	4b15      	ldr	r3, [pc, #84]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001db0:	f043 0308 	orr.w	r3, r3, #8
 8001db4:	6313      	str	r3, [r2, #48]	; 0x30
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_UART_MspInit+0x88>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001dc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dd4:	2307      	movs	r3, #7
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4805      	ldr	r0, [pc, #20]	; (8001df4 <HAL_UART_MspInit+0x8c>)
 8001de0:	f000 fd82 	bl	80028e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001de4:	bf00      	nop
 8001de6:	3728      	adds	r7, #40	; 0x28
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40004800 	.word	0x40004800
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020c00 	.word	0x40020c00

08001df8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e18:	d13f      	bne.n	8001e9a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <HAL_PCD_MspInit+0xac>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a20      	ldr	r2, [pc, #128]	; (8001ea4 <HAL_PCD_MspInit+0xac>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <HAL_PCD_MspInit+0xac>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e36:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e48:	230a      	movs	r3, #10
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4815      	ldr	r0, [pc, #84]	; (8001ea8 <HAL_PCD_MspInit+0xb0>)
 8001e54:	f000 fd48 	bl	80028e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	480e      	ldr	r0, [pc, #56]	; (8001ea8 <HAL_PCD_MspInit+0xb0>)
 8001e6e:	f000 fd3b 	bl	80028e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_PCD_MspInit+0xac>)
 8001e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e76:	4a0b      	ldr	r2, [pc, #44]	; (8001ea4 <HAL_PCD_MspInit+0xac>)
 8001e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e7c:	6353      	str	r3, [r2, #52]	; 0x34
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_PCD_MspInit+0xac>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <HAL_PCD_MspInit+0xac>)
 8001e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_PCD_MspInit+0xac>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e9a:	bf00      	nop
 8001e9c:	3728      	adds	r7, #40	; 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020000 	.word	0x40020000

08001eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <NMI_Handler+0x4>

08001eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <HardFault_Handler+0x4>

08001eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ebc:	e7fe      	b.n	8001ebc <MemManage_Handler+0x4>

08001ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ec2:	e7fe      	b.n	8001ec2 <BusFault_Handler+0x4>

08001ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <UsageFault_Handler+0x4>

08001eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b085      	sub	sp, #20
 8001ece:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001ed0:	f3ef 8314 	mrs	r3, CONTROL
 8001ed4:	607b      	str	r3, [r7, #4]
  return(result);
 8001ed6:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8001ed8:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	f383 8814 	msr	CONTROL, r3
}
 8001eec:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f1a:	f000 f893 	bl	8002044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <SystemInit+0x20>)
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2e:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <SystemInit+0x20>)
 8001f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f38:	bf00      	nop
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 8001f48:	bf00      	nop
  nop
 8001f4a:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8001f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f84 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f52:	490e      	ldr	r1, [pc, #56]	; (8001f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f54:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f58:	e002      	b.n	8001f60 <LoopCopyDataInit>

08001f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5e:	3304      	adds	r3, #4

08001f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f64:	d3f9      	bcc.n	8001f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f68:	4c0b      	ldr	r4, [pc, #44]	; (8001f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f6c:	e001      	b.n	8001f72 <LoopFillZerobss>

08001f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f70:	3204      	adds	r2, #4

08001f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f74:	d3fb      	bcc.n	8001f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f76:	f7ff ffd5 	bl	8001f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f002 f9f3 	bl	8004364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7e:	f7fe fef1 	bl	8000d64 <main>
  bx  lr    
 8001f82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f90:	080044fc 	.word	0x080044fc
  ldr r2, =_sbss
 8001f94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001f98:	200007ac 	.word	0x200007ac

08001f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <ADC_IRQHandler>
	...

08001fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_Init+0x40>)
 8001faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <HAL_Init+0x40>)
 8001fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <HAL_Init+0x40>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f000 f931 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fce:	2000      	movs	r0, #0
 8001fd0:	f000 f808 	bl	8001fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd4:	f7ff fdda 	bl	8001b8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023c00 	.word	0x40023c00

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_InitTick+0x54>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_InitTick+0x58>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f000 f93b 	bl	800227e <HAL_SYSTICK_Config>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e00e      	b.n	8002030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b0f      	cmp	r3, #15
 8002016:	d80a      	bhi.n	800202e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002018:	2200      	movs	r2, #0
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f000 f911 	bl	8002246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002024:	4a06      	ldr	r2, [pc, #24]	; (8002040 <HAL_InitTick+0x5c>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000000 	.word	0x20000000
 800203c:	20000008 	.word	0x20000008
 8002040:	20000004 	.word	0x20000004

08002044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x20>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_IncTick+0x24>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4413      	add	r3, r2
 8002054:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_IncTick+0x24>)
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000008 	.word	0x20000008
 8002068:	200007a8 	.word	0x200007a8

0800206c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return uwTick;
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_GetTick+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	200007a8 	.word	0x200007a8

08002084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800208c:	f7ff ffee 	bl	800206c <HAL_GetTick>
 8002090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d005      	beq.n	80020aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_Delay+0x44>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020aa:	bf00      	nop
 80020ac:	f7ff ffde 	bl	800206c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d8f7      	bhi.n	80020ac <HAL_Delay+0x28>
  {
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000008 	.word	0x20000008

080020cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020fe:	4a04      	ldr	r2, [pc, #16]	; (8002110 <__NVIC_SetPriorityGrouping+0x44>)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	60d3      	str	r3, [r2, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002118:	4b04      	ldr	r3, [pc, #16]	; (800212c <__NVIC_GetPriorityGrouping+0x18>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	0a1b      	lsrs	r3, r3, #8
 800211e:	f003 0307 	and.w	r3, r3, #7
}
 8002122:	4618      	mov	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	; (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	; (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	; (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	; (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	; (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff47 	bl	80020cc <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff5c 	bl	8002114 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ffb0 	bl	80021ec <SysTick_Config>
 800228c:	4603      	mov	r3, r0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e06c      	b.n	8002384 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d106      	bne.n	80022c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2223      	movs	r2, #35	; 0x23
 80022b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff fc8d 	bl	8001bdc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b31      	ldr	r3, [pc, #196]	; (800238c <HAL_ETH_Init+0xf4>)
 80022c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ca:	4a30      	ldr	r2, [pc, #192]	; (800238c <HAL_ETH_Init+0xf4>)
 80022cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022d0:	6453      	str	r3, [r2, #68]	; 0x44
 80022d2:	4b2e      	ldr	r3, [pc, #184]	; (800238c <HAL_ETH_Init+0xf4>)
 80022d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80022de:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_ETH_Init+0xf8>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4a2b      	ldr	r2, [pc, #172]	; (8002390 <HAL_ETH_Init+0xf8>)
 80022e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022e8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <HAL_ETH_Init+0xf8>)
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	4927      	ldr	r1, [pc, #156]	; (8002390 <HAL_ETH_Init+0xf8>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <HAL_ETH_Init+0xf8>)
 80022fa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6812      	ldr	r2, [r2, #0]
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002312:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002314:	f7ff feaa 	bl	800206c <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800231a:	e011      	b.n	8002340 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800231c:	f7ff fea6 	bl	800206c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800232a:	d909      	bls.n	8002340 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2204      	movs	r2, #4
 8002330:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	22e0      	movs	r2, #224	; 0xe0
 8002338:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e021      	b.n	8002384 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1e4      	bne.n	800231c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f958 	bl	8002608 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f9ff 	bl	800275c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fa55 	bl	800280e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	461a      	mov	r2, r3
 800236a:	2100      	movs	r1, #0
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f9bd 	bl	80026ec <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2210      	movs	r2, #16
 800237e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40023800 	.word	0x40023800
 8002390:	40013800 	.word	0x40013800

08002394 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4b51      	ldr	r3, [pc, #324]	; (80024f0 <ETH_SetMACConfig+0x15c>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	7c1b      	ldrb	r3, [r3, #16]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d102      	bne.n	80023bc <ETH_SetMACConfig+0x28>
 80023b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023ba:	e000      	b.n	80023be <ETH_SetMACConfig+0x2a>
 80023bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	7c5b      	ldrb	r3, [r3, #17]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <ETH_SetMACConfig+0x38>
 80023c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ca:	e000      	b.n	80023ce <ETH_SetMACConfig+0x3a>
 80023cc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023ce:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7fdb      	ldrb	r3, [r3, #31]
 80023da:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80023dc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	7f92      	ldrb	r2, [r2, #30]
 80023e8:	2a00      	cmp	r2, #0
 80023ea:	d102      	bne.n	80023f2 <ETH_SetMACConfig+0x5e>
 80023ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023f0:	e000      	b.n	80023f4 <ETH_SetMACConfig+0x60>
 80023f2:	2200      	movs	r2, #0
                        macconf->Speed |
 80023f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	7f1b      	ldrb	r3, [r3, #28]
 80023fa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023fc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002402:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	791b      	ldrb	r3, [r3, #4]
 8002408:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800240a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002412:	2a00      	cmp	r2, #0
 8002414:	d102      	bne.n	800241c <ETH_SetMACConfig+0x88>
 8002416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241a:	e000      	b.n	800241e <ETH_SetMACConfig+0x8a>
 800241c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800241e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	7bdb      	ldrb	r3, [r3, #15]
 8002424:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002426:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800242c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002434:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002436:	4313      	orrs	r3, r2
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff fe18 	bl	8002084 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	f64f 7341 	movw	r3, #65345	; 0xff41
 800246a:	4013      	ands	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002472:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800247a:	2a00      	cmp	r2, #0
 800247c:	d101      	bne.n	8002482 <ETH_SetMACConfig+0xee>
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	e000      	b.n	8002484 <ETH_SetMACConfig+0xf0>
 8002482:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002484:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800248a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002492:	2a01      	cmp	r2, #1
 8002494:	d101      	bne.n	800249a <ETH_SetMACConfig+0x106>
 8002496:	2208      	movs	r2, #8
 8002498:	e000      	b.n	800249c <ETH_SetMACConfig+0x108>
 800249a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800249c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024a4:	2a01      	cmp	r2, #1
 80024a6:	d101      	bne.n	80024ac <ETH_SetMACConfig+0x118>
 80024a8:	2204      	movs	r2, #4
 80024aa:	e000      	b.n	80024ae <ETH_SetMACConfig+0x11a>
 80024ac:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024ae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80024b6:	2a01      	cmp	r2, #1
 80024b8:	d101      	bne.n	80024be <ETH_SetMACConfig+0x12a>
 80024ba:	2202      	movs	r2, #2
 80024bc:	e000      	b.n	80024c0 <ETH_SetMACConfig+0x12c>
 80024be:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024c0:	4313      	orrs	r3, r2
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024d8:	2001      	movs	r0, #1
 80024da:	f7ff fdd3 	bl	8002084 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	ff20810f 	.word	0xff20810f

080024f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	4b3d      	ldr	r3, [pc, #244]	; (8002604 <ETH_SetDMAConfig+0x110>)
 800250e:	4013      	ands	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	7b1b      	ldrb	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d102      	bne.n	8002520 <ETH_SetDMAConfig+0x2c>
 800251a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800251e:	e000      	b.n	8002522 <ETH_SetDMAConfig+0x2e>
 8002520:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	7b5b      	ldrb	r3, [r3, #13]
 8002526:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002528:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	7f52      	ldrb	r2, [r2, #29]
 800252e:	2a00      	cmp	r2, #0
 8002530:	d102      	bne.n	8002538 <ETH_SetDMAConfig+0x44>
 8002532:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002536:	e000      	b.n	800253a <ETH_SetDMAConfig+0x46>
 8002538:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800253a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	7b9b      	ldrb	r3, [r3, #14]
 8002540:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002542:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002548:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	7f1b      	ldrb	r3, [r3, #28]
 800254e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002550:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	7f9b      	ldrb	r3, [r3, #30]
 8002556:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002558:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800255e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002566:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002568:	4313      	orrs	r3, r2
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	4313      	orrs	r3, r2
 800256e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002578:	461a      	mov	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff fd7a 	bl	8002084 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002598:	461a      	mov	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	791b      	ldrb	r3, [r3, #4]
 80025a2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025a8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025ae:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025b4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025bc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025be:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025c6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025cc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6812      	ldr	r2, [r2, #0]
 80025d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025da:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f7ff fd4b 	bl	8002084 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f6:	461a      	mov	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6013      	str	r3, [r2, #0]
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	f8de3f23 	.word	0xf8de3f23

08002608 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b0a6      	sub	sp, #152	; 0x98
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002616:	2301      	movs	r3, #1
 8002618:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800261c:	2300      	movs	r3, #0
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002620:	2300      	movs	r3, #0
 8002622:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002626:	2301      	movs	r3, #1
 8002628:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800262c:	2300      	movs	r3, #0
 800262e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002632:	2301      	movs	r3, #1
 8002634:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002644:	2300      	movs	r3, #0
 8002646:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800264e:	2300      	movs	r3, #0
 8002650:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002652:	2300      	movs	r3, #0
 8002654:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002664:	2300      	movs	r3, #0
 8002666:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800266a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002674:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800267c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fe86 	bl	8002394 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002688:	2301      	movs	r3, #1
 800268a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800268c:	2301      	movs	r3, #1
 800268e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002690:	2301      	movs	r3, #1
 8002692:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002696:	2301      	movs	r3, #1
 8002698:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026aa:	2300      	movs	r3, #0
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026bc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026c2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026c8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026d8:	f107 0308 	add.w	r3, r7, #8
 80026dc:	4619      	mov	r1, r3
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff ff08 	bl	80024f4 <ETH_SetDMAConfig>
}
 80026e4:	bf00      	nop
 80026e6:	3798      	adds	r7, #152	; 0x98
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b087      	sub	sp, #28
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3305      	adds	r3, #5
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	3204      	adds	r2, #4
 8002704:	7812      	ldrb	r2, [r2, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <ETH_MACAddressConfig+0x68>)
 800270e:	4413      	add	r3, r2
 8002710:	461a      	mov	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3303      	adds	r3, #3
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	061a      	lsls	r2, r3, #24
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3302      	adds	r3, #2
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	041b      	lsls	r3, r3, #16
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3301      	adds	r3, #1
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	021b      	lsls	r3, r3, #8
 8002730:	4313      	orrs	r3, r2
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <ETH_MACAddressConfig+0x6c>)
 800273e:	4413      	add	r3, r2
 8002740:	461a      	mov	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	6013      	str	r3, [r2, #0]
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40028040 	.word	0x40028040
 8002758:	40028044 	.word	0x40028044

0800275c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e03e      	b.n	80027e8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68d9      	ldr	r1, [r3, #12]
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	440b      	add	r3, r1
 800277a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2200      	movs	r2, #0
 8002786:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2200      	movs	r2, #0
 800278c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2200      	movs	r2, #0
 8002792:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	3206      	adds	r2, #6
 800279c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d80c      	bhi.n	80027cc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68d9      	ldr	r1, [r3, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	e004      	b.n	80027d6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	461a      	mov	r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3301      	adds	r3, #1
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d9bd      	bls.n	800276a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002800:	611a      	str	r2, [r3, #16]
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800280e:	b480      	push	{r7}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	e046      	b.n	80028aa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6919      	ldr	r1, [r3, #16]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	440b      	add	r3, r1
 800282c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2200      	movs	r2, #0
 800284a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002858:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002860:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	3212      	adds	r2, #18
 8002876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d80c      	bhi.n	800289a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6919      	ldr	r1, [r3, #16]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	440b      	add	r3, r1
 8002892:	461a      	mov	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60da      	str	r2, [r3, #12]
 8002898:	e004      	b.n	80028a4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	461a      	mov	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	3301      	adds	r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d9b5      	bls.n	800281c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028da:	60da      	str	r2, [r3, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	e177      	b.n	8002bf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002904:	2201      	movs	r2, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	429a      	cmp	r2, r3
 800291e:	f040 8166 	bne.w	8002bee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b01      	cmp	r3, #1
 800292c:	d005      	beq.n	800293a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002936:	2b02      	cmp	r3, #2
 8002938:	d130      	bne.n	800299c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	2203      	movs	r2, #3
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002970:	2201      	movs	r2, #1
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 0201 	and.w	r2, r3, #1
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d017      	beq.n	80029d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0303 	and.w	r3, r3, #3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d123      	bne.n	8002a2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	08da      	lsrs	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3208      	adds	r2, #8
 80029ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	220f      	movs	r2, #15
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	08da      	lsrs	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3208      	adds	r2, #8
 8002a26:	69b9      	ldr	r1, [r7, #24]
 8002a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	2203      	movs	r2, #3
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0203 	and.w	r2, r3, #3
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80c0 	beq.w	8002bee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	4b66      	ldr	r3, [pc, #408]	; (8002c0c <HAL_GPIO_Init+0x324>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4a65      	ldr	r2, [pc, #404]	; (8002c0c <HAL_GPIO_Init+0x324>)
 8002a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_GPIO_Init+0x324>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a8a:	4a61      	ldr	r2, [pc, #388]	; (8002c10 <HAL_GPIO_Init+0x328>)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	220f      	movs	r2, #15
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_GPIO_Init+0x32c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d037      	beq.n	8002b26 <HAL_GPIO_Init+0x23e>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a57      	ldr	r2, [pc, #348]	; (8002c18 <HAL_GPIO_Init+0x330>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d031      	beq.n	8002b22 <HAL_GPIO_Init+0x23a>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a56      	ldr	r2, [pc, #344]	; (8002c1c <HAL_GPIO_Init+0x334>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d02b      	beq.n	8002b1e <HAL_GPIO_Init+0x236>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a55      	ldr	r2, [pc, #340]	; (8002c20 <HAL_GPIO_Init+0x338>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d025      	beq.n	8002b1a <HAL_GPIO_Init+0x232>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a54      	ldr	r2, [pc, #336]	; (8002c24 <HAL_GPIO_Init+0x33c>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d01f      	beq.n	8002b16 <HAL_GPIO_Init+0x22e>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a53      	ldr	r2, [pc, #332]	; (8002c28 <HAL_GPIO_Init+0x340>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d019      	beq.n	8002b12 <HAL_GPIO_Init+0x22a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a52      	ldr	r2, [pc, #328]	; (8002c2c <HAL_GPIO_Init+0x344>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <HAL_GPIO_Init+0x226>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a51      	ldr	r2, [pc, #324]	; (8002c30 <HAL_GPIO_Init+0x348>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d00d      	beq.n	8002b0a <HAL_GPIO_Init+0x222>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a50      	ldr	r2, [pc, #320]	; (8002c34 <HAL_GPIO_Init+0x34c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d007      	beq.n	8002b06 <HAL_GPIO_Init+0x21e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4f      	ldr	r2, [pc, #316]	; (8002c38 <HAL_GPIO_Init+0x350>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <HAL_GPIO_Init+0x21a>
 8002afe:	2309      	movs	r3, #9
 8002b00:	e012      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b02:	230a      	movs	r3, #10
 8002b04:	e010      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b06:	2308      	movs	r3, #8
 8002b08:	e00e      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b0a:	2307      	movs	r3, #7
 8002b0c:	e00c      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b0e:	2306      	movs	r3, #6
 8002b10:	e00a      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b12:	2305      	movs	r3, #5
 8002b14:	e008      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b16:	2304      	movs	r3, #4
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e004      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <HAL_GPIO_Init+0x240>
 8002b26:	2300      	movs	r3, #0
 8002b28:	69fa      	ldr	r2, [r7, #28]
 8002b2a:	f002 0203 	and.w	r2, r2, #3
 8002b2e:	0092      	lsls	r2, r2, #2
 8002b30:	4093      	lsls	r3, r2
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b38:	4935      	ldr	r1, [pc, #212]	; (8002c10 <HAL_GPIO_Init+0x328>)
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	089b      	lsrs	r3, r3, #2
 8002b3e:	3302      	adds	r3, #2
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b46:	4b3d      	ldr	r3, [pc, #244]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b6a:	4a34      	ldr	r2, [pc, #208]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b70:	4b32      	ldr	r3, [pc, #200]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b94:	4a29      	ldr	r2, [pc, #164]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b9a:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002be8:	4a14      	ldr	r2, [pc, #80]	; (8002c3c <HAL_GPIO_Init+0x354>)
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	61fb      	str	r3, [r7, #28]
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b0f      	cmp	r3, #15
 8002bf8:	f67f ae84 	bls.w	8002904 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40020000 	.word	0x40020000
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40020800 	.word	0x40020800
 8002c20:	40020c00 	.word	0x40020c00
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40021400 	.word	0x40021400
 8002c2c:	40021800 	.word	0x40021800
 8002c30:	40021c00 	.word	0x40021c00
 8002c34:	40022000 	.word	0x40022000
 8002c38:	40022400 	.word	0x40022400
 8002c3c:	40013c00 	.word	0x40013c00

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c5c:	e003      	b.n	8002c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c74:	b08f      	sub	sp, #60	; 0x3c
 8002c76:	af0a      	add	r7, sp, #40	; 0x28
 8002c78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e10f      	b.n	8002ea4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff f8aa 	bl	8001df8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 f8ad 	bl	8003e22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	687e      	ldr	r6, [r7, #4]
 8002cd0:	466d      	mov	r5, sp
 8002cd2:	f106 0410 	add.w	r4, r6, #16
 8002cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ce2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ce6:	1d33      	adds	r3, r6, #4
 8002ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cea:	6838      	ldr	r0, [r7, #0]
 8002cec:	f001 f838 	bl	8003d60 <USB_CoreInit>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0d0      	b.n	8002ea4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 f89b 	bl	8003e44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e04a      	b.n	8002daa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	333d      	adds	r3, #61	; 0x3d
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	333c      	adds	r3, #60	; 0x3c
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	b298      	uxth	r0, r3
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3344      	adds	r3, #68	; 0x44
 8002d50:	4602      	mov	r2, r0
 8002d52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3340      	adds	r3, #64	; 0x40
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3348      	adds	r3, #72	; 0x48
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	334c      	adds	r3, #76	; 0x4c
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3354      	adds	r3, #84	; 0x54
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	3301      	adds	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d3af      	bcc.n	8002d14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e044      	b.n	8002e44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e12:	7bfa      	ldrb	r2, [r7, #15]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	3301      	adds	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3b5      	bcc.n	8002dba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	687e      	ldr	r6, [r7, #4]
 8002e56:	466d      	mov	r5, sp
 8002e58:	f106 0410 	add.w	r4, r6, #16
 8002e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e68:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e6c:	1d33      	adds	r3, r6, #4
 8002e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e70:	6838      	ldr	r0, [r7, #0]
 8002e72:	f001 f833 	bl	8003edc <USB_DevInit>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e00d      	b.n	8002ea4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 f9fe 	bl	800429e <USB_DevDisconnect>

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e267      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d075      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eca:	4b88      	ldr	r3, [pc, #544]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ed6:	4b85      	ldr	r3, [pc, #532]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d112      	bne.n	8002f08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee2:	4b82      	ldr	r3, [pc, #520]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eee:	d10b      	bne.n	8002f08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef0:	4b7e      	ldr	r3, [pc, #504]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d05b      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x108>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d157      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e242      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f10:	d106      	bne.n	8002f20 <HAL_RCC_OscConfig+0x74>
 8002f12:	4b76      	ldr	r3, [pc, #472]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a75      	ldr	r2, [pc, #468]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e01d      	b.n	8002f5c <HAL_RCC_OscConfig+0xb0>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x98>
 8002f2a:	4b70      	ldr	r3, [pc, #448]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a6f      	ldr	r2, [pc, #444]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b6d      	ldr	r3, [pc, #436]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6c      	ldr	r2, [pc, #432]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e00b      	b.n	8002f5c <HAL_RCC_OscConfig+0xb0>
 8002f44:	4b69      	ldr	r3, [pc, #420]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a68      	ldr	r2, [pc, #416]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4e:	6013      	str	r3, [r2, #0]
 8002f50:	4b66      	ldr	r3, [pc, #408]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a65      	ldr	r2, [pc, #404]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d013      	beq.n	8002f8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7ff f882 	bl	800206c <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f6c:	f7ff f87e 	bl	800206c <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b64      	cmp	r3, #100	; 0x64
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e207      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	4b5b      	ldr	r3, [pc, #364]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0xc0>
 8002f8a:	e014      	b.n	8002fb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8c:	f7ff f86e 	bl	800206c <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f94:	f7ff f86a 	bl	800206c <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b64      	cmp	r3, #100	; 0x64
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e1f3      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	4b51      	ldr	r3, [pc, #324]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0xe8>
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d063      	beq.n	800308a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fc2:	4b4a      	ldr	r3, [pc, #296]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00b      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fce:	4b47      	ldr	r3, [pc, #284]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d11c      	bne.n	8003014 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fda:	4b44      	ldr	r3, [pc, #272]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d116      	bne.n	8003014 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe6:	4b41      	ldr	r3, [pc, #260]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d005      	beq.n	8002ffe <HAL_RCC_OscConfig+0x152>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e1c7      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4937      	ldr	r1, [pc, #220]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003012:	e03a      	b.n	800308a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800301c:	4b34      	ldr	r3, [pc, #208]	; (80030f0 <HAL_RCC_OscConfig+0x244>)
 800301e:	2201      	movs	r2, #1
 8003020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7ff f823 	bl	800206c <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800302a:	f7ff f81f 	bl	800206c <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e1a8      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	4b2b      	ldr	r3, [pc, #172]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4925      	ldr	r1, [pc, #148]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	e015      	b.n	800308a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b24      	ldr	r3, [pc, #144]	; (80030f0 <HAL_RCC_OscConfig+0x244>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7ff f802 	bl	800206c <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800306c:	f7fe fffe 	bl	800206c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e187      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	4b1b      	ldr	r3, [pc, #108]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d036      	beq.n	8003104 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	695b      	ldr	r3, [r3, #20]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d016      	beq.n	80030cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800309e:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <HAL_RCC_OscConfig+0x248>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a4:	f7fe ffe2 	bl	800206c <HAL_GetTick>
 80030a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fe ffde 	bl	800206c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e167      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	4b0b      	ldr	r3, [pc, #44]	; (80030ec <HAL_RCC_OscConfig+0x240>)
 80030c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x200>
 80030ca:	e01b      	b.n	8003104 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030cc:	4b09      	ldr	r3, [pc, #36]	; (80030f4 <HAL_RCC_OscConfig+0x248>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d2:	f7fe ffcb 	bl	800206c <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030d8:	e00e      	b.n	80030f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030da:	f7fe ffc7 	bl	800206c <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d907      	bls.n	80030f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e150      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
 80030ec:	40023800 	.word	0x40023800
 80030f0:	42470000 	.word	0x42470000
 80030f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f8:	4b88      	ldr	r3, [pc, #544]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80030fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ea      	bne.n	80030da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8097 	beq.w	8003240 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003116:	4b81      	ldr	r3, [pc, #516]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d10f      	bne.n	8003142 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	4b7d      	ldr	r3, [pc, #500]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	4a7c      	ldr	r2, [pc, #496]	; (800331c <HAL_RCC_OscConfig+0x470>)
 800312c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003130:	6413      	str	r3, [r2, #64]	; 0x40
 8003132:	4b7a      	ldr	r3, [pc, #488]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800313e:	2301      	movs	r3, #1
 8003140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003142:	4b77      	ldr	r3, [pc, #476]	; (8003320 <HAL_RCC_OscConfig+0x474>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d118      	bne.n	8003180 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800314e:	4b74      	ldr	r3, [pc, #464]	; (8003320 <HAL_RCC_OscConfig+0x474>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a73      	ldr	r2, [pc, #460]	; (8003320 <HAL_RCC_OscConfig+0x474>)
 8003154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800315a:	f7fe ff87 	bl	800206c <HAL_GetTick>
 800315e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	e008      	b.n	8003174 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003162:	f7fe ff83 	bl	800206c <HAL_GetTick>
 8003166:	4602      	mov	r2, r0
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	2b02      	cmp	r3, #2
 800316e:	d901      	bls.n	8003174 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e10c      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003174:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <HAL_RCC_OscConfig+0x474>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0f0      	beq.n	8003162 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d106      	bne.n	8003196 <HAL_RCC_OscConfig+0x2ea>
 8003188:	4b64      	ldr	r3, [pc, #400]	; (800331c <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318c:	4a63      	ldr	r2, [pc, #396]	; (800331c <HAL_RCC_OscConfig+0x470>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	; 0x70
 8003194:	e01c      	b.n	80031d0 <HAL_RCC_OscConfig+0x324>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b05      	cmp	r3, #5
 800319c:	d10c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x30c>
 800319e:	4b5f      	ldr	r3, [pc, #380]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a2:	4a5e      	ldr	r2, [pc, #376]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031a4:	f043 0304 	orr.w	r3, r3, #4
 80031a8:	6713      	str	r3, [r2, #112]	; 0x70
 80031aa:	4b5c      	ldr	r3, [pc, #368]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	4a5b      	ldr	r2, [pc, #364]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6713      	str	r3, [r2, #112]	; 0x70
 80031b6:	e00b      	b.n	80031d0 <HAL_RCC_OscConfig+0x324>
 80031b8:	4b58      	ldr	r3, [pc, #352]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	4a57      	ldr	r2, [pc, #348]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031be:	f023 0301 	bic.w	r3, r3, #1
 80031c2:	6713      	str	r3, [r2, #112]	; 0x70
 80031c4:	4b55      	ldr	r3, [pc, #340]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c8:	4a54      	ldr	r2, [pc, #336]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031ca:	f023 0304 	bic.w	r3, r3, #4
 80031ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe ff48 	bl	800206c <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fe ff44 	bl	800206c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0cb      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f6:	4b49      	ldr	r3, [pc, #292]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d0ee      	beq.n	80031e0 <HAL_RCC_OscConfig+0x334>
 8003202:	e014      	b.n	800322e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003204:	f7fe ff32 	bl	800206c <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fe ff2e 	bl	800206c <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e0b5      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003222:	4b3e      	ldr	r3, [pc, #248]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1ee      	bne.n	800320c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d105      	bne.n	8003240 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003234:	4b39      	ldr	r3, [pc, #228]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	4a38      	ldr	r2, [pc, #224]	; (800331c <HAL_RCC_OscConfig+0x470>)
 800323a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800323e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	f000 80a1 	beq.w	800338c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800324a:	4b34      	ldr	r3, [pc, #208]	; (800331c <HAL_RCC_OscConfig+0x470>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b08      	cmp	r3, #8
 8003254:	d05c      	beq.n	8003310 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d141      	bne.n	80032e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_RCC_OscConfig+0x478>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe ff02 	bl	800206c <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326c:	f7fe fefe 	bl	800206c <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e087      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	4b27      	ldr	r3, [pc, #156]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1f0      	bne.n	800326c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69da      	ldr	r2, [r3, #28]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	019b      	lsls	r3, r3, #6
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	085b      	lsrs	r3, r3, #1
 80032a2:	3b01      	subs	r3, #1
 80032a4:	041b      	lsls	r3, r3, #16
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	061b      	lsls	r3, r3, #24
 80032ae:	491b      	ldr	r1, [pc, #108]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b4:	4b1b      	ldr	r3, [pc, #108]	; (8003324 <HAL_RCC_OscConfig+0x478>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fe fed7 	bl	800206c <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fe fed3 	bl	800206c <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e05c      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d4:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_RCC_OscConfig+0x470>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x416>
 80032e0:	e054      	b.n	800338c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e2:	4b10      	ldr	r3, [pc, #64]	; (8003324 <HAL_RCC_OscConfig+0x478>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7fe fec0 	bl	800206c <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fe febc 	bl	800206c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e045      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003302:	4b06      	ldr	r3, [pc, #24]	; (800331c <HAL_RCC_OscConfig+0x470>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x444>
 800330e:	e03d      	b.n	800338c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d107      	bne.n	8003328 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e038      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
 800331c:	40023800 	.word	0x40023800
 8003320:	40007000 	.word	0x40007000
 8003324:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003328:	4b1b      	ldr	r3, [pc, #108]	; (8003398 <HAL_RCC_OscConfig+0x4ec>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d028      	beq.n	8003388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003340:	429a      	cmp	r2, r3
 8003342:	d121      	bne.n	8003388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d11a      	bne.n	8003388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003358:	4013      	ands	r3, r2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800335e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003360:	4293      	cmp	r3, r2
 8003362:	d111      	bne.n	8003388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	3b01      	subs	r3, #1
 8003372:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d107      	bne.n	8003388 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003382:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e000      	b.n	800338e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800

0800339c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e0cc      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b68      	ldr	r3, [pc, #416]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d90c      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b65      	ldr	r3, [pc, #404]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b63      	ldr	r3, [pc, #396]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 030f 	and.w	r3, r3, #15
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0b8      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d020      	beq.n	8003426 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033f0:	4b59      	ldr	r3, [pc, #356]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a58      	ldr	r2, [pc, #352]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003408:	4b53      	ldr	r3, [pc, #332]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4a52      	ldr	r2, [pc, #328]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003412:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003414:	4b50      	ldr	r3, [pc, #320]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	494d      	ldr	r1, [pc, #308]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d044      	beq.n	80034bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d119      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e07f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d003      	beq.n	800345a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003456:	2b03      	cmp	r3, #3
 8003458:	d107      	bne.n	800346a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345a:	4b3f      	ldr	r3, [pc, #252]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e06f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346a:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e067      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347a:	4b37      	ldr	r3, [pc, #220]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f023 0203 	bic.w	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4934      	ldr	r1, [pc, #208]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	4313      	orrs	r3, r2
 800348a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800348c:	f7fe fdee 	bl	800206c <HAL_GetTick>
 8003490:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	e00a      	b.n	80034aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003494:	f7fe fdea 	bl	800206c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e04f      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 020c 	and.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d1eb      	bne.n	8003494 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034bc:	4b25      	ldr	r3, [pc, #148]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d20c      	bcs.n	80034e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ca:	4b22      	ldr	r3, [pc, #136]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <HAL_RCC_ClockConfig+0x1b8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	429a      	cmp	r2, r3
 80034de:	d001      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e032      	b.n	800354a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	4916      	ldr	r1, [pc, #88]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d009      	beq.n	8003522 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	691b      	ldr	r3, [r3, #16]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	490e      	ldr	r1, [pc, #56]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	4313      	orrs	r3, r2
 8003520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003522:	f000 f821 	bl	8003568 <HAL_RCC_GetSysClockFreq>
 8003526:	4602      	mov	r2, r0
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	091b      	lsrs	r3, r3, #4
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	490a      	ldr	r1, [pc, #40]	; (800355c <HAL_RCC_ClockConfig+0x1c0>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	4a09      	ldr	r2, [pc, #36]	; (8003560 <HAL_RCC_ClockConfig+0x1c4>)
 800353c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800353e:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fd4e 	bl	8001fe4 <HAL_InitTick>

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023c00 	.word	0x40023c00
 8003558:	40023800 	.word	0x40023800
 800355c:	080044d4 	.word	0x080044d4
 8003560:	20000000 	.word	0x20000000
 8003564:	20000004 	.word	0x20000004

08003568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800356c:	b094      	sub	sp, #80	; 0x50
 800356e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003570:	2300      	movs	r3, #0
 8003572:	647b      	str	r3, [r7, #68]	; 0x44
 8003574:	2300      	movs	r3, #0
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003578:	2300      	movs	r3, #0
 800357a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003580:	4b79      	ldr	r3, [pc, #484]	; (8003768 <HAL_RCC_GetSysClockFreq+0x200>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 030c 	and.w	r3, r3, #12
 8003588:	2b08      	cmp	r3, #8
 800358a:	d00d      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x40>
 800358c:	2b08      	cmp	r3, #8
 800358e:	f200 80e1 	bhi.w	8003754 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_RCC_GetSysClockFreq+0x34>
 8003596:	2b04      	cmp	r3, #4
 8003598:	d003      	beq.n	80035a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800359a:	e0db      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800359c:	4b73      	ldr	r3, [pc, #460]	; (800376c <HAL_RCC_GetSysClockFreq+0x204>)
 800359e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035a0:	e0db      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035a2:	4b73      	ldr	r3, [pc, #460]	; (8003770 <HAL_RCC_GetSysClockFreq+0x208>)
 80035a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035a6:	e0d8      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035a8:	4b6f      	ldr	r3, [pc, #444]	; (8003768 <HAL_RCC_GetSysClockFreq+0x200>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035b2:	4b6d      	ldr	r3, [pc, #436]	; (8003768 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d063      	beq.n	8003686 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035be:	4b6a      	ldr	r3, [pc, #424]	; (8003768 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	099b      	lsrs	r3, r3, #6
 80035c4:	2200      	movs	r2, #0
 80035c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80035c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d0:	633b      	str	r3, [r7, #48]	; 0x30
 80035d2:	2300      	movs	r3, #0
 80035d4:	637b      	str	r3, [r7, #52]	; 0x34
 80035d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035da:	4622      	mov	r2, r4
 80035dc:	462b      	mov	r3, r5
 80035de:	f04f 0000 	mov.w	r0, #0
 80035e2:	f04f 0100 	mov.w	r1, #0
 80035e6:	0159      	lsls	r1, r3, #5
 80035e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035ec:	0150      	lsls	r0, r2, #5
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4621      	mov	r1, r4
 80035f4:	1a51      	subs	r1, r2, r1
 80035f6:	6139      	str	r1, [r7, #16]
 80035f8:	4629      	mov	r1, r5
 80035fa:	eb63 0301 	sbc.w	r3, r3, r1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800360c:	4659      	mov	r1, fp
 800360e:	018b      	lsls	r3, r1, #6
 8003610:	4651      	mov	r1, sl
 8003612:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003616:	4651      	mov	r1, sl
 8003618:	018a      	lsls	r2, r1, #6
 800361a:	4651      	mov	r1, sl
 800361c:	ebb2 0801 	subs.w	r8, r2, r1
 8003620:	4659      	mov	r1, fp
 8003622:	eb63 0901 	sbc.w	r9, r3, r1
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800363a:	4690      	mov	r8, r2
 800363c:	4699      	mov	r9, r3
 800363e:	4623      	mov	r3, r4
 8003640:	eb18 0303 	adds.w	r3, r8, r3
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	462b      	mov	r3, r5
 8003648:	eb49 0303 	adc.w	r3, r9, r3
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	f04f 0300 	mov.w	r3, #0
 8003656:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800365a:	4629      	mov	r1, r5
 800365c:	024b      	lsls	r3, r1, #9
 800365e:	4621      	mov	r1, r4
 8003660:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003664:	4621      	mov	r1, r4
 8003666:	024a      	lsls	r2, r1, #9
 8003668:	4610      	mov	r0, r2
 800366a:	4619      	mov	r1, r3
 800366c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800366e:	2200      	movs	r2, #0
 8003670:	62bb      	str	r3, [r7, #40]	; 0x28
 8003672:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003674:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003678:	f7fc fe94 	bl	80003a4 <__aeabi_uldivmod>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4613      	mov	r3, r2
 8003682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003684:	e058      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003686:	4b38      	ldr	r3, [pc, #224]	; (8003768 <HAL_RCC_GetSysClockFreq+0x200>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	099b      	lsrs	r3, r3, #6
 800368c:	2200      	movs	r2, #0
 800368e:	4618      	mov	r0, r3
 8003690:	4611      	mov	r1, r2
 8003692:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003696:	623b      	str	r3, [r7, #32]
 8003698:	2300      	movs	r3, #0
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
 800369c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036a0:	4642      	mov	r2, r8
 80036a2:	464b      	mov	r3, r9
 80036a4:	f04f 0000 	mov.w	r0, #0
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	0159      	lsls	r1, r3, #5
 80036ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b2:	0150      	lsls	r0, r2, #5
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4641      	mov	r1, r8
 80036ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80036be:	4649      	mov	r1, r9
 80036c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036d8:	ebb2 040a 	subs.w	r4, r2, sl
 80036dc:	eb63 050b 	sbc.w	r5, r3, fp
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	00eb      	lsls	r3, r5, #3
 80036ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ee:	00e2      	lsls	r2, r4, #3
 80036f0:	4614      	mov	r4, r2
 80036f2:	461d      	mov	r5, r3
 80036f4:	4643      	mov	r3, r8
 80036f6:	18e3      	adds	r3, r4, r3
 80036f8:	603b      	str	r3, [r7, #0]
 80036fa:	464b      	mov	r3, r9
 80036fc:	eb45 0303 	adc.w	r3, r5, r3
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800370e:	4629      	mov	r1, r5
 8003710:	028b      	lsls	r3, r1, #10
 8003712:	4621      	mov	r1, r4
 8003714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003718:	4621      	mov	r1, r4
 800371a:	028a      	lsls	r2, r1, #10
 800371c:	4610      	mov	r0, r2
 800371e:	4619      	mov	r1, r3
 8003720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003722:	2200      	movs	r2, #0
 8003724:	61bb      	str	r3, [r7, #24]
 8003726:	61fa      	str	r2, [r7, #28]
 8003728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800372c:	f7fc fe3a 	bl	80003a4 <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4613      	mov	r3, r2
 8003736:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <HAL_RCC_GetSysClockFreq+0x200>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	3301      	adds	r3, #1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003748:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800374a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800374c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003750:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003752:	e002      	b.n	800375a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003754:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetSysClockFreq+0x204>)
 8003756:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800375c:	4618      	mov	r0, r3
 800375e:	3750      	adds	r7, #80	; 0x50
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003766:	bf00      	nop
 8003768:	40023800 	.word	0x40023800
 800376c:	00f42400 	.word	0x00f42400
 8003770:	007a1200 	.word	0x007a1200

08003774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_RCC_GetHCLKFreq+0x14>)
 800377a:	681b      	ldr	r3, [r3, #0]
}
 800377c:	4618      	mov	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000000 	.word	0x20000000

0800378c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003790:	f7ff fff0 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0a9b      	lsrs	r3, r3, #10
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	080044e4 	.word	0x080044e4

080037b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037b8:	f7ff ffdc 	bl	8003774 <HAL_RCC_GetHCLKFreq>
 80037bc:	4602      	mov	r2, r0
 80037be:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	0b5b      	lsrs	r3, r3, #13
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	4903      	ldr	r1, [pc, #12]	; (80037d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037ca:	5ccb      	ldrb	r3, [r1, r3]
 80037cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	40023800 	.word	0x40023800
 80037d8:	080044e4 	.word	0x080044e4

080037dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e03f      	b.n	800386e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fe fab0 	bl	8001d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2224      	movs	r2, #36	; 0x24
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800381e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f829 	bl	8003878 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	691a      	ldr	r2, [r3, #16]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003834:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003844:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003854:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800387c:	b0c0      	sub	sp, #256	; 0x100
 800387e:	af00      	add	r7, sp, #0
 8003880:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003894:	68d9      	ldr	r1, [r3, #12]
 8003896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	ea40 0301 	orr.w	r3, r0, r1
 80038a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	4313      	orrs	r3, r2
 80038c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038d0:	f021 010c 	bic.w	r1, r1, #12
 80038d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038de:	430b      	orrs	r3, r1
 80038e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f2:	6999      	ldr	r1, [r3, #24]
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	ea40 0301 	orr.w	r3, r0, r1
 80038fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	4b8f      	ldr	r3, [pc, #572]	; (8003b44 <UART_SetConfig+0x2cc>)
 8003908:	429a      	cmp	r2, r3
 800390a:	d005      	beq.n	8003918 <UART_SetConfig+0xa0>
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	4b8d      	ldr	r3, [pc, #564]	; (8003b48 <UART_SetConfig+0x2d0>)
 8003914:	429a      	cmp	r2, r3
 8003916:	d104      	bne.n	8003922 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003918:	f7ff ff4c 	bl	80037b4 <HAL_RCC_GetPCLK2Freq>
 800391c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003920:	e003      	b.n	800392a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003922:	f7ff ff33 	bl	800378c <HAL_RCC_GetPCLK1Freq>
 8003926:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800392a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800392e:	69db      	ldr	r3, [r3, #28]
 8003930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003934:	f040 810c 	bne.w	8003b50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800393c:	2200      	movs	r2, #0
 800393e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003942:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003946:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800394a:	4622      	mov	r2, r4
 800394c:	462b      	mov	r3, r5
 800394e:	1891      	adds	r1, r2, r2
 8003950:	65b9      	str	r1, [r7, #88]	; 0x58
 8003952:	415b      	adcs	r3, r3
 8003954:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003956:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800395a:	4621      	mov	r1, r4
 800395c:	eb12 0801 	adds.w	r8, r2, r1
 8003960:	4629      	mov	r1, r5
 8003962:	eb43 0901 	adc.w	r9, r3, r1
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	f04f 0300 	mov.w	r3, #0
 800396e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800397a:	4690      	mov	r8, r2
 800397c:	4699      	mov	r9, r3
 800397e:	4623      	mov	r3, r4
 8003980:	eb18 0303 	adds.w	r3, r8, r3
 8003984:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003988:	462b      	mov	r3, r5
 800398a:	eb49 0303 	adc.w	r3, r9, r3
 800398e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800399e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039a6:	460b      	mov	r3, r1
 80039a8:	18db      	adds	r3, r3, r3
 80039aa:	653b      	str	r3, [r7, #80]	; 0x50
 80039ac:	4613      	mov	r3, r2
 80039ae:	eb42 0303 	adc.w	r3, r2, r3
 80039b2:	657b      	str	r3, [r7, #84]	; 0x54
 80039b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039bc:	f7fc fcf2 	bl	80003a4 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4b61      	ldr	r3, [pc, #388]	; (8003b4c <UART_SetConfig+0x2d4>)
 80039c6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	011c      	lsls	r4, r3, #4
 80039ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039e0:	4642      	mov	r2, r8
 80039e2:	464b      	mov	r3, r9
 80039e4:	1891      	adds	r1, r2, r2
 80039e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80039e8:	415b      	adcs	r3, r3
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039f0:	4641      	mov	r1, r8
 80039f2:	eb12 0a01 	adds.w	sl, r2, r1
 80039f6:	4649      	mov	r1, r9
 80039f8:	eb43 0b01 	adc.w	fp, r3, r1
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	f04f 0300 	mov.w	r3, #0
 8003a04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a10:	4692      	mov	sl, r2
 8003a12:	469b      	mov	fp, r3
 8003a14:	4643      	mov	r3, r8
 8003a16:	eb1a 0303 	adds.w	r3, sl, r3
 8003a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a1e:	464b      	mov	r3, r9
 8003a20:	eb4b 0303 	adc.w	r3, fp, r3
 8003a24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	18db      	adds	r3, r3, r3
 8003a40:	643b      	str	r3, [r7, #64]	; 0x40
 8003a42:	4613      	mov	r3, r2
 8003a44:	eb42 0303 	adc.w	r3, r2, r3
 8003a48:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a52:	f7fc fca7 	bl	80003a4 <__aeabi_uldivmod>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <UART_SetConfig+0x2d4>)
 8003a5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a62:	095b      	lsrs	r3, r3, #5
 8003a64:	2264      	movs	r2, #100	; 0x64
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	1acb      	subs	r3, r1, r3
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <UART_SetConfig+0x2d4>)
 8003a74:	fba3 2302 	umull	r2, r3, r3, r2
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a80:	441c      	add	r4, r3
 8003a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a94:	4642      	mov	r2, r8
 8003a96:	464b      	mov	r3, r9
 8003a98:	1891      	adds	r1, r2, r2
 8003a9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a9c:	415b      	adcs	r3, r3
 8003a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003aa4:	4641      	mov	r1, r8
 8003aa6:	1851      	adds	r1, r2, r1
 8003aa8:	6339      	str	r1, [r7, #48]	; 0x30
 8003aaa:	4649      	mov	r1, r9
 8003aac:	414b      	adcs	r3, r1
 8003aae:	637b      	str	r3, [r7, #52]	; 0x34
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003abc:	4659      	mov	r1, fp
 8003abe:	00cb      	lsls	r3, r1, #3
 8003ac0:	4651      	mov	r1, sl
 8003ac2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ac6:	4651      	mov	r1, sl
 8003ac8:	00ca      	lsls	r2, r1, #3
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	189b      	adds	r3, r3, r2
 8003ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ad8:	464b      	mov	r3, r9
 8003ada:	460a      	mov	r2, r1
 8003adc:	eb42 0303 	adc.w	r3, r2, r3
 8003ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003af0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003af4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003af8:	460b      	mov	r3, r1
 8003afa:	18db      	adds	r3, r3, r3
 8003afc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003afe:	4613      	mov	r3, r2
 8003b00:	eb42 0303 	adc.w	r3, r2, r3
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b0e:	f7fc fc49 	bl	80003a4 <__aeabi_uldivmod>
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4b0d      	ldr	r3, [pc, #52]	; (8003b4c <UART_SetConfig+0x2d4>)
 8003b18:	fba3 1302 	umull	r1, r3, r3, r2
 8003b1c:	095b      	lsrs	r3, r3, #5
 8003b1e:	2164      	movs	r1, #100	; 0x64
 8003b20:	fb01 f303 	mul.w	r3, r1, r3
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	3332      	adds	r3, #50	; 0x32
 8003b2a:	4a08      	ldr	r2, [pc, #32]	; (8003b4c <UART_SetConfig+0x2d4>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	f003 0207 	and.w	r2, r3, #7
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4422      	add	r2, r4
 8003b3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b40:	e105      	b.n	8003d4e <UART_SetConfig+0x4d6>
 8003b42:	bf00      	nop
 8003b44:	40011000 	.word	0x40011000
 8003b48:	40011400 	.word	0x40011400
 8003b4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b62:	4642      	mov	r2, r8
 8003b64:	464b      	mov	r3, r9
 8003b66:	1891      	adds	r1, r2, r2
 8003b68:	6239      	str	r1, [r7, #32]
 8003b6a:	415b      	adcs	r3, r3
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b72:	4641      	mov	r1, r8
 8003b74:	1854      	adds	r4, r2, r1
 8003b76:	4649      	mov	r1, r9
 8003b78:	eb43 0501 	adc.w	r5, r3, r1
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	00eb      	lsls	r3, r5, #3
 8003b86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b8a:	00e2      	lsls	r2, r4, #3
 8003b8c:	4614      	mov	r4, r2
 8003b8e:	461d      	mov	r5, r3
 8003b90:	4643      	mov	r3, r8
 8003b92:	18e3      	adds	r3, r4, r3
 8003b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b98:	464b      	mov	r3, r9
 8003b9a:	eb45 0303 	adc.w	r3, r5, r3
 8003b9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	008b      	lsls	r3, r1, #2
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bc8:	4621      	mov	r1, r4
 8003bca:	008a      	lsls	r2, r1, #2
 8003bcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bd0:	f7fc fbe8 	bl	80003a4 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4b60      	ldr	r3, [pc, #384]	; (8003d5c <UART_SetConfig+0x4e4>)
 8003bda:	fba3 2302 	umull	r2, r3, r3, r2
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	011c      	lsls	r4, r3, #4
 8003be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bf0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	1891      	adds	r1, r2, r2
 8003bfa:	61b9      	str	r1, [r7, #24]
 8003bfc:	415b      	adcs	r3, r3
 8003bfe:	61fb      	str	r3, [r7, #28]
 8003c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c04:	4641      	mov	r1, r8
 8003c06:	1851      	adds	r1, r2, r1
 8003c08:	6139      	str	r1, [r7, #16]
 8003c0a:	4649      	mov	r1, r9
 8003c0c:	414b      	adcs	r3, r1
 8003c0e:	617b      	str	r3, [r7, #20]
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c1c:	4659      	mov	r1, fp
 8003c1e:	00cb      	lsls	r3, r1, #3
 8003c20:	4651      	mov	r1, sl
 8003c22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c26:	4651      	mov	r1, sl
 8003c28:	00ca      	lsls	r2, r1, #3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4642      	mov	r2, r8
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c38:	464b      	mov	r3, r9
 8003c3a:	460a      	mov	r2, r1
 8003c3c:	eb42 0303 	adc.w	r3, r2, r3
 8003c40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c4e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c5c:	4649      	mov	r1, r9
 8003c5e:	008b      	lsls	r3, r1, #2
 8003c60:	4641      	mov	r1, r8
 8003c62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c66:	4641      	mov	r1, r8
 8003c68:	008a      	lsls	r2, r1, #2
 8003c6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c6e:	f7fc fb99 	bl	80003a4 <__aeabi_uldivmod>
 8003c72:	4602      	mov	r2, r0
 8003c74:	460b      	mov	r3, r1
 8003c76:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <UART_SetConfig+0x4e4>)
 8003c78:	fba3 1302 	umull	r1, r3, r3, r2
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	2164      	movs	r1, #100	; 0x64
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	3332      	adds	r3, #50	; 0x32
 8003c8a:	4a34      	ldr	r2, [pc, #208]	; (8003d5c <UART_SetConfig+0x4e4>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c96:	441c      	add	r4, r3
 8003c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	673b      	str	r3, [r7, #112]	; 0x70
 8003ca0:	677a      	str	r2, [r7, #116]	; 0x74
 8003ca2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ca6:	4642      	mov	r2, r8
 8003ca8:	464b      	mov	r3, r9
 8003caa:	1891      	adds	r1, r2, r2
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	415b      	adcs	r3, r3
 8003cb0:	60fb      	str	r3, [r7, #12]
 8003cb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cb6:	4641      	mov	r1, r8
 8003cb8:	1851      	adds	r1, r2, r1
 8003cba:	6039      	str	r1, [r7, #0]
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	414b      	adcs	r3, r1
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cce:	4659      	mov	r1, fp
 8003cd0:	00cb      	lsls	r3, r1, #3
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cd8:	4651      	mov	r1, sl
 8003cda:	00ca      	lsls	r2, r1, #3
 8003cdc:	4610      	mov	r0, r2
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4642      	mov	r2, r8
 8003ce4:	189b      	adds	r3, r3, r2
 8003ce6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ce8:	464b      	mov	r3, r9
 8003cea:	460a      	mov	r2, r1
 8003cec:	eb42 0303 	adc.w	r3, r2, r3
 8003cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	663b      	str	r3, [r7, #96]	; 0x60
 8003cfc:	667a      	str	r2, [r7, #100]	; 0x64
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d0a:	4649      	mov	r1, r9
 8003d0c:	008b      	lsls	r3, r1, #2
 8003d0e:	4641      	mov	r1, r8
 8003d10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d14:	4641      	mov	r1, r8
 8003d16:	008a      	lsls	r2, r1, #2
 8003d18:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d1c:	f7fc fb42 	bl	80003a4 <__aeabi_uldivmod>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4b0d      	ldr	r3, [pc, #52]	; (8003d5c <UART_SetConfig+0x4e4>)
 8003d26:	fba3 1302 	umull	r1, r3, r3, r2
 8003d2a:	095b      	lsrs	r3, r3, #5
 8003d2c:	2164      	movs	r1, #100	; 0x64
 8003d2e:	fb01 f303 	mul.w	r3, r1, r3
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	011b      	lsls	r3, r3, #4
 8003d36:	3332      	adds	r3, #50	; 0x32
 8003d38:	4a08      	ldr	r2, [pc, #32]	; (8003d5c <UART_SetConfig+0x4e4>)
 8003d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3e:	095b      	lsrs	r3, r3, #5
 8003d40:	f003 020f 	and.w	r2, r3, #15
 8003d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4422      	add	r2, r4
 8003d4c:	609a      	str	r2, [r3, #8]
}
 8003d4e:	bf00      	nop
 8003d50:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d54:	46bd      	mov	sp, r7
 8003d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d5a:	bf00      	nop
 8003d5c:	51eb851f 	.word	0x51eb851f

08003d60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d60:	b084      	sub	sp, #16
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b084      	sub	sp, #16
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
 8003d6a:	f107 001c 	add.w	r0, r7, #28
 8003d6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d122      	bne.n	8003dbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d105      	bne.n	8003db2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 faa2 	bl	80042fc <USB_CoreReset>
 8003db8:	4603      	mov	r3, r0
 8003dba:	73fb      	strb	r3, [r7, #15]
 8003dbc:	e01a      	b.n	8003df4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fa96 	bl	80042fc <USB_CoreReset>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d106      	bne.n	8003de8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38
 8003de6:	e005      	b.n	8003df4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d10b      	bne.n	8003e12 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f043 0206 	orr.w	r2, r3, #6
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f043 0220 	orr.w	r2, r3, #32
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e1e:	b004      	add	sp, #16
 8003e20:	4770      	bx	lr

08003e22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f023 0201 	bic.w	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d115      	bne.n	8003e92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e72:	2001      	movs	r0, #1
 8003e74:	f7fe f906 	bl	8002084 <HAL_Delay>
      ms++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fa2e 	bl	80042e0 <USB_GetMode>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d01e      	beq.n	8003ec8 <USB_SetCurrentMode+0x84>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2b31      	cmp	r3, #49	; 0x31
 8003e8e:	d9f0      	bls.n	8003e72 <USB_SetCurrentMode+0x2e>
 8003e90:	e01a      	b.n	8003ec8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d115      	bne.n	8003ec4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f7fe f8ed 	bl	8002084 <HAL_Delay>
      ms++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3301      	adds	r3, #1
 8003eae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fa15 	bl	80042e0 <USB_GetMode>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <USB_SetCurrentMode+0x84>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2b31      	cmp	r3, #49	; 0x31
 8003ec0:	d9f0      	bls.n	8003ea4 <USB_SetCurrentMode+0x60>
 8003ec2:	e001      	b.n	8003ec8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e005      	b.n	8003ed4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b32      	cmp	r3, #50	; 0x32
 8003ecc:	d101      	bne.n	8003ed2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003edc:	b084      	sub	sp, #16
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b086      	sub	sp, #24
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	e009      	b.n	8003f10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	3340      	adds	r3, #64	; 0x40
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4413      	add	r3, r2
 8003f06:	2200      	movs	r2, #0
 8003f08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	613b      	str	r3, [r7, #16]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	2b0e      	cmp	r3, #14
 8003f14:	d9f2      	bls.n	8003efc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d11c      	bne.n	8003f56 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f2a:	f043 0302 	orr.w	r3, r3, #2
 8003f2e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38
 8003f54:	e00b      	b.n	8003f6e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f74:	461a      	mov	r2, r3
 8003f76:	2300      	movs	r3, #0
 8003f78:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f80:	4619      	mov	r1, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f88:	461a      	mov	r2, r3
 8003f8a:	680b      	ldr	r3, [r1, #0]
 8003f8c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d10c      	bne.n	8003fae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d104      	bne.n	8003fa4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f965 	bl	800426c <USB_SetDevSpeed>
 8003fa2:	e008      	b.n	8003fb6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f960 	bl	800426c <USB_SetDevSpeed>
 8003fac:	e003      	b.n	8003fb6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fae:	2103      	movs	r1, #3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 f95b 	bl	800426c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fb6:	2110      	movs	r1, #16
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f8f3 	bl	80041a4 <USB_FlushTxFifo>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d001      	beq.n	8003fc8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f91f 	bl	800420c <USB_FlushRxFifo>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fea:	461a      	mov	r2, r3
 8003fec:	2300      	movs	r3, #0
 8003fee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e043      	b.n	800408a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004018:	d118      	bne.n	800404c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402c:	461a      	mov	r2, r3
 800402e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004032:	6013      	str	r3, [r2, #0]
 8004034:	e013      	b.n	800405e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4413      	add	r3, r2
 800403e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004042:	461a      	mov	r2, r3
 8004044:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004048:	6013      	str	r3, [r2, #0]
 800404a:	e008      	b.n	800405e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4413      	add	r3, r2
 8004054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004058:	461a      	mov	r2, r3
 800405a:	2300      	movs	r3, #0
 800405c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	015a      	lsls	r2, r3, #5
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4413      	add	r3, r2
 8004066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406a:	461a      	mov	r2, r3
 800406c:	2300      	movs	r3, #0
 800406e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4413      	add	r3, r2
 8004078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800407c:	461a      	mov	r2, r3
 800407e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004082:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	3301      	adds	r3, #1
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	429a      	cmp	r2, r3
 8004090:	d3b7      	bcc.n	8004002 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004092:	2300      	movs	r3, #0
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	e043      	b.n	8004120 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ae:	d118      	bne.n	80040e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c2:	461a      	mov	r2, r3
 80040c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e013      	b.n	80040f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d8:	461a      	mov	r2, r3
 80040da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	e008      	b.n	80040f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ee:	461a      	mov	r2, r3
 80040f0:	2300      	movs	r3, #0
 80040f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004100:	461a      	mov	r2, r3
 8004102:	2300      	movs	r3, #0
 8004104:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4413      	add	r3, r2
 800410e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004112:	461a      	mov	r2, r3
 8004114:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004118:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	3301      	adds	r3, #1
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	429a      	cmp	r2, r3
 8004126:	d3b7      	bcc.n	8004098 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800413a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004148:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414c:	2b00      	cmp	r3, #0
 800414e:	d105      	bne.n	800415c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f043 0210 	orr.w	r2, r3, #16
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	699a      	ldr	r2, [r3, #24]
 8004160:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <USB_DevInit+0x2c4>)
 8004162:	4313      	orrs	r3, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d005      	beq.n	800417a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	f043 0208 	orr.w	r2, r3, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800417a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800417c:	2b01      	cmp	r3, #1
 800417e:	d107      	bne.n	8004190 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004188:	f043 0304 	orr.w	r3, r3, #4
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004190:	7dfb      	ldrb	r3, [r7, #23]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800419c:	b004      	add	sp, #16
 800419e:	4770      	bx	lr
 80041a0:	803c3800 	.word	0x803c3800

080041a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3301      	adds	r3, #1
 80041b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4a13      	ldr	r2, [pc, #76]	; (8004208 <USB_FlushTxFifo+0x64>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d901      	bls.n	80041c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e01b      	b.n	80041fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	daf2      	bge.n	80041b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	019b      	lsls	r3, r3, #6
 80041d4:	f043 0220 	orr.w	r2, r3, #32
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	3301      	adds	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a08      	ldr	r2, [pc, #32]	; (8004208 <USB_FlushTxFifo+0x64>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d901      	bls.n	80041ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e006      	b.n	80041fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b20      	cmp	r3, #32
 80041f8:	d0f0      	beq.n	80041dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	00030d40 	.word	0x00030d40

0800420c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3301      	adds	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a11      	ldr	r2, [pc, #68]	; (8004268 <USB_FlushRxFifo+0x5c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e018      	b.n	800425c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	2b00      	cmp	r3, #0
 8004230:	daf2      	bge.n	8004218 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2210      	movs	r2, #16
 800423a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3301      	adds	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4a08      	ldr	r2, [pc, #32]	; (8004268 <USB_FlushRxFifo+0x5c>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d901      	bls.n	800424e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e006      	b.n	800425c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b10      	cmp	r3, #16
 8004258:	d0f0      	beq.n	800423c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3714      	adds	r7, #20
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr
 8004268:	00030d40 	.word	0x00030d40

0800426c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	78fb      	ldrb	r3, [r7, #3]
 8004286:	68f9      	ldr	r1, [r7, #12]
 8004288:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800428c:	4313      	orrs	r3, r2
 800428e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042b8:	f023 0303 	bic.w	r3, r3, #3
 80042bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f003 0301 	and.w	r3, r3, #1
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004304:	2300      	movs	r3, #0
 8004306:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	3301      	adds	r3, #1
 800430c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	4a13      	ldr	r2, [pc, #76]	; (8004360 <USB_CoreReset+0x64>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e01b      	b.n	8004352 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	daf2      	bge.n	8004308 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f043 0201 	orr.w	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3301      	adds	r3, #1
 8004336:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4a09      	ldr	r2, [pc, #36]	; (8004360 <USB_CoreReset+0x64>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d901      	bls.n	8004344 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e006      	b.n	8004352 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b01      	cmp	r3, #1
 800434e:	d0f0      	beq.n	8004332 <USB_CoreReset+0x36>

  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	00030d40 	.word	0x00030d40

08004364 <__libc_init_array>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4d0d      	ldr	r5, [pc, #52]	; (800439c <__libc_init_array+0x38>)
 8004368:	4c0d      	ldr	r4, [pc, #52]	; (80043a0 <__libc_init_array+0x3c>)
 800436a:	1b64      	subs	r4, r4, r5
 800436c:	10a4      	asrs	r4, r4, #2
 800436e:	2600      	movs	r6, #0
 8004370:	42a6      	cmp	r6, r4
 8004372:	d109      	bne.n	8004388 <__libc_init_array+0x24>
 8004374:	4d0b      	ldr	r5, [pc, #44]	; (80043a4 <__libc_init_array+0x40>)
 8004376:	4c0c      	ldr	r4, [pc, #48]	; (80043a8 <__libc_init_array+0x44>)
 8004378:	f000 f820 	bl	80043bc <_init>
 800437c:	1b64      	subs	r4, r4, r5
 800437e:	10a4      	asrs	r4, r4, #2
 8004380:	2600      	movs	r6, #0
 8004382:	42a6      	cmp	r6, r4
 8004384:	d105      	bne.n	8004392 <__libc_init_array+0x2e>
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	f855 3b04 	ldr.w	r3, [r5], #4
 800438c:	4798      	blx	r3
 800438e:	3601      	adds	r6, #1
 8004390:	e7ee      	b.n	8004370 <__libc_init_array+0xc>
 8004392:	f855 3b04 	ldr.w	r3, [r5], #4
 8004396:	4798      	blx	r3
 8004398:	3601      	adds	r6, #1
 800439a:	e7f2      	b.n	8004382 <__libc_init_array+0x1e>
 800439c:	080044f4 	.word	0x080044f4
 80043a0:	080044f4 	.word	0x080044f4
 80043a4:	080044f4 	.word	0x080044f4
 80043a8:	080044f8 	.word	0x080044f8

080043ac <memset>:
 80043ac:	4402      	add	r2, r0
 80043ae:	4603      	mov	r3, r0
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d100      	bne.n	80043b6 <memset+0xa>
 80043b4:	4770      	bx	lr
 80043b6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ba:	e7f9      	b.n	80043b0 <memset+0x4>

080043bc <_init>:
 80043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043be:	bf00      	nop
 80043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043c2:	bc08      	pop	{r3}
 80043c4:	469e      	mov	lr, r3
 80043c6:	4770      	bx	lr

080043c8 <_fini>:
 80043c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ca:	bf00      	nop
 80043cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ce:	bc08      	pop	{r3}
 80043d0:	469e      	mov	lr, r3
 80043d2:	4770      	bx	lr
