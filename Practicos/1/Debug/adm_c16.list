
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004240  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080043ec  080043ec  000143ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004504  08004504  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800450c  0800450c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004510  08004510  00014510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000d9ad  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000f78a  00000000  00000000  0002d9e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001dc9  00000000  00000000  0003d173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ba8  00000000  00000000  0003ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d9914  00000000  00000000  0003fae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000af0  00000000  00000000  00119400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023b2f  00000000  00000000  00119ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013da1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003134  00000000  00000000  0013da70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080043d4 	.word	0x080043d4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080043d4 	.word	0x080043d4

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f0:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f2:	4770      	bx	lr

080001f4 <asm_zeros>:
   r1: longitud (longitud)
*/

.thumb_func
	asm_zeros:
	    cbz r0, exit_1   			// Salto a la etiqueta exit si r0 es cero
 80001f4:	b130      	cbz	r0, 8000204 <exit_1>
	    cbz r1, exit_1   			// Salto a la etiqueta exit si r1 es cero
 80001f6:	b129      	cbz	r1, 8000204 <exit_1>
	    movs r3, #0    				// Carga el valor cero en el registro r3
 80001f8:	2300      	movs	r3, #0
	    mov r2, r1     				// Copia el valor de r1 en r2
 80001fa:	460a      	mov	r2, r1

080001fc <loop_1>:
	loop_1:
	    subs r2, #1    				// Decrementa el valor de r2 en uno
 80001fc:	3a01      	subs	r2, #1
	    str r3, [r0, r2, LSL #2]  	// Almacena el valor cero en la dirección de memoria calculada a partir de r0 y r2, multiplicada por cuatro debido a LSL #2
 80001fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	    bne loop_1     				// Salta al loop si r2 no es cero
 8000202:	d1fb      	bne.n	80001fc <loop_1>

08000204 <exit_1>:
	exit_1:
	    bx lr          				// Retorno desde la función
 8000204:	4770      	bx	lr

08000206 <asm_productoEscalar32>:
	r3: escalar a multiplicar
*/

.thumb_func
    asm_productoEscalar32:
    	push {r4}					//guarda r4 en la pila
 8000206:	b410      	push	{r4}

08000208 <loop_2>:
    loop_2:
    	subs r2, #1 				//decrementamos la longitud
 8000208:	3a01      	subs	r2, #1
    	ldr r4, [r0, r2, LSL #2] 	//cargamos un valor de 32bits en el r4 y lo desplazamos
 800020a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    	mul r4, r4, r3 			 	//multiplica r4 por el escalar en r3
 800020e:	fb04 f403 	mul.w	r4, r4, r3
    	str r4, [r1, r2, LSL #2] 	//guardamos el resultado de la multiplicacion
 8000212:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    	bne loop_2
 8000216:	d1f7      	bne.n	8000208 <loop_2>
    	pop {r4}					//restaura los valores previos de los registros
 8000218:	bc10      	pop	{r4}
        bx lr
 800021a:	4770      	bx	lr

0800021c <asm_productoEscalar16>:
	r3: escalar a multiplicar
*/
//NOTA EL H INDICA EL THUMB de 16bits
.thumb_func
    asm_productoEscalar16:
    	push {r4}			   		//guardo r4 en pila
 800021c:	b410      	push	{r4}

0800021e <loop_3>:
    loop_3:
    	ldrh r4, [r0, r2, LSL #1] 	//cargamos un valor de 32bits en el r4 y lo desplazamos
 800021e:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
    	mul r4, r4, r3 			 	//multiplica r4 por el escalar en r3
 8000222:	fb04 f403 	mul.w	r4, r4, r3
    	strh r4, [r1, r2, LSL #1] 	//guardamos el resultado de la multiplicacion
 8000226:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
    	subs r2, #1 				//decrementamos la longitud
 800022a:	3a01      	subs	r2, #1
    	bne loop_2
 800022c:	d1ec      	bne.n	8000208 <loop_2>
    	pop {r4}					//restaura los valores previos de los registros
 800022e:	bc10      	pop	{r4}
        bx lr
 8000230:	4770      	bx	lr

08000232 <asm_productoEscalar12>:
	r3: escalar a multiplicar

*/
.thumb_func
asm_productoEscalar12:
	    push {r4,r5}              	// Guardar registros en la pila
 8000232:	b430      	push	{r4, r5}

08000234 <loop_4>:
	loop_4:
	    ldrh r4, [r0, r2, LSL #1]   // Cargar valor de medio palabra (16 bits) en r4
 8000234:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
	    mul r5, r4, r3              // Multiplicar r4 por el escalar r3 y lo tiro en r5
 8000238:	fb04 f503 	mul.w	r5, r4, r3
	    usat r4, #12, r5            // Saturar el resultado a 12 bits
 800023c:	f385 040c 	usat	r4, #12, r5
	    strh r4, [r1, r2, LSL #1]   // Almacenar el resultado en memoria
 8000240:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
	    subs r2, #1                 // Decrementar r2
 8000244:	3a01      	subs	r2, #1
	    bne loop_4                  // Mientras r2 > 0
 8000246:	d1f5      	bne.n	8000234 <loop_4>
	    pop {r4,r5}               	// Recuperar registros y retornar
 8000248:	bc30      	pop	{r4, r5}
	    bx lr
 800024a:	4770      	bx	lr

0800024c <asm_filtroVentana10>:


*/
.thumb_func
asm_filtroVentana10:
push {r4-r10}
 800024c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
	//r1 vector out
	//r2 logintud
	//r10 -> SampleOffset = 5 (ver en programa en C)
	//r9 -> WindowSize = SampleOffset*2 + 1 ---> 11

	mov r3, r2					// Resguardo longitud (r2) para ver cuando estoy fuera del vector
 8000250:	4613      	mov	r3, r2
	mov r9, #11 				// cantidad de muestras ventana
 8000252:	f04f 090b 	mov.w	r9, #11
	mov r10, #5 				// posicion de la ventana
 8000256:	f04f 0a05 	mov.w	sl, #5

0800025a <loop_5_1>:

loop_5_1: 						// Recorremos VectorIN
	subs r3, #1
 800025a:	3b01      	subs	r3, #1
	beq exit_5					// Si ya lo recorri saltar al exit
 800025c:	d01a      	beq.n	8000294 <exit_5>
	mov r6, #0					// Limpio el acumulador
 800025e:	f04f 0600 	mov.w	r6, #0
	add r4, r3, r10				// Posicion del vector + posicion central de la ventana r3+r10
 8000262:	eb03 040a 	add.w	r4, r3, sl
	cmp r4, r9					// Comparo con la cantidad de muestras que tiene la ventana
 8000266:	454c      	cmp	r4, r9
	mov r7, #0
 8000268:	f04f 0700 	mov.w	r7, #0
	itt gt						// Verifico que si la ventana es maás grande que las muestras restantes
 800026c:	bfc4      	itt	gt
	subgt r7, r4, r9
 800026e:	eba4 0709 	subgt.w	r7, r4, r9
	subgt r7, #1
 8000272:	3f01      	subgt	r7, #1
	mov r8, r9
 8000274:	46c8      	mov	r8, r9

08000276 <loop_5_2>:

loop_5_2:						// Recorremos la ventana para sumar y promediar
	subs r4, #1
 8000276:	3c01      	subs	r4, #1
	beq loop_5_1
 8000278:	d0ef      	beq.n	800025a <loop_5_1>
	cmp r2, r4					// ignorar operaciones si estamos afura del vector
 800027a:	42a2      	cmp	r2, r4
	bls loop_5_2
 800027c:	d9fb      	bls.n	8000276 <loop_5_2>
	cmp r4, r7
 800027e:	42bc      	cmp	r4, r7
	ittt ls						// Chequeo si llegue al final
 8000280:	bf9e      	ittt	ls
	udivls r6, r6, r8			// Si llegue divido para promediar
 8000282:	fbb6 f6f8 	udivls	r6, r6, r8
	strhls r6, [r1, r3, LSL #1]	// Guardo el resultado en vector out
 8000286:	f821 6013 	strhls.w	r6, [r1, r3, lsl #1]
	bls loop_5_1				// Sigue con el siguiente valor
 800028a:	e7e6      	bls.n	800025a <loop_5_1>

	ldrh r5, [r0, r4, LSL #1]
 800028c:	f830 5014 	ldrh.w	r5, [r0, r4, lsl #1]
	add r6, r6, r5				// r6 = r6 + r5 se suma una muetra más
 8000290:	442e      	add	r6, r5
	b loop_5_2
 8000292:	e7f0      	b.n	8000276 <loop_5_2>

08000294 <exit_5>:

exit_5:
	pop {r4-r10}
 8000294:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
	bx lr
 8000298:	4770      	bx	lr

0800029a <asm_pack32to16>:
prototipo: void pack32to16 (int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud);

*/
.thumb_func
asm_pack32to16:
    push {r4, r5}               	// Guardar registros en la pila
 800029a:	b430      	push	{r4, r5}
    mov r4, r0                      // Puntero al vector de entrada (32 bits)
 800029c:	4604      	mov	r4, r0
    mov r5, r1                      // Puntero al vector de salida (16 bits)
 800029e:	460d      	mov	r5, r1
    mov r0, r2                      // Longitud del vector
 80002a0:	4610      	mov	r0, r2

080002a2 <loop_6>:
loop_6:
    ldr r1, [r4], #4                // Cargar valor de 32 bits
 80002a2:	f854 1b04 	ldr.w	r1, [r4], #4
    movs r1, r1, LSR #16            // Desplazar valor de 32 bits a la derecha para obtener 16 bits
 80002a6:	0c09      	lsrs	r1, r1, #16
    strh r1, [r5], #2               // Almacenar valor de 16 bits en vector de salida
 80002a8:	f825 1b02 	strh.w	r1, [r5], #2
    subs r0, r0, #1                 // Decrementar contador
 80002ac:	3801      	subs	r0, #1
    bne loop_6                      // Repetir mientras contador no sea cero
 80002ae:	d1f8      	bne.n	80002a2 <loop_6>
    pop {r4, r5}                    // Recuperar registros y retornar
 80002b0:	bc30      	pop	{r4, r5}
    bx lr
 80002b2:	4770      	bx	lr

080002b4 <asm_max32>:
	retorno: la posicion del valor maximo en int32
*/

.thumb_func
asm_max32:
    push {r4}
 80002b4:	b410      	push	{r4}
    sub r1, #1
 80002b6:	f1a1 0101 	sub.w	r1, r1, #1
    ldr r2, [r0, r1, LSL #2]    // Se guarda el primer valor para comparar
 80002ba:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    mov r3, r1                 	// Se guarda el índice
 80002be:	460b      	mov	r3, r1
    subs r1, #1
 80002c0:	3901      	subs	r1, #1

080002c2 <loop_7>:
loop_7:
    ldr r4, [r0, r1, LSL #2]    // Se carga siguiente valor para comparar
 80002c2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    cmp r4, r2                 	// Se compara con el valor cargado previo
 80002c6:	4294      	cmp	r4, r2
    bgt greater_than           	// Salta a greater_than si r4 > r2
 80002c8:	dc02      	bgt.n	80002d0 <greater_than>
    subs r1, #1
 80002ca:	3901      	subs	r1, #1
    bne loop_7                 	// Vuelve al bucle si no se ha recorrido todo el vector
 80002cc:	d1f9      	bne.n	80002c2 <loop_7>
    b end
 80002ce:	e003      	b.n	80002d8 <end>

080002d0 <greater_than>:
greater_than:
    mov r2, r4                 	// Si el nuevo valor es mayor, se almacena en r2 para volver a comparar
 80002d0:	4622      	mov	r2, r4
    mov r3, r1                 	// Se guarda el índice
 80002d2:	460b      	mov	r3, r1
    subs r1, #1
 80002d4:	3901      	subs	r1, #1
    bne loop_7                 	// Vuelve al bucle si no se ha recorrido todo el vector
 80002d6:	d1f4      	bne.n	80002c2 <loop_7>

080002d8 <end>:
end:
    pop {r4}
 80002d8:	bc10      	pop	{r4}
    mov r0, r3                 	// Se guarda el valor de retorno
 80002da:	4618      	mov	r0, r3
    bx lr                      	// Colocar el resultado en el registro de retorno
 80002dc:	4770      	bx	lr

080002de <asm_downsampleM>:
	r3: N saltos
*/

.thumb_func
asm_downsampleM:
    push {r4-r6}
 80002de:	b470      	push	{r4, r5, r6}
    mov r4, #0                   // i = 0
 80002e0:	f04f 0400 	mov.w	r4, #0
    mov r5, #0                   // j = 0
 80002e4:	f04f 0500 	mov.w	r5, #0

080002e8 <loop_8>:
loop_8:
    ldr r6, [r0, r4, LSL #2]     // Cargar muestra de vectorIn
 80002e8:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
    str r6, [r1, r5, LSL #2]     // Almacenar muestra en vectorOut
 80002ec:	f841 6025 	str.w	r6, [r1, r5, lsl #2]
    add r4, r4, r3               // Incrementar i por N
 80002f0:	441c      	add	r4, r3
    add r5, r5, #1               // Incrementar j
 80002f2:	f105 0501 	add.w	r5, r5, #1
    cmp r4, r2                   // Comparar i con longitud
 80002f6:	4294      	cmp	r4, r2
    blt loop_8                   // Volver al bucle si i < longitud
 80002f8:	dbf6      	blt.n	80002e8 <loop_8>
    pop {r4-r6}
 80002fa:	bc70      	pop	{r4, r5, r6}
    bx lr
 80002fc:	4770      	bx	lr

080002fe <asm_invertir>:
	r1: longitud
*/

.thumb_func
asm_invertir:
push {r4}
 80002fe:	b410      	push	{r4}
    	mov r2, #0  				// posicion 0, en r1 tengo el otro extremo
 8000300:	f04f 0200 	mov.w	r2, #0

08000304 <loop_9>:
    loop_9:
    	subs r1, #1
 8000304:	3901      	subs	r1, #1

    	ldrh r3, [r0, r2, LSL #1]  	// !----->     !
 8000306:	f830 3012 	ldrh.w	r3, [r0, r2, lsl #1]
    	ldrh r4, [r0, r1, LSL #1]  	// !     <-----!
 800030a:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]

    	cmp r1, r2 					//verifico que el indice izq sea distinto al derecho
 800030e:	4291      	cmp	r1, r2

		itte hi 					// uso el if and then con doble condicionante
 8000310:	bf86      	itte	hi
		strhhi r3, [r0, r1, LSL #1]	// Intercambio valores de los extremos
 8000312:	f820 3011 	strhhi.w	r3, [r0, r1, lsl #1]
		strhhi r4, [r0, r2, LSL #1]
 8000316:	f820 4012 	strhhi.w	r4, [r0, r2, lsl #1]
		bls exit_9					// Se ejecuta hasta que las posiciones de r2 y r1 se solapen
 800031a:	e002      	bls.n	8000322 <exit_9>

    	add r2, #1 					// de un lado decresco y de este crezco (es más facil verlo en la funcion en C)
 800031c:	f102 0201 	add.w	r2, r2, #1
		bne loop_9
 8000320:	d1f0      	bne.n	8000304 <loop_9>

08000322 <exit_9>:
    exit_9:
    	pop {r4}
 8000322:	bc10      	pop	{r4}
        bx lr
 8000324:	4770      	bx	lr

08000326 <asm_eco>:
	aca hardcodie algunas cosas como las muestras, pero podria introducirlas y calcular mas cosas en funcion de los parametros
*/

.thumb_func
asm_eco:
    	push {r4-r6}
 8000326:	b470      	push	{r4, r5, r6}
    	mov r4, #882  				// Retraso de 20ms (882)
 8000328:	f240 3472 	movw	r4, #882	; 0x372
    	mov r2, #4095 				// Cant de muestras (4096)
 800032c:	f640 72ff 	movw	r2, #4095	; 0xfff

08000330 <loop_10>:
    loop_10:
    	sub r3, r2, r4  			// (4096 - 882)
 8000330:	eba2 0304 	sub.w	r3, r2, r4
    	ldrsh r5, [r0, r2, LSL #1]  // Cargo la muestra
 8000334:	f930 5012 	ldrsh.w	r5, [r0, r2, lsl #1]
    	ldrsh r6, [r0, r3, LSL #1]  // Cargo la muestra desplazada
 8000338:	f930 6013 	ldrsh.w	r6, [r0, r3, lsl #1]
    	asr r6, #1					// Hago un desplazamiento hacia la derecha para dividir por dos
 800033c:	ea4f 0666 	mov.w	r6, r6, asr #1
    	add r6, r5, r6 				// Sumo la division anterior a la muestra
 8000340:	442e      	add	r6, r5
    	strh r6, [r1, r2, LSL #1]
 8000342:	f821 6012 	strh.w	r6, [r1, r2, lsl #1]
    	cmp r2, r4  				// Si el desplazamiento de las muestras alcanza a 882, no hay que agregar "eco"
 8000346:	42a2      	cmp	r2, r4
    	sub r2, #1
 8000348:	f1a2 0201 	sub.w	r2, r2, #1
    	bne loop_10					// si ya no se agrega "eco" copiamos las muestras directamente
 800034c:	d1f0      	bne.n	8000330 <loop_10>

0800034e <loop_10_2>:
    loop_10_2:
    	ldrh r6, [r0, r2, LSL #1]
 800034e:	f830 6012 	ldrh.w	r6, [r0, r2, lsl #1]
    	strh r6, [r1, r2, LSL #1]
 8000352:	f821 6012 	strh.w	r6, [r1, r2, lsl #1]
    	subs r2, #1
 8000356:	3a01      	subs	r2, #1
    	bne loop_10_2
 8000358:	d1f9      	bne.n	800034e <loop_10_2>
    	pop {r4-r6}
 800035a:	bc70      	pop	{r4, r5, r6}
        bx lr
 800035c:	4770      	bx	lr

0800035e <asm_calcularCorrelacion>:

*/

.thumb_func
asm_calcularCorrelacion: 		//APLICANDO SIMD
	push {r4, r5, r6}      		// Guardar registros en la pila
 800035e:	b470      	push	{r4, r5, r6}
    mov r3, r0          		// Cargar dirección de inicio de vectorX en r3
 8000360:	4603      	mov	r3, r0
    mov r4, r1          		// Cargar dirección de inicio de vectorY en r4
 8000362:	460c      	mov	r4, r1
    mov r5, r2       			// Cargar dirección de inicio de vectorCorr en r5
 8000364:	4615      	mov	r5, r2
    mov r6, #0                 	// i = 0
 8000366:	f04f 0600 	mov.w	r6, #0

0800036a <loop_11_1>:
loop_11_1:
    ldrh r0, [r3, r6, lsl #1]  	// vectorX[i]
 800036a:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
    mov r1, #0                 	// vectorCorr[i] = 0
 800036e:	f04f 0100 	mov.w	r1, #0
    mov r2, #0                 	// j = 0
 8000372:	f04f 0200 	mov.w	r2, #0

08000376 <loop_11_2>:
loop_11_2:
    cmp r2, r6                 	// Comparar j con i
 8000376:	42b2      	cmp	r2, r6
    bhs loop_11_3        	// Si j >= i, salir del bucle interno
 8000378:	d207      	bcs.n	800038a <loop_11_3>
    ldrh r7, [r4, r2, lsl #1]  	// vectorY[j]
 800037a:	f834 7012 	ldrh.w	r7, [r4, r2, lsl #1]
    smull r8, r9, r0, r7       	// r8:r9 = vectorX[i] * vectorY[j]
 800037e:	fb80 8907 	smull	r8, r9, r0, r7
    adds r1, r1, r8            	// vectorCorr[i] += r8 (parte baja de la multiplicación)
 8000382:	eb11 0108 	adds.w	r1, r1, r8
    adds r2, r2, #1            	// Incrementar j
 8000386:	3201      	adds	r2, #1
    b loop_11_2               	// Volver al bucle interno
 8000388:	e7f5      	b.n	8000376 <loop_11_2>

0800038a <loop_11_3>:
loop_11_3:
    strh r1, [r5, r6, lsl #1]  	// vectorCorr[i] = r1
 800038a:	f825 1016 	strh.w	r1, [r5, r6, lsl #1]
    adds r6, r6, #1            	// Incrementar i
 800038e:	3601      	adds	r6, #1
    cmp r6, r7                 	// Comparar i con longitud
 8000390:	42be      	cmp	r6, r7
    blt loop_11_1             	// Si i < longitud, volver al bucle externo
 8000392:	dbea      	blt.n	800036a <loop_11_1>
    pop {r4, r5, r6}       		// Restaurar registros y salir
 8000394:	bc70      	pop	{r4, r5, r6}
    bx lr
 8000396:	4770      	bx	lr

08000398 <__aeabi_uldivmod>:
 8000398:	b953      	cbnz	r3, 80003b0 <__aeabi_uldivmod+0x18>
 800039a:	b94a      	cbnz	r2, 80003b0 <__aeabi_uldivmod+0x18>
 800039c:	2900      	cmp	r1, #0
 800039e:	bf08      	it	eq
 80003a0:	2800      	cmpeq	r0, #0
 80003a2:	bf1c      	itt	ne
 80003a4:	f04f 31ff 	movne.w	r1, #4294967295
 80003a8:	f04f 30ff 	movne.w	r0, #4294967295
 80003ac:	f000 b974 	b.w	8000698 <__aeabi_idiv0>
 80003b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80003b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b8:	f000 f806 	bl	80003c8 <__udivmoddi4>
 80003bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003c4:	b004      	add	sp, #16
 80003c6:	4770      	bx	lr

080003c8 <__udivmoddi4>:
 80003c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003cc:	9d08      	ldr	r5, [sp, #32]
 80003ce:	4604      	mov	r4, r0
 80003d0:	468e      	mov	lr, r1
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d14d      	bne.n	8000472 <__udivmoddi4+0xaa>
 80003d6:	428a      	cmp	r2, r1
 80003d8:	4694      	mov	ip, r2
 80003da:	d969      	bls.n	80004b0 <__udivmoddi4+0xe8>
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	b152      	cbz	r2, 80003f8 <__udivmoddi4+0x30>
 80003e2:	fa01 f302 	lsl.w	r3, r1, r2
 80003e6:	f1c2 0120 	rsb	r1, r2, #32
 80003ea:	fa20 f101 	lsr.w	r1, r0, r1
 80003ee:	fa0c fc02 	lsl.w	ip, ip, r2
 80003f2:	ea41 0e03 	orr.w	lr, r1, r3
 80003f6:	4094      	lsls	r4, r2
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	0c21      	lsrs	r1, r4, #16
 80003fe:	fbbe f6f8 	udiv	r6, lr, r8
 8000402:	fa1f f78c 	uxth.w	r7, ip
 8000406:	fb08 e316 	mls	r3, r8, r6, lr
 800040a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800040e:	fb06 f107 	mul.w	r1, r6, r7
 8000412:	4299      	cmp	r1, r3
 8000414:	d90a      	bls.n	800042c <__udivmoddi4+0x64>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f106 30ff 	add.w	r0, r6, #4294967295
 800041e:	f080 811f 	bcs.w	8000660 <__udivmoddi4+0x298>
 8000422:	4299      	cmp	r1, r3
 8000424:	f240 811c 	bls.w	8000660 <__udivmoddi4+0x298>
 8000428:	3e02      	subs	r6, #2
 800042a:	4463      	add	r3, ip
 800042c:	1a5b      	subs	r3, r3, r1
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb3 f0f8 	udiv	r0, r3, r8
 8000434:	fb08 3310 	mls	r3, r8, r0, r3
 8000438:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800043c:	fb00 f707 	mul.w	r7, r0, r7
 8000440:	42a7      	cmp	r7, r4
 8000442:	d90a      	bls.n	800045a <__udivmoddi4+0x92>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 33ff 	add.w	r3, r0, #4294967295
 800044c:	f080 810a 	bcs.w	8000664 <__udivmoddi4+0x29c>
 8000450:	42a7      	cmp	r7, r4
 8000452:	f240 8107 	bls.w	8000664 <__udivmoddi4+0x29c>
 8000456:	4464      	add	r4, ip
 8000458:	3802      	subs	r0, #2
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	1be4      	subs	r4, r4, r7
 8000460:	2600      	movs	r6, #0
 8000462:	b11d      	cbz	r5, 800046c <__udivmoddi4+0xa4>
 8000464:	40d4      	lsrs	r4, r2
 8000466:	2300      	movs	r3, #0
 8000468:	e9c5 4300 	strd	r4, r3, [r5]
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	428b      	cmp	r3, r1
 8000474:	d909      	bls.n	800048a <__udivmoddi4+0xc2>
 8000476:	2d00      	cmp	r5, #0
 8000478:	f000 80ef 	beq.w	800065a <__udivmoddi4+0x292>
 800047c:	2600      	movs	r6, #0
 800047e:	e9c5 0100 	strd	r0, r1, [r5]
 8000482:	4630      	mov	r0, r6
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	fab3 f683 	clz	r6, r3
 800048e:	2e00      	cmp	r6, #0
 8000490:	d14a      	bne.n	8000528 <__udivmoddi4+0x160>
 8000492:	428b      	cmp	r3, r1
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0xd4>
 8000496:	4282      	cmp	r2, r0
 8000498:	f200 80f9 	bhi.w	800068e <__udivmoddi4+0x2c6>
 800049c:	1a84      	subs	r4, r0, r2
 800049e:	eb61 0303 	sbc.w	r3, r1, r3
 80004a2:	2001      	movs	r0, #1
 80004a4:	469e      	mov	lr, r3
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d0e0      	beq.n	800046c <__udivmoddi4+0xa4>
 80004aa:	e9c5 4e00 	strd	r4, lr, [r5]
 80004ae:	e7dd      	b.n	800046c <__udivmoddi4+0xa4>
 80004b0:	b902      	cbnz	r2, 80004b4 <__udivmoddi4+0xec>
 80004b2:	deff      	udf	#255	; 0xff
 80004b4:	fab2 f282 	clz	r2, r2
 80004b8:	2a00      	cmp	r2, #0
 80004ba:	f040 8092 	bne.w	80005e2 <__udivmoddi4+0x21a>
 80004be:	eba1 010c 	sub.w	r1, r1, ip
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2601      	movs	r6, #1
 80004cc:	0c20      	lsrs	r0, r4, #16
 80004ce:	fbb1 f3f7 	udiv	r3, r1, r7
 80004d2:	fb07 1113 	mls	r1, r7, r3, r1
 80004d6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004da:	fb0e f003 	mul.w	r0, lr, r3
 80004de:	4288      	cmp	r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x12c>
 80004e2:	eb1c 0101 	adds.w	r1, ip, r1
 80004e6:	f103 38ff 	add.w	r8, r3, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x12a>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2c0>
 80004f2:	4643      	mov	r3, r8
 80004f4:	1a09      	subs	r1, r1, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb1 f0f7 	udiv	r0, r1, r7
 80004fc:	fb07 1110 	mls	r1, r7, r0, r1
 8000500:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x156>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 31ff 	add.w	r1, r0, #4294967295
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x154>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2ca>
 800051c:	4608      	mov	r0, r1
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x9a>
 8000528:	f1c6 0720 	rsb	r7, r6, #32
 800052c:	40b3      	lsls	r3, r6
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa20 f407 	lsr.w	r4, r0, r7
 800053a:	fa01 f306 	lsl.w	r3, r1, r6
 800053e:	431c      	orrs	r4, r3
 8000540:	40f9      	lsrs	r1, r7
 8000542:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000546:	fa00 f306 	lsl.w	r3, r0, r6
 800054a:	fbb1 f8f9 	udiv	r8, r1, r9
 800054e:	0c20      	lsrs	r0, r4, #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fb09 1118 	mls	r1, r9, r8, r1
 8000558:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800055c:	fb08 f00e 	mul.w	r0, r8, lr
 8000560:	4288      	cmp	r0, r1
 8000562:	fa02 f206 	lsl.w	r2, r2, r6
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b8>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2bc>
 8000574:	4288      	cmp	r0, r1
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2bc>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4461      	add	r1, ip
 8000580:	1a09      	subs	r1, r1, r0
 8000582:	b2a4      	uxth	r4, r4
 8000584:	fbb1 f0f9 	udiv	r0, r1, r9
 8000588:	fb09 1110 	mls	r1, r9, r0, r1
 800058c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000590:	fb00 fe0e 	mul.w	lr, r0, lr
 8000594:	458e      	cmp	lr, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1e2>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f100 34ff 	add.w	r4, r0, #4294967295
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2b4>
 80005a2:	458e      	cmp	lr, r1
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2b4>
 80005a6:	3802      	subs	r0, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005ae:	fba0 9402 	umull	r9, r4, r0, r2
 80005b2:	eba1 010e 	sub.w	r1, r1, lr
 80005b6:	42a1      	cmp	r1, r4
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46a6      	mov	lr, r4
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x2a4>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x2a0>
 80005c0:	b15d      	cbz	r5, 80005da <__udivmoddi4+0x212>
 80005c2:	ebb3 0208 	subs.w	r2, r3, r8
 80005c6:	eb61 010e 	sbc.w	r1, r1, lr
 80005ca:	fa01 f707 	lsl.w	r7, r1, r7
 80005ce:	fa22 f306 	lsr.w	r3, r2, r6
 80005d2:	40f1      	lsrs	r1, r6
 80005d4:	431f      	orrs	r7, r3
 80005d6:	e9c5 7100 	strd	r7, r1, [r5]
 80005da:	2600      	movs	r6, #0
 80005dc:	4631      	mov	r1, r6
 80005de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	40d8      	lsrs	r0, r3
 80005e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80005ec:	fa21 f303 	lsr.w	r3, r1, r3
 80005f0:	4091      	lsls	r1, r2
 80005f2:	4301      	orrs	r1, r0
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000600:	fb07 3610 	mls	r6, r7, r0, r3
 8000604:	0c0b      	lsrs	r3, r1, #16
 8000606:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800060a:	fb00 f60e 	mul.w	r6, r0, lr
 800060e:	429e      	cmp	r6, r3
 8000610:	fa04 f402 	lsl.w	r4, r4, r2
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x260>
 8000616:	eb1c 0303 	adds.w	r3, ip, r3
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b8>
 8000620:	429e      	cmp	r6, r3
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b8>
 8000624:	3802      	subs	r0, #2
 8000626:	4463      	add	r3, ip
 8000628:	1b9b      	subs	r3, r3, r6
 800062a:	b289      	uxth	r1, r1
 800062c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000630:	fb07 3316 	mls	r3, r7, r6, r3
 8000634:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000638:	fb06 f30e 	mul.w	r3, r6, lr
 800063c:	428b      	cmp	r3, r1
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x28a>
 8000640:	eb1c 0101 	adds.w	r1, ip, r1
 8000644:	f106 38ff 	add.w	r8, r6, #4294967295
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2b0>
 800064a:	428b      	cmp	r3, r1
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2b0>
 800064e:	3e02      	subs	r6, #2
 8000650:	4461      	add	r1, ip
 8000652:	1ac9      	subs	r1, r1, r3
 8000654:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0x104>
 800065a:	462e      	mov	r6, r5
 800065c:	4628      	mov	r0, r5
 800065e:	e705      	b.n	800046c <__udivmoddi4+0xa4>
 8000660:	4606      	mov	r6, r0
 8000662:	e6e3      	b.n	800042c <__udivmoddi4+0x64>
 8000664:	4618      	mov	r0, r3
 8000666:	e6f8      	b.n	800045a <__udivmoddi4+0x92>
 8000668:	454b      	cmp	r3, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f8>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000674:	3801      	subs	r0, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f8>
 8000678:	4646      	mov	r6, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x28a>
 800067c:	4620      	mov	r0, r4
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1e2>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x260>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b8>
 8000688:	3b02      	subs	r3, #2
 800068a:	4461      	add	r1, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x12c>
 800068e:	4630      	mov	r0, r6
 8000690:	e709      	b.n	80004a6 <__udivmoddi4+0xde>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x156>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006a2:	f3ef 8314 	mrs	r3, CONTROL
 80006a6:	607b      	str	r3, [r7, #4]
  return(result);
 80006a8:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 80006aa:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	f043 0301 	orr.w	r3, r3, #1
 80006b2:	61fb      	str	r3, [r7, #28]
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	f383 8814 	msr	CONTROL, r3
}
 80006be:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006c0:	f3ef 8314 	mrs	r3, CONTROL
 80006c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80006c6:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 80006c8:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	f023 0301 	bic.w	r3, r3, #1
 80006d0:	61fb      	str	r3, [r7, #28]
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	f383 8814 	msr	CONTROL, r3
}
 80006dc:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006de:	f3ef 8314 	mrs	r3, CONTROL
 80006e2:	617b      	str	r3, [r7, #20]
  return(result);
 80006e4:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 80006e6:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 80006e8:	f7ff fd80 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006ec:	f3ef 8314 	mrs	r3, CONTROL
 80006f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80006f2:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 80006f4:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 80006f6:	bf00      	nop
 80006f8:	3720      	adds	r7, #32
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <zeros>:


void zeros(uint32_t *vector, uint32_t longitud) {
 80006fe:	b480      	push	{r7}
 8000700:	b085      	sub	sp, #20
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
 8000706:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	e008      	b.n	8000720 <zeros+0x22>
        vector[i] = 0;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	3301      	adds	r3, #1
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	429a      	cmp	r2, r3
 8000726:	d3f2      	bcc.n	800070e <zeros+0x10>
    }
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <zeros_optimizada>:
//optimizado, dsp aplicar en todos.....:
void zeros_optimizada(uint32_t *vector, uint32_t longitud) {
 8000736:	b480      	push	{r7}
 8000738:	b083      	sub	sp, #12
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
 800073e:	6039      	str	r1, [r7, #0]
    for (; longitud >0; longitud--) {
 8000740:	e00b      	b.n	800075a <zeros_optimizada+0x24>
        vector[longitud-1] = 0;
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000748:	3b01      	subs	r3, #1
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	4413      	add	r3, r2
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
    for (; longitud >0; longitud--) {
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	3b01      	subs	r3, #1
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1f0      	bne.n	8000742 <zeros_optimizada+0xc>
    }
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <productoEscalar32>:
void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar) {
 800076e:	b480      	push	{r7}
 8000770:	b087      	sub	sp, #28
 8000772:	af00      	add	r7, sp, #0
 8000774:	60f8      	str	r0, [r7, #12]
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < longitud; i++) { //en clase no utilizaron la variable auxiliar i,
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	e00f      	b.n	80007a2 <productoEscalar32+0x34>
        vectorOut[i] = vectorIn[i] * escalar;
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	68b9      	ldr	r1, [r7, #8]
 8000792:	440b      	add	r3, r1
 8000794:	6839      	ldr	r1, [r7, #0]
 8000796:	fb01 f202 	mul.w	r2, r1, r2
 800079a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) { //en clase no utilizaron la variable auxiliar i,
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	3301      	adds	r3, #1
 80007a0:	617b      	str	r3, [r7, #20]
 80007a2:	697a      	ldr	r2, [r7, #20]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d3eb      	bcc.n	8000782 <productoEscalar32+0x14>
    }
}
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	371c      	adds	r7, #28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <productoEscalar16>:
void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar) {
 80007b8:	b480      	push	{r7}
 80007ba:	b087      	sub	sp, #28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
 80007c4:	807b      	strh	r3, [r7, #2]
    for (uint32_t i = 0; i < longitud; i++) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
 80007ca:	e010      	b.n	80007ee <productoEscalar16+0x36>
        vectorOut[i] = vectorIn[i] * escalar;
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	005b      	lsls	r3, r3, #1
 80007d0:	68fa      	ldr	r2, [r7, #12]
 80007d2:	4413      	add	r3, r2
 80007d4:	881a      	ldrh	r2, [r3, #0]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	68b9      	ldr	r1, [r7, #8]
 80007dc:	440b      	add	r3, r1
 80007de:	8879      	ldrh	r1, [r7, #2]
 80007e0:	fb11 f202 	smulbb	r2, r1, r2
 80007e4:	b292      	uxth	r2, r2
 80007e6:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	3301      	adds	r3, #1
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	697a      	ldr	r2, [r7, #20]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d3ea      	bcc.n	80007cc <productoEscalar16+0x14>
    }
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	371c      	adds	r7, #28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <productoEscalar12>:
void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar) {
 8000804:	b480      	push	{r7}
 8000806:	b087      	sub	sp, #28
 8000808:	af00      	add	r7, sp, #0
 800080a:	60f8      	str	r0, [r7, #12]
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	807b      	strh	r3, [r7, #2]
    for (uint32_t i = 0; i < longitud; i++) {
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	e01f      	b.n	8000858 <productoEscalar12+0x54>
        uint32_t resultado = (uint32_t)vectorIn[i] * (uint32_t)escalar;
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	005b      	lsls	r3, r3, #1
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	461a      	mov	r2, r3
 8000824:	887b      	ldrh	r3, [r7, #2]
 8000826:	fb02 f303 	mul.w	r3, r2, r3
 800082a:	613b      	str	r3, [r7, #16]
        if (resultado > 0xFFF) {
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000832:	d307      	bcc.n	8000844 <productoEscalar12+0x40>
            vectorOut[i] = 0xFFF; // Saturación a 12 bits
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	68ba      	ldr	r2, [r7, #8]
 800083a:	4413      	add	r3, r2
 800083c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000840:	801a      	strh	r2, [r3, #0]
 8000842:	e006      	b.n	8000852 <productoEscalar12+0x4e>
        } else {
            vectorOut[i] = (uint16_t)resultado;
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	4413      	add	r3, r2
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	b292      	uxth	r2, r2
 8000850:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 8000852:	697b      	ldr	r3, [r7, #20]
 8000854:	3301      	adds	r3, #1
 8000856:	617b      	str	r3, [r7, #20]
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	429a      	cmp	r2, r3
 800085e:	d3db      	bcc.n	8000818 <productoEscalar12+0x14>
        }
    }
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	371c      	adds	r7, #28
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <filtroVentana10>:
void filtroVentana10(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud) {
 800086e:	b480      	push	{r7}
 8000870:	b089      	sub	sp, #36	; 0x24
 8000872:	af00      	add	r7, sp, #0
 8000874:	60f8      	str	r0, [r7, #12]
 8000876:	60b9      	str	r1, [r7, #8]
 8000878:	607a      	str	r2, [r7, #4]
    int32_t p;
    const uint8_t SampleOffset = 5;
 800087a:	2305      	movs	r3, #5
 800087c:	75fb      	strb	r3, [r7, #23]
    const uint8_t WindowSize = (SampleOffset * 2) + 1;
 800087e:	7dfb      	ldrb	r3, [r7, #23]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	b2db      	uxtb	r3, r3
 8000884:	3301      	adds	r3, #1
 8000886:	75bb      	strb	r3, [r7, #22]

    for (int32_t i = longitud - 1; i >= 0; i--) {
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3b01      	subs	r3, #1
 800088c:	61fb      	str	r3, [r7, #28]
 800088e:	e03f      	b.n	8000910 <filtroVentana10+0xa2>
        p = i;
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	613b      	str	r3, [r7, #16]
        vectorOut[p] = 0;
 8000894:	693b      	ldr	r3, [r7, #16]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	68ba      	ldr	r2, [r7, #8]
 800089a:	4413      	add	r3, r2
 800089c:	2200      	movs	r2, #0
 800089e:	801a      	strh	r2, [r3, #0]

        for (int32_t j = p + SampleOffset; j >= p - SampleOffset; j--) {
 80008a0:	7dfb      	ldrb	r3, [r7, #23]
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4413      	add	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]
 80008a8:	e01a      	b.n	80008e0 <filtroVentana10+0x72>
            if (j < longitud && j >= 0) {
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d913      	bls.n	80008da <filtroVentana10+0x6c>
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	db10      	blt.n	80008da <filtroVentana10+0x6c>
                vectorOut[p] += vectorIn[j];
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	68ba      	ldr	r2, [r7, #8]
 80008be:	4413      	add	r3, r2
 80008c0:	8819      	ldrh	r1, [r3, #0]
 80008c2:	69bb      	ldr	r3, [r7, #24]
 80008c4:	005b      	lsls	r3, r3, #1
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	4413      	add	r3, r2
 80008ca:	881a      	ldrh	r2, [r3, #0]
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	68b8      	ldr	r0, [r7, #8]
 80008d2:	4403      	add	r3, r0
 80008d4:	440a      	add	r2, r1
 80008d6:	b292      	uxth	r2, r2
 80008d8:	801a      	strh	r2, [r3, #0]
        for (int32_t j = p + SampleOffset; j >= p - SampleOffset; j--) {
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	3b01      	subs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
 80008e0:	7dfb      	ldrb	r3, [r7, #23]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dade      	bge.n	80008aa <filtroVentana10+0x3c>
            }
        }
        vectorOut[p] /= WindowSize;
 80008ec:	693b      	ldr	r3, [r7, #16]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	68ba      	ldr	r2, [r7, #8]
 80008f2:	4413      	add	r3, r2
 80008f4:	881b      	ldrh	r3, [r3, #0]
 80008f6:	461a      	mov	r2, r3
 80008f8:	7dbb      	ldrb	r3, [r7, #22]
 80008fa:	fb92 f1f3 	sdiv	r1, r2, r3
 80008fe:	693b      	ldr	r3, [r7, #16]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	4413      	add	r3, r2
 8000906:	b28a      	uxth	r2, r1
 8000908:	801a      	strh	r2, [r3, #0]
    for (int32_t i = longitud - 1; i >= 0; i--) {
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3b01      	subs	r3, #1
 800090e:	61fb      	str	r3, [r7, #28]
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	2b00      	cmp	r3, #0
 8000914:	dabc      	bge.n	8000890 <filtroVentana10+0x22>
    }
}
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	3724      	adds	r7, #36	; 0x24
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <pack32to16>:
void pack32to16(int32_t *vectorIn, int16_t *vectorOut, uint32_t longitud) {
 8000924:	b480      	push	{r7}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < longitud; i++) {
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	e00e      	b.n	8000954 <pack32to16+0x30>
        vectorOut[i] = (int16_t)(vectorIn[i] >> 16);
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	68fa      	ldr	r2, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1419      	asrs	r1, r3, #16
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	68ba      	ldr	r2, [r7, #8]
 8000948:	4413      	add	r3, r2
 800094a:	b20a      	sxth	r2, r1
 800094c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	3301      	adds	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	429a      	cmp	r2, r3
 800095a:	d3ec      	bcc.n	8000936 <pack32to16+0x12>
    }
}
 800095c:	bf00      	nop
 800095e:	bf00      	nop
 8000960:	371c      	adds	r7, #28
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <max>:
int32_t max(int32_t *vectorIn, uint32_t longitud) {
 800096a:	b480      	push	{r7}
 800096c:	b087      	sub	sp, #28
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
 8000972:	6039      	str	r1, [r7, #0]
    int32_t maxValor = vectorIn[0];
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	617b      	str	r3, [r7, #20]
    uint32_t maxPosicion = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]

    for (uint32_t i = 1; i < longitud; i++) {
 800097e:	2301      	movs	r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	e012      	b.n	80009aa <max+0x40>
        if (vectorIn[i] > maxValor) {
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	4413      	add	r3, r2
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	697a      	ldr	r2, [r7, #20]
 8000990:	429a      	cmp	r2, r3
 8000992:	da07      	bge.n	80009a4 <max+0x3a>
            maxValor = vectorIn[i];
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	617b      	str	r3, [r7, #20]
            maxPosicion = i;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 1; i < longitud; i++) {
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	3301      	adds	r3, #1
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d3e8      	bcc.n	8000984 <max+0x1a>
        }
    }

    return maxPosicion;
 80009b2:	693b      	ldr	r3, [r7, #16]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	371c      	adds	r7, #28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <downsampleM>:
void downsampleM(int32_t *vectorIn, int32_t *vectorOut, uint32_t longitud, uint32_t N) {
 80009c0:	b480      	push	{r7}
 80009c2:	b087      	sub	sp, #28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
    uint32_t i;
    uint32_t j = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]

    for (i = 0; i < longitud; i += N) {
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]
 80009d6:	e010      	b.n	80009fa <downsampleM+0x3a>
        vectorOut[j] = vectorIn[i];
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	68fa      	ldr	r2, [r7, #12]
 80009de:	441a      	add	r2, r3
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	440b      	add	r3, r1
 80009e8:	6812      	ldr	r2, [r2, #0]
 80009ea:	601a      	str	r2, [r3, #0]
        j++;
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	3301      	adds	r3, #1
 80009f0:	613b      	str	r3, [r7, #16]
    for (i = 0; i < longitud; i += N) {
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	4413      	add	r3, r2
 80009f8:	617b      	str	r3, [r7, #20]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d3ea      	bcc.n	80009d8 <downsampleM+0x18>
    }
}
 8000a02:	bf00      	nop
 8000a04:	bf00      	nop
 8000a06:	371c      	adds	r7, #28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <invertir>:
void invertir(uint16_t *vector, uint32_t longitud) {
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint16_t temp;

    for (i = 0; i < longitud / 2; i++) {
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	e022      	b.n	8000a66 <invertir+0x56>
        temp = vector[i];
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	4413      	add	r3, r2
 8000a28:	881b      	ldrh	r3, [r3, #0]
 8000a2a:	817b      	strh	r3, [r7, #10]
        vector[i] = vector[longitud - i - 1];
 8000a2c:	683a      	ldr	r2, [r7, #0]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000a36:	3b01      	subs	r3, #1
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	441a      	add	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	440b      	add	r3, r1
 8000a46:	8812      	ldrh	r2, [r2, #0]
 8000a48:	801a      	strh	r2, [r3, #0]
        vector[longitud - i - 1] = temp;
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000a54:	3b01      	subs	r3, #1
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	687a      	ldr	r2, [r7, #4]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	897a      	ldrh	r2, [r7, #10]
 8000a5e:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < longitud / 2; i++) {
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3301      	adds	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	085b      	lsrs	r3, r3, #1
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d3d7      	bcc.n	8000a20 <invertir+0x10>
    }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3714      	adds	r7, #20
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <introducirEco>:
void introducirEco(int16_t *vector, int16_t *vectorOut) {
 8000a7e:	b480      	push	{r7}
 8000a80:	b089      	sub	sp, #36	; 0x24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
 8000a86:	6039      	str	r1, [r7, #0]
    uint32_t retrasoMuestras = 882; // 20ms de retraso = 882 muetras
 8000a88:	f240 3372 	movw	r3, #882	; 0x372
 8000a8c:	617b      	str	r3, [r7, #20]
    uint32_t longitud = 4096;
 8000a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a92:	613b      	str	r3, [r7, #16]
    int16_t mitadAmplitud = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	81fb      	strh	r3, [r7, #14]

    //SIN ECO
    for (uint32_t i = 0; i < retrasoMuestras; i++) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
 8000a9c:	e00d      	b.n	8000aba <introducirEco+0x3c>
        vectorOut[i] = vector[i];
 8000a9e:	69fb      	ldr	r3, [r7, #28]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	441a      	add	r2, r3
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	6839      	ldr	r1, [r7, #0]
 8000aac:	440b      	add	r3, r1
 8000aae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000ab2:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < retrasoMuestras; i++) {
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
 8000aba:	69fa      	ldr	r2, [r7, #28]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d3ed      	bcc.n	8000a9e <introducirEco+0x20>
    }

    //ECO
    for (uint32_t i = retrasoMuestras; i < longitud; i++) {
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	e027      	b.n	8000b18 <introducirEco+0x9a>
        mitadAmplitud = vector[i - retrasoMuestras] / 2; //retraso
 8000ac8:	69ba      	ldr	r2, [r7, #24]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	687a      	ldr	r2, [r7, #4]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad8:	0fda      	lsrs	r2, r3, #31
 8000ada:	4413      	add	r3, r2
 8000adc:	105b      	asrs	r3, r3, #1
 8000ade:	81fb      	strh	r3, [r7, #14]
        vectorOut[i] += vector[i] + mitadAmplitud;
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	440b      	add	r3, r1
 8000af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000afa:	b299      	uxth	r1, r3
 8000afc:	89fb      	ldrh	r3, [r7, #14]
 8000afe:	440b      	add	r3, r1
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	4413      	add	r3, r2
 8000b04:	b299      	uxth	r1, r3
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	683a      	ldr	r2, [r7, #0]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b20a      	sxth	r2, r1
 8000b10:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = retrasoMuestras; i < longitud; i++) {
 8000b12:	69bb      	ldr	r3, [r7, #24]
 8000b14:	3301      	adds	r3, #1
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d3d3      	bcc.n	8000ac8 <introducirEco+0x4a>
    }

}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <introducirEco_Intrinsic>:

// https://www.keil.com/pack/doc/CMSIS/Core/html/group__intrinsic__SIMD__gr.html

void introducirEco_Intrinsic(int16_t *vector, int16_t *vectorOut) {
 8000b2e:	b480      	push	{r7}
 8000b30:	b08f      	sub	sp, #60	; 0x3c
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
    uint32_t retrasoMuestras = 882; // 20ms de retraso = 882 muetras
 8000b38:	f240 3372 	movw	r3, #882	; 0x372
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t longitud = 4096;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    int16_t mitadAmplitud = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	84fb      	strh	r3, [r7, #38]	; 0x26

    //SIN ECO
    for (uint32_t i = 0; i < retrasoMuestras; i++) {
 8000b48:	2300      	movs	r3, #0
 8000b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8000b4c:	e00d      	b.n	8000b6a <introducirEco_Intrinsic+0x3c>
        vectorOut[i] = vector[i];
 8000b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	441a      	add	r2, r3
 8000b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	6839      	ldr	r1, [r7, #0]
 8000b5c:	440b      	add	r3, r1
 8000b5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b62:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < retrasoMuestras; i++) {
 8000b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b66:	3301      	adds	r3, #1
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
 8000b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d3ed      	bcc.n	8000b4e <introducirEco_Intrinsic+0x20>
    }

    //ECO
    for (uint32_t i = retrasoMuestras; i < longitud; i++) {
 8000b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b74:	633b      	str	r3, [r7, #48]	; 0x30
 8000b76:	e034      	b.n	8000be2 <introducirEco_Intrinsic+0xb4>
        mitadAmplitud = vector[i - retrasoMuestras] / 2; //retraso
 8000b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b88:	0fda      	lsrs	r2, r3, #31
 8000b8a:	4413      	add	r3, r2
 8000b8c:	105b      	asrs	r3, r3, #1
 8000b8e:	84fb      	strh	r3, [r7, #38]	; 0x26
        vectorOut[i] = __QADD16(vectorOut[i], __QADD16(vector[i], mitadAmplitud));
 8000b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	4413      	add	r3, r2
 8000b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000baa:	461a      	mov	r2, r3
 8000bac:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000bb0:	617a      	str	r2, [r7, #20]
 8000bb2:	613b      	str	r3, [r7, #16]

__STATIC_FORCEINLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	fa93 f312 	qadd16	r3, r3, r2
 8000bbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6239      	str	r1, [r7, #32]
 8000bc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000bc4:	6a3b      	ldr	r3, [r7, #32]
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	fa93 f312 	qadd16	r3, r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
  return(result);
 8000bce:	69b9      	ldr	r1, [r7, #24]
 8000bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	683a      	ldr	r2, [r7, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b20a      	sxth	r2, r1
 8000bda:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = retrasoMuestras; i < longitud; i++) {
 8000bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bde:	3301      	adds	r3, #1
 8000be0:	633b      	str	r3, [r7, #48]	; 0x30
 8000be2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d3c6      	bcc.n	8000b78 <introducirEco_Intrinsic+0x4a>
    }

}
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	373c      	adds	r7, #60	; 0x3c
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <corr>:
void corr(int16_t *vectorX, int16_t *vectorY, int16_t *vectorCorr, uint32_t longitud) {
 8000bf8:	b480      	push	{r7}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
 8000c04:	603b      	str	r3, [r7, #0]
    uint32_t i, j;

    for (i = 0; i < longitud; i++) {
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	e03a      	b.n	8000c82 <corr+0x8a>
        vectorCorr[i] = 0;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	2200      	movs	r2, #0
 8000c16:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < longitud; j++) {
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	e02a      	b.n	8000c74 <corr+0x7c>
            if (i + j < longitud) {
 8000c1e:	697a      	ldr	r2, [r7, #20]
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	4413      	add	r3, r2
 8000c24:	683a      	ldr	r2, [r7, #0]
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d921      	bls.n	8000c6e <corr+0x76>
                vectorCorr[i] += vectorX[i + j] * vectorY[j];
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c36:	b29a      	uxth	r2, r3
 8000c38:	6979      	ldr	r1, [r7, #20]
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	440b      	add	r3, r1
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	68f9      	ldr	r1, [r7, #12]
 8000c42:	440b      	add	r3, r1
 8000c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c48:	b299      	uxth	r1, r3
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	68b8      	ldr	r0, [r7, #8]
 8000c50:	4403      	add	r3, r0
 8000c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	fb11 f303 	smulbb	r3, r1, r3
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4413      	add	r3, r2
 8000c60:	b299      	uxth	r1, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	b20a      	sxth	r2, r1
 8000c6c:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < longitud; j++) {
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	3301      	adds	r3, #1
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d3d0      	bcc.n	8000c1e <corr+0x26>
    for (i = 0; i < longitud; i++) {
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d3c0      	bcc.n	8000c0c <corr+0x14>
            }
        }
    }
}
 8000c8a:	bf00      	nop
 8000c8c:	bf00      	nop
 8000c8e:	371c      	adds	r7, #28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <corr_Intrinsic>:
void corr_Intrinsic(int16_t *vectorX, int16_t *vectorY, int16_t *vectorCorr, uint32_t longitud) {
 8000c98:	b480      	push	{r7}
 8000c9a:	b08b      	sub	sp, #44	; 0x2c
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
 8000ca4:	603b      	str	r3, [r7, #0]
    uint32_t i, j;

    for (i = 0; i < longitud; i++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8000caa:	e03f      	b.n	8000d2c <corr_Intrinsic+0x94>
        vectorCorr[i] = 0;
 8000cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < longitud; j++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	e02f      	b.n	8000d1e <corr_Intrinsic+0x86>
            if (i + j < longitud) {
 8000cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cc0:	6a3b      	ldr	r3, [r7, #32]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	d926      	bls.n	8000d18 <corr_Intrinsic+0x80>
            	//__SMUADX <---- dsp probar con esa
                vectorCorr[i] += __SMUAD(vectorX[i + j] , vectorY[j]);
 8000cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	4413      	add	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	68ba      	ldr	r2, [r7, #8]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce8:	61f9      	str	r1, [r7, #28]
 8000cea:	61bb      	str	r3, [r7, #24]

__STATIC_FORCEINLINE uint32_t __SMUAD  (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	fb23 f302 	smuad	r3, r3, r2
 8000cf4:	617b      	str	r3, [r7, #20]
  return(result);
 8000cf6:	6979      	ldr	r1, [r7, #20]
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	687a      	ldr	r2, [r7, #4]
 8000cfe:	4413      	add	r3, r2
 8000d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	b28b      	uxth	r3, r1
 8000d08:	4413      	add	r3, r2
 8000d0a:	b299      	uxth	r1, r3
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	687a      	ldr	r2, [r7, #4]
 8000d12:	4413      	add	r3, r2
 8000d14:	b20a      	sxth	r2, r1
 8000d16:	801a      	strh	r2, [r3, #0]
        for (j = 0; j < longitud; j++) {
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	623b      	str	r3, [r7, #32]
 8000d1e:	6a3a      	ldr	r2, [r7, #32]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d3cb      	bcc.n	8000cbe <corr_Intrinsic+0x26>
    for (i = 0; i < longitud; i++) {
 8000d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d28:	3301      	adds	r3, #1
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3bb      	bcc.n	8000cac <corr_Intrinsic+0x14>
            }
        }
    }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	372c      	adds	r7, #44	; 0x2c
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
	...

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000d48:	f5ad 4d84 	sub.w	sp, sp, #16896	; 0x4200
 8000d4c:	b086      	sub	sp, #24
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d50:	f001 f932 	bl	8001fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d54:	f000 fd62 	bl	800181c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d58:	f000 fe70 	bl	8001a3c <MX_GPIO_Init>
  MX_ETH_Init();
 8000d5c:	f000 fdc8 	bl	80018f0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d60:	f000 fe14 	bl	800198c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d64:	f000 fe3c 	bl	80019e0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 8000d68:	f7ff fc98 	bl	800069c <PrivilegiosSVC>
  DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos; //activar el contador
 8000d6c:	4bcb      	ldr	r3, [pc, #812]	; (800109c <main+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4aca      	ldr	r2, [pc, #808]	; (800109c <main+0x358>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6013      	str	r3, [r2, #0]

  /*
   * 	EJERCICIO 1 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint32_t resultado[10] = {10,20,10,40,50,60,20,10,20,40};
 8000d78:	4bc9      	ldr	r3, [pc, #804]	; (80010a0 <main+0x35c>)
 8000d7a:	f507 4483 	add.w	r4, r7, #16768	; 0x4180
 8000d7e:	f104 0420 	add.w	r4, r4, #32
 8000d82:	461d      	mov	r5, r3
 8000d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d8c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d90:	e884 0003 	stmia.w	r4, {r0, r1}
  DWT->CYCCNT = 0;  asm_zeros(resultado, 10);  ciclosASM = DWT->CYCCNT;
 8000d94:	4bc1      	ldr	r3, [pc, #772]	; (800109c <main+0x358>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000d9e:	f103 0320 	add.w	r3, r3, #32
 8000da2:	210a      	movs	r1, #10
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa25 	bl	80001f4 <asm_zeros>
 8000daa:	4bbc      	ldr	r3, [pc, #752]	; (800109c <main+0x358>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000db2:	f102 0214 	add.w	r2, r2, #20
 8000db6:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  zeros(resultado, 10);  ciclosC = DWT->CYCCNT;
 8000db8:	4bb8      	ldr	r3, [pc, #736]	; (800109c <main+0x358>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000dc2:	f103 0320 	add.w	r3, r3, #32
 8000dc6:	210a      	movs	r1, #10
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fc98 	bl	80006fe <zeros>
 8000dce:	4bb3      	ldr	r3, [pc, #716]	; (800109c <main+0x358>)
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000dd6:	f102 0210 	add.w	r2, r2, #16
 8000dda:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  zeros_optimizada(resultado, 10);  ciclosC2 = DWT->CYCCNT;
 8000ddc:	4baf      	ldr	r3, [pc, #700]	; (800109c <main+0x358>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000de6:	f103 0320 	add.w	r3, r3, #32
 8000dea:	210a      	movs	r1, #10
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fca2 	bl	8000736 <zeros_optimizada>
 8000df2:	4baa      	ldr	r3, [pc, #680]	; (800109c <main+0x358>)
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000dfa:	f102 020c 	add.w	r2, r2, #12
 8000dfe:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 2 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint32_t vectorIN_ej2[10] = {10,20,10,40,50,60,70,80,90,100};
 8000e00:	4ba8      	ldr	r3, [pc, #672]	; (80010a4 <main+0x360>)
 8000e02:	f507 4482 	add.w	r4, r7, #16640	; 0x4100
 8000e06:	f104 0478 	add.w	r4, r4, #120	; 0x78
 8000e0a:	461d      	mov	r5, r3
 8000e0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000e18:	e884 0003 	stmia.w	r4, {r0, r1}
  uint32_t vectorOUT_ej2[10] = {0};
 8000e1c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000e20:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8000e24:	2228      	movs	r2, #40	; 0x28
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 facb 	bl	80043c4 <memset>
  uint32_t longitud_ej2 = 10, escalar_ej2 = 2;
 8000e2e:	230a      	movs	r3, #10
 8000e30:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000e34:	f102 0208 	add.w	r2, r2, #8
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000e40:	f102 0204 	add.w	r2, r2, #4
 8000e44:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_productoEscalar32(vectorIN_ej2,vectorOUT_ej2,longitud_ej2,escalar_ej2);  ciclosASM = DWT->CYCCNT;
 8000e46:	4b95      	ldr	r3, [pc, #596]	; (800109c <main+0x358>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	605a      	str	r2, [r3, #4]
 8000e4c:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000e50:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8000e54:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000e58:	f100 0078 	add.w	r0, r0, #120	; 0x78
 8000e5c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000e60:	f103 0304 	add.w	r3, r3, #4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000e6a:	f102 0208 	add.w	r2, r2, #8
 8000e6e:	6812      	ldr	r2, [r2, #0]
 8000e70:	f7ff f9c9 	bl	8000206 <asm_productoEscalar32>
 8000e74:	4b89      	ldr	r3, [pc, #548]	; (800109c <main+0x358>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000e7c:	f102 0214 	add.w	r2, r2, #20
 8000e80:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  productoEscalar32(vectorIN_ej2,vectorOUT_ej2,longitud_ej2,escalar_ej2);  ciclosC = DWT->CYCCNT;
 8000e82:	4b86      	ldr	r3, [pc, #536]	; (800109c <main+0x358>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000e8c:	f101 0150 	add.w	r1, r1, #80	; 0x50
 8000e90:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000e94:	f100 0078 	add.w	r0, r0, #120	; 0x78
 8000e98:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8000e9c:	f103 0304 	add.w	r3, r3, #4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000ea6:	f102 0208 	add.w	r2, r2, #8
 8000eaa:	6812      	ldr	r2, [r2, #0]
 8000eac:	f7ff fc5f 	bl	800076e <productoEscalar32>
 8000eb0:	4b7a      	ldr	r3, [pc, #488]	; (800109c <main+0x358>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000eb8:	f102 0210 	add.w	r2, r2, #16
 8000ebc:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 3 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint16_t vectorIN_ej3[5] = {10,20,10,40,50};
 8000ebe:	4a7a      	ldr	r2, [pc, #488]	; (80010a8 <main+0x364>)
 8000ec0:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000ec4:	f103 0344 	add.w	r3, r3, #68	; 0x44
 8000ec8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eca:	c303      	stmia	r3!, {r0, r1}
 8000ecc:	801a      	strh	r2, [r3, #0]
  uint16_t vectorOUT_ej3[5] = {0};
 8000ece:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000ed2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	811a      	strh	r2, [r3, #8]
  uint32_t longitud_ej3 = 5;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000ee4:	6013      	str	r3, [r2, #0]
  uint16_t escalar_ej3 = 2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000eec:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8000ef0:	8013      	strh	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_productoEscalar16(vectorIN_ej3,vectorOUT_ej3,longitud_ej3,escalar_ej3);  ciclosASM = DWT->CYCCNT;
 8000ef2:	4b6a      	ldr	r3, [pc, #424]	; (800109c <main+0x358>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	605a      	str	r2, [r3, #4]
 8000ef8:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000efc:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000f06:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8000f0a:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000f0e:	f100 0044 	add.w	r0, r0, #68	; 0x44
 8000f12:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000f16:	6812      	ldr	r2, [r2, #0]
 8000f18:	f7ff f980 	bl	800021c <asm_productoEscalar16>
 8000f1c:	4b5f      	ldr	r3, [pc, #380]	; (800109c <main+0x358>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000f24:	f102 0214 	add.w	r2, r2, #20
 8000f28:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  productoEscalar16(vectorIN_ej3,vectorOUT_ej3,longitud_ej3,escalar_ej3);  ciclosC = DWT->CYCCNT;
 8000f2a:	4b5c      	ldr	r3, [pc, #368]	; (800109c <main+0x358>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000f34:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000f3e:	f101 0138 	add.w	r1, r1, #56	; 0x38
 8000f42:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000f46:	f100 0044 	add.w	r0, r0, #68	; 0x44
 8000f4a:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	f7ff fc32 	bl	80007b8 <productoEscalar16>
 8000f54:	4b51      	ldr	r3, [pc, #324]	; (800109c <main+0x358>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000f5c:	f102 0210 	add.w	r2, r2, #16
 8000f60:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 4 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint16_t vectorIN_ej4[5] = {10000,10000,10000,10000,10000};
 8000f62:	4a52      	ldr	r2, [pc, #328]	; (80010ac <main+0x368>)
 8000f64:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000f68:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8000f6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f6e:	c303      	stmia	r3!, {r0, r1}
 8000f70:	801a      	strh	r2, [r3, #0]
  uint16_t vectorOUT_ej4[5] = {0};
 8000f72:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000f76:	f103 0320 	add.w	r3, r3, #32
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	811a      	strh	r2, [r3, #8]
  uint32_t longitud_ej4 = 5;
 8000f82:	2305      	movs	r3, #5
 8000f84:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000f88:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8000f8c:	6013      	str	r3, [r2, #0]
  uint16_t escalar_ej4 = 6;
 8000f8e:	2306      	movs	r3, #6
 8000f90:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000f94:	f102 0276 	add.w	r2, r2, #118	; 0x76
 8000f98:	8013      	strh	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_productoEscalar12(vectorIN_ej4,vectorOUT_ej4,longitud_ej4,escalar_ej4);  ciclosASM = DWT->CYCCNT;
 8000f9a:	4b40      	ldr	r3, [pc, #256]	; (800109c <main+0x358>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000fa4:	f103 0376 	add.w	r3, r3, #118	; 0x76
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000fae:	f101 0120 	add.w	r1, r1, #32
 8000fb2:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000fb6:	f100 002c 	add.w	r0, r0, #44	; 0x2c
 8000fba:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000fbe:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8000fc2:	6812      	ldr	r2, [r2, #0]
 8000fc4:	f7ff f935 	bl	8000232 <asm_productoEscalar12>
 8000fc8:	4b34      	ldr	r3, [pc, #208]	; (800109c <main+0x358>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8000fd0:	f102 0214 	add.w	r2, r2, #20
 8000fd4:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  productoEscalar12(vectorIN_ej4,vectorOUT_ej4,longitud_ej4,escalar_ej4);  ciclosC = DWT->CYCCNT;
 8000fd6:	4b31      	ldr	r3, [pc, #196]	; (800109c <main+0x358>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000fe0:	f103 0376 	add.w	r3, r3, #118	; 0x76
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000fea:	f101 0120 	add.w	r1, r1, #32
 8000fee:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000ff2:	f100 002c 	add.w	r0, r0, #44	; 0x2c
 8000ff6:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000ffa:	f102 0278 	add.w	r2, r2, #120	; 0x78
 8000ffe:	6812      	ldr	r2, [r2, #0]
 8001000:	f7ff fc00 	bl	8000804 <productoEscalar12>
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <main+0x358>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 800100c:	f102 0210 	add.w	r2, r2, #16
 8001010:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 5 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint16_t vectorIN_ej5[10] = {1,2,3,4,5,6,7,8,9};
 8001012:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001016:	f103 0318 	add.w	r3, r3, #24
 800101a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800101e:	461a      	mov	r2, r3
 8001020:	2300      	movs	r3, #0
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	6053      	str	r3, [r2, #4]
 8001026:	6093      	str	r3, [r2, #8]
 8001028:	60d3      	str	r3, [r2, #12]
 800102a:	6113      	str	r3, [r2, #16]
 800102c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001030:	f103 0318 	add.w	r3, r3, #24
 8001034:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001038:	2201      	movs	r2, #1
 800103a:	801a      	strh	r2, [r3, #0]
 800103c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001040:	f103 0318 	add.w	r3, r3, #24
 8001044:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001048:	2202      	movs	r2, #2
 800104a:	805a      	strh	r2, [r3, #2]
 800104c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001050:	f103 0318 	add.w	r3, r3, #24
 8001054:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001058:	2203      	movs	r2, #3
 800105a:	809a      	strh	r2, [r3, #4]
 800105c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001060:	f103 0318 	add.w	r3, r3, #24
 8001064:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001068:	2204      	movs	r2, #4
 800106a:	80da      	strh	r2, [r3, #6]
 800106c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001070:	f103 0318 	add.w	r3, r3, #24
 8001074:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001078:	2205      	movs	r2, #5
 800107a:	811a      	strh	r2, [r3, #8]
 800107c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001080:	f103 0318 	add.w	r3, r3, #24
 8001084:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001088:	2206      	movs	r2, #6
 800108a:	815a      	strh	r2, [r3, #10]
 800108c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001090:	f103 0318 	add.w	r3, r3, #24
 8001094:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001098:	e00a      	b.n	80010b0 <main+0x36c>
 800109a:	bf00      	nop
 800109c:	e0001000 	.word	0xe0001000
 80010a0:	080043ec 	.word	0x080043ec
 80010a4:	08004414 	.word	0x08004414
 80010a8:	0800443c 	.word	0x0800443c
 80010ac:	08004448 	.word	0x08004448
 80010b0:	2207      	movs	r2, #7
 80010b2:	819a      	strh	r2, [r3, #12]
 80010b4:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80010b8:	f103 0318 	add.w	r3, r3, #24
 80010bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010c0:	2208      	movs	r2, #8
 80010c2:	81da      	strh	r2, [r3, #14]
 80010c4:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80010c8:	f103 0318 	add.w	r3, r3, #24
 80010cc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80010d0:	2209      	movs	r2, #9
 80010d2:	821a      	strh	r2, [r3, #16]
  uint16_t vectorOUT_ej5[10] = {0};
 80010d4:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80010d8:	f103 0318 	add.w	r3, r3, #24
 80010dc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80010e0:	461a      	mov	r2, r3
 80010e2:	2300      	movs	r3, #0
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	6053      	str	r3, [r2, #4]
 80010e8:	6093      	str	r3, [r2, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
 80010ec:	6113      	str	r3, [r2, #16]
  uint32_t longitud_ej5 = 10;
 80010ee:	230a      	movs	r3, #10
 80010f0:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80010f4:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80010f8:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_filtroVentana10(vectorIN_ej5,vectorOUT_ej5,longitud_ej5);  ciclosASM = DWT->CYCCNT;
 80010fa:	4bcd      	ldr	r3, [pc, #820]	; (8001430 <main+0x6ec>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8001104:	f101 0178 	add.w	r1, r1, #120	; 0x78
 8001108:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 800110c:	f103 030c 	add.w	r3, r3, #12
 8001110:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001114:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8001118:	6812      	ldr	r2, [r2, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f896 	bl	800024c <asm_filtroVentana10>
 8001120:	4bc3      	ldr	r3, [pc, #780]	; (8001430 <main+0x6ec>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8001128:	f102 0214 	add.w	r2, r2, #20
 800112c:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  filtroVentana10(vectorIN_ej5,vectorOUT_ej5,longitud_ej5);  ciclosC = DWT->CYCCNT;
 800112e:	4bc0      	ldr	r3, [pc, #768]	; (8001430 <main+0x6ec>)
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8001138:	f101 0178 	add.w	r1, r1, #120	; 0x78
 800113c:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8001140:	f103 030c 	add.w	r3, r3, #12
 8001144:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001148:	f102 0270 	add.w	r2, r2, #112	; 0x70
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fb8d 	bl	800086e <filtroVentana10>
 8001154:	4bb6      	ldr	r3, [pc, #728]	; (8001430 <main+0x6ec>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 800115c:	f102 0210 	add.w	r2, r2, #16
 8001160:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 6 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint32_t vectorIN_ej6[5] = {0xFFFF,0xFEFF,0xEAFF,0xE9FF,0x01FF};
 8001162:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001166:	f103 0318 	add.w	r3, r3, #24
 800116a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800116e:	4ab1      	ldr	r2, [pc, #708]	; (8001434 <main+0x6f0>)
 8001170:	461c      	mov	r4, r3
 8001172:	4615      	mov	r5, r2
 8001174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	6023      	str	r3, [r4, #0]
  uint32_t vectorOUT_ej6[5] = {0};
 800117c:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 8001180:	f103 0318 	add.w	r3, r3, #24
 8001184:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001188:	461a      	mov	r2, r3
 800118a:	2300      	movs	r3, #0
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	6053      	str	r3, [r2, #4]
 8001190:	6093      	str	r3, [r2, #8]
 8001192:	60d3      	str	r3, [r2, #12]
 8001194:	6113      	str	r3, [r2, #16]
  uint32_t longitud_ej6 = 5;
 8001196:	2305      	movs	r3, #5
 8001198:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 800119c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80011a0:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_pack32to16(vectorIN_ej6,vectorOUT_ej6,longitud_ej6);  ciclosASM = DWT->CYCCNT;
 80011a2:	4ba3      	ldr	r3, [pc, #652]	; (8001430 <main+0x6ec>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 80011ac:	f101 0150 	add.w	r1, r1, #80	; 0x50
 80011b0:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80011b4:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80011b8:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80011bc:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff f869 	bl	800029a <asm_pack32to16>
 80011c8:	4b99      	ldr	r3, [pc, #612]	; (8001430 <main+0x6ec>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80011d0:	f102 0214 	add.w	r2, r2, #20
 80011d4:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  pack32to16(vectorIN_ej6,vectorOUT_ej6,longitud_ej6);  ciclosC = DWT->CYCCNT;
 80011d6:	4b96      	ldr	r3, [pc, #600]	; (8001430 <main+0x6ec>)
 80011d8:	2200      	movs	r2, #0
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 80011e0:	f101 0150 	add.w	r1, r1, #80	; 0x50
 80011e4:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 80011e8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80011ec:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80011f0:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fb94 	bl	8000924 <pack32to16>
 80011fc:	4b8c      	ldr	r3, [pc, #560]	; (8001430 <main+0x6ec>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8001204:	f102 0210 	add.w	r2, r2, #16
 8001208:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 7 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint32_t vectorIN_ej7[10] = {1,2,3,5,4,8,2,3,5,0};
 800120a:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 800120e:	f103 0318 	add.w	r3, r3, #24
 8001212:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001216:	4a88      	ldr	r2, [pc, #544]	; (8001438 <main+0x6f4>)
 8001218:	461c      	mov	r4, r3
 800121a:	4615      	mov	r5, r2
 800121c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001224:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001228:	e884 0003 	stmia.w	r4, {r0, r1}
  uint32_t longitud_ej7 = 10;
 800122c:	230a      	movs	r3, #10
 800122e:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001232:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001236:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  uint32_t pos = asm_max32(vectorIN_ej7,longitud_ej7);  ciclosASM = DWT->CYCCNT;
 8001238:	4b7d      	ldr	r3, [pc, #500]	; (8001430 <main+0x6ec>)
 800123a:	2200      	movs	r2, #0
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001242:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001246:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 800124a:	f102 0268 	add.w	r2, r2, #104	; 0x68
 800124e:	6811      	ldr	r1, [r2, #0]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff f82f 	bl	80002b4 <asm_max32>
 8001256:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 800125a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 800125e:	6018      	str	r0, [r3, #0]
 8001260:	4b73      	ldr	r3, [pc, #460]	; (8001430 <main+0x6ec>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8001268:	f102 0214 	add.w	r2, r2, #20
 800126c:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  uint32_t pos2 = max(vectorIN_ej7,longitud_ej7);  ciclosC = DWT->CYCCNT;
 800126e:	4b70      	ldr	r3, [pc, #448]	; (8001430 <main+0x6ec>)
 8001270:	2200      	movs	r2, #0
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001278:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800127c:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001280:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001284:	6811      	ldr	r1, [r2, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fb6f 	bl	800096a <max>
 800128c:	4603      	mov	r3, r0
 800128e:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001292:	f102 0260 	add.w	r2, r2, #96	; 0x60
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b65      	ldr	r3, [pc, #404]	; (8001430 <main+0x6ec>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80012a0:	f102 0210 	add.w	r2, r2, #16
 80012a4:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 8 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint32_t vectorIN_ej8[10] = {1,2,3,4,5,6,7,8,9,10};
 80012a6:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80012aa:	f103 0318 	add.w	r3, r3, #24
 80012ae:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80012b2:	4a62      	ldr	r2, [pc, #392]	; (800143c <main+0x6f8>)
 80012b4:	461c      	mov	r4, r3
 80012b6:	4615      	mov	r5, r2
 80012b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012c4:	e884 0003 	stmia.w	r4, {r0, r1}
  uint32_t vectorOUT_ej8[10] = {0};
 80012c8:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 80012cc:	f103 0318 	add.w	r3, r3, #24
 80012d0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80012d4:	4618      	mov	r0, r3
 80012d6:	2328      	movs	r3, #40	; 0x28
 80012d8:	461a      	mov	r2, r3
 80012da:	2100      	movs	r1, #0
 80012dc:	f003 f872 	bl	80043c4 <memset>
  uint32_t longitud_ej8 = 10;
 80012e0:	230a      	movs	r3, #10
 80012e2:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80012e6:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 80012ea:	6013      	str	r3, [r2, #0]
  uint32_t N = 2;
 80012ec:	2302      	movs	r3, #2
 80012ee:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80012f2:	f102 0258 	add.w	r2, r2, #88	; 0x58
 80012f6:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_downsampleM(vectorIN_ej8,vectorOUT_ej8,longitud_ej8,N);  ciclosASM = DWT->CYCCNT;
 80012f8:	4b4d      	ldr	r3, [pc, #308]	; (8001430 <main+0x6ec>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 8001302:	f101 0158 	add.w	r1, r1, #88	; 0x58
 8001306:	f507 4081 	add.w	r0, r7, #16512	; 0x4080
 800130a:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 800130e:	f103 0358 	add.w	r3, r3, #88	; 0x58
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001318:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 800131c:	6812      	ldr	r2, [r2, #0]
 800131e:	f7fe ffde 	bl	80002de <asm_downsampleM>
 8001322:	4b43      	ldr	r3, [pc, #268]	; (8001430 <main+0x6ec>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 800132a:	f102 0214 	add.w	r2, r2, #20
 800132e:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  downsampleM(vectorIN_ej8,vectorOUT_ej8,longitud_ej8,N);  ciclosC = DWT->CYCCNT;
 8001330:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <main+0x6ec>)
 8001332:	2200      	movs	r2, #0
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 800133a:	f101 0158 	add.w	r1, r1, #88	; 0x58
 800133e:	f507 4081 	add.w	r0, r7, #16512	; 0x4080
 8001342:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8001346:	f103 0358 	add.w	r3, r3, #88	; 0x58
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001350:	f102 025c 	add.w	r2, r2, #92	; 0x5c
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	f7ff fb33 	bl	80009c0 <downsampleM>
 800135a:	4b35      	ldr	r3, [pc, #212]	; (8001430 <main+0x6ec>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 8001362:	f102 0210 	add.w	r2, r2, #16
 8001366:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 9 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint16_t vectorIN_ej9[10] = {1,2,3,4,5,6,7,8,9,10};
 8001368:	f507 4384 	add.w	r3, r7, #16896	; 0x4200
 800136c:	f103 0318 	add.w	r3, r3, #24
 8001370:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001374:	4a32      	ldr	r2, [pc, #200]	; (8001440 <main+0x6fc>)
 8001376:	461c      	mov	r4, r3
 8001378:	4615      	mov	r5, r2
 800137a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800137c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800137e:	682b      	ldr	r3, [r5, #0]
 8001380:	6023      	str	r3, [r4, #0]
  uint32_t longitud_ej9 = 10;
 8001382:	230a      	movs	r3, #10
 8001384:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001388:	f102 0254 	add.w	r2, r2, #84	; 0x54
 800138c:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_invertir(vectorIN_ej9,longitud_ej9);  ciclosASM = DWT->CYCCNT;
 800138e:	4b28      	ldr	r3, [pc, #160]	; (8001430 <main+0x6ec>)
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001398:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800139c:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80013a0:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80013a4:	6811      	ldr	r1, [r2, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe ffa9 	bl	80002fe <asm_invertir>
 80013ac:	4b20      	ldr	r3, [pc, #128]	; (8001430 <main+0x6ec>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80013b4:	f102 0214 	add.w	r2, r2, #20
 80013b8:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  invertir(vectorIN_ej9,longitud_ej9);  ciclosC = DWT->CYCCNT;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <main+0x6ec>)
 80013bc:	2200      	movs	r2, #0
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80013c4:	f103 0344 	add.w	r3, r3, #68	; 0x44
 80013c8:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80013cc:	f102 0254 	add.w	r2, r2, #84	; 0x54
 80013d0:	6811      	ldr	r1, [r2, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fb1c 	bl	8000a10 <invertir>
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <main+0x6ec>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80013e0:	f102 0210 	add.w	r2, r2, #16
 80013e4:	6013      	str	r3, [r2, #0]
  int16_t muestras[4096];
  int16_t muestras_eco[4096];

 //prueba de eco, no hago una funcion asm con SIMD porque no encuentro donde aplicarlo eficientemente
  muestras[0] = 10;  muestras[1] = 15;  muestras[2] = 20;  muestras[3] = 25;
 80013e6:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80013ea:	f103 0318 	add.w	r3, r3, #24
 80013ee:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80013f2:	220a      	movs	r2, #10
 80013f4:	801a      	strh	r2, [r3, #0]
 80013f6:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80013fa:	f103 0318 	add.w	r3, r3, #24
 80013fe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001402:	220f      	movs	r2, #15
 8001404:	805a      	strh	r2, [r3, #2]
 8001406:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800140a:	f103 0318 	add.w	r3, r3, #24
 800140e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001412:	2214      	movs	r2, #20
 8001414:	809a      	strh	r2, [r3, #4]
 8001416:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800141a:	f103 0318 	add.w	r3, r3, #24
 800141e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001422:	2219      	movs	r2, #25
 8001424:	80da      	strh	r2, [r3, #6]
  muestras[882] = 10;  muestras[883] = 20;  muestras[884] = 30;  muestras[885] = 40;
 8001426:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800142a:	f103 0318 	add.w	r3, r3, #24
 800142e:	e009      	b.n	8001444 <main+0x700>
 8001430:	e0001000 	.word	0xe0001000
 8001434:	08004454 	.word	0x08004454
 8001438:	08004468 	.word	0x08004468
 800143c:	08004490 	.word	0x08004490
 8001440:	080044b8 	.word	0x080044b8
 8001444:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001448:	220a      	movs	r2, #10
 800144a:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 800144e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001452:	f103 0318 	add.w	r3, r3, #24
 8001456:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800145a:	2214      	movs	r2, #20
 800145c:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 8001460:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001464:	f103 0318 	add.w	r3, r3, #24
 8001468:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800146c:	221e      	movs	r2, #30
 800146e:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 8001472:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001476:	f103 0318 	add.w	r3, r3, #24
 800147a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800147e:	2228      	movs	r2, #40	; 0x28
 8001480:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  muestras_eco[882] = 0;  muestras_eco[883] = 0;  muestras_eco[884] = 0;  muestras_eco[885] = 0;
 8001484:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001488:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800148c:	2200      	movs	r2, #0
 800148e:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 8001492:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001496:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800149a:	2200      	movs	r2, #0
 800149c:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 80014a0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80014a4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80014a8:	2200      	movs	r2, #0
 80014aa:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 80014ae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80014b2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80014b6:	2200      	movs	r2, #0
 80014b8:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  DWT->CYCCNT = 0;  asm_eco(muestras, muestras_eco);  ciclosASM = DWT->CYCCNT;
 80014bc:	4bd5      	ldr	r3, [pc, #852]	; (8001814 <main+0xad0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80014c6:	3a54      	subs	r2, #84	; 0x54
 80014c8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80014cc:	f103 0318 	add.w	r3, r3, #24
 80014d0:	3b14      	subs	r3, #20
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ff26 	bl	8000326 <asm_eco>
 80014da:	4bce      	ldr	r3, [pc, #824]	; (8001814 <main+0xad0>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80014e2:	f102 0214 	add.w	r2, r2, #20
 80014e6:	6013      	str	r3, [r2, #0]

  muestras[0] = 10;  muestras[1] = 15;  muestras[2] = 20;  muestras[3] = 25;
 80014e8:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80014ec:	f103 0318 	add.w	r3, r3, #24
 80014f0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80014f4:	220a      	movs	r2, #10
 80014f6:	801a      	strh	r2, [r3, #0]
 80014f8:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80014fc:	f103 0318 	add.w	r3, r3, #24
 8001500:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001504:	220f      	movs	r2, #15
 8001506:	805a      	strh	r2, [r3, #2]
 8001508:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800150c:	f103 0318 	add.w	r3, r3, #24
 8001510:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001514:	2214      	movs	r2, #20
 8001516:	809a      	strh	r2, [r3, #4]
 8001518:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800151c:	f103 0318 	add.w	r3, r3, #24
 8001520:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001524:	2219      	movs	r2, #25
 8001526:	80da      	strh	r2, [r3, #6]
  muestras[882] = 10;  muestras[883] = 20;  muestras[884] = 30;  muestras[885] = 40;
 8001528:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800152c:	f103 0318 	add.w	r3, r3, #24
 8001530:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001534:	220a      	movs	r2, #10
 8001536:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 800153a:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800153e:	f103 0318 	add.w	r3, r3, #24
 8001542:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001546:	2214      	movs	r2, #20
 8001548:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 800154c:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001550:	f103 0318 	add.w	r3, r3, #24
 8001554:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001558:	221e      	movs	r2, #30
 800155a:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 800155e:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001562:	f103 0318 	add.w	r3, r3, #24
 8001566:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800156a:	2228      	movs	r2, #40	; 0x28
 800156c:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  muestras_eco[882] = 0;  muestras_eco[883] = 0;  muestras_eco[884] = 0;  muestras_eco[885] = 0;
 8001570:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001574:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001578:	2200      	movs	r2, #0
 800157a:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 800157e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001582:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001586:	2200      	movs	r2, #0
 8001588:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 800158c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001590:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001594:	2200      	movs	r2, #0
 8001596:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 800159a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800159e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80015a2:	2200      	movs	r2, #0
 80015a4:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  DWT->CYCCNT = 0;  introducirEco(muestras, muestras_eco);  ciclosC = DWT->CYCCNT;
 80015a8:	4b9a      	ldr	r3, [pc, #616]	; (8001814 <main+0xad0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80015b2:	3a54      	subs	r2, #84	; 0x54
 80015b4:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80015b8:	f103 0318 	add.w	r3, r3, #24
 80015bc:	3b14      	subs	r3, #20
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fa5c 	bl	8000a7e <introducirEco>
 80015c6:	4b93      	ldr	r3, [pc, #588]	; (8001814 <main+0xad0>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80015ce:	f102 0210 	add.w	r2, r2, #16
 80015d2:	6013      	str	r3, [r2, #0]

  muestras[0] = 10;  muestras[1] = 15;  muestras[2] = 20;  muestras[3] = 25;
 80015d4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80015d8:	f103 0318 	add.w	r3, r3, #24
 80015dc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80015e0:	220a      	movs	r2, #10
 80015e2:	801a      	strh	r2, [r3, #0]
 80015e4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80015e8:	f103 0318 	add.w	r3, r3, #24
 80015ec:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80015f0:	220f      	movs	r2, #15
 80015f2:	805a      	strh	r2, [r3, #2]
 80015f4:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 80015f8:	f103 0318 	add.w	r3, r3, #24
 80015fc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001600:	2214      	movs	r2, #20
 8001602:	809a      	strh	r2, [r3, #4]
 8001604:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001608:	f103 0318 	add.w	r3, r3, #24
 800160c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001610:	2219      	movs	r2, #25
 8001612:	80da      	strh	r2, [r3, #6]
  muestras[882] = 10;  muestras[883] = 20;  muestras[884] = 30;  muestras[885] = 40;
 8001614:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 8001618:	f103 0318 	add.w	r3, r3, #24
 800161c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001620:	220a      	movs	r2, #10
 8001622:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 8001626:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800162a:	f103 0318 	add.w	r3, r3, #24
 800162e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001632:	2214      	movs	r2, #20
 8001634:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 8001638:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800163c:	f103 0318 	add.w	r3, r3, #24
 8001640:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001644:	221e      	movs	r2, #30
 8001646:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 800164a:	f507 5308 	add.w	r3, r7, #8704	; 0x2200
 800164e:	f103 0318 	add.w	r3, r3, #24
 8001652:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001656:	2228      	movs	r2, #40	; 0x28
 8001658:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  muestras_eco[882] = 0;  muestras_eco[883] = 0;  muestras_eco[884] = 0;  muestras_eco[885] = 0;
 800165c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001660:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001664:	2200      	movs	r2, #0
 8001666:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 800166a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800166e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001672:	2200      	movs	r2, #0
 8001674:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 8001678:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800167c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001680:	2200      	movs	r2, #0
 8001682:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 8001686:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800168a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800168e:	2200      	movs	r2, #0
 8001690:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  DWT->CYCCNT = 0;  introducirEco_Intrinsic(muestras, muestras_eco);  ciclosC = DWT->CYCCNT;
 8001694:	4b5f      	ldr	r3, [pc, #380]	; (8001814 <main+0xad0>)
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800169e:	3a54      	subs	r2, #84	; 0x54
 80016a0:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80016a4:	f103 0318 	add.w	r3, r3, #24
 80016a8:	3b14      	subs	r3, #20
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff fa3e 	bl	8000b2e <introducirEco_Intrinsic>
 80016b2:	4b58      	ldr	r3, [pc, #352]	; (8001814 <main+0xad0>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80016ba:	f102 0210 	add.w	r2, r2, #16
 80016be:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 10 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */
  uint32_t longitude = 15;
 80016c0:	230f      	movs	r3, #15
 80016c2:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80016c6:	f102 0250 	add.w	r2, r2, #80	; 0x50
 80016ca:	6013      	str	r3, [r2, #0]
  int16_t vX[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5};
 80016cc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80016d0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80016d4:	4a50      	ldr	r2, [pc, #320]	; (8001818 <main+0xad4>)
 80016d6:	461c      	mov	r4, r3
 80016d8:	4615      	mov	r5, r2
 80016da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016e2:	c407      	stmia	r4!, {r0, r1, r2}
 80016e4:	8023      	strh	r3, [r4, #0]
  int16_t vY[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -1, -2, -3, -4, -5};
 80016e6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80016ea:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80016ee:	4a4a      	ldr	r2, [pc, #296]	; (8001818 <main+0xad4>)
 80016f0:	461c      	mov	r4, r3
 80016f2:	4615      	mov	r5, r2
 80016f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80016fc:	c407      	stmia	r4!, {r0, r1, r2}
 80016fe:	8023      	strh	r3, [r4, #0]
  int16_t vOut[longitude];
 8001700:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8001704:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001708:	6819      	ldr	r1, [r3, #0]
 800170a:	460b      	mov	r3, r1
 800170c:	3b01      	subs	r3, #1
 800170e:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001712:	f102 024c 	add.w	r2, r2, #76	; 0x4c
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	2300      	movs	r3, #0
 800171a:	468a      	mov	sl, r1
 800171c:	469b      	mov	fp, r3
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800172a:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 800172e:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001732:	2300      	movs	r3, #0
 8001734:	4688      	mov	r8, r1
 8001736:	4699      	mov	r9, r3
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001744:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001748:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800174c:	004b      	lsls	r3, r1, #1
 800174e:	3307      	adds	r3, #7
 8001750:	08db      	lsrs	r3, r3, #3
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	ebad 0d03 	sub.w	sp, sp, r3
 8001758:	466b      	mov	r3, sp
 800175a:	3301      	adds	r3, #1
 800175c:	085b      	lsrs	r3, r3, #1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001764:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001768:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;    corr(vX, vY, vOut, longitude);    ciclosC = DWT->CYCCNT;
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <main+0xad0>)
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	f107 0118 	add.w	r1, r7, #24
 8001774:	3914      	subs	r1, #20
 8001776:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800177a:	3874      	subs	r0, #116	; 0x74
 800177c:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8001780:	f103 0350 	add.w	r3, r3, #80	; 0x50
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 800178a:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800178e:	6812      	ldr	r2, [r2, #0]
 8001790:	f7ff fa32 	bl	8000bf8 <corr>
 8001794:	4b1f      	ldr	r3, [pc, #124]	; (8001814 <main+0xad0>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 800179c:	f102 0210 	add.w	r2, r2, #16
 80017a0:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;	corr_Intrinsic(vX, vY, vOut, longitude);    ciclosC = DWT->CYCCNT;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <main+0xad0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	f107 0118 	add.w	r1, r7, #24
 80017ac:	3914      	subs	r1, #20
 80017ae:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80017b2:	3874      	subs	r0, #116	; 0x74
 80017b4:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 80017b8:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80017c2:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	f7ff fa66 	bl	8000c98 <corr_Intrinsic>
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <main+0xad0>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 80017d4:	f102 0210 	add.w	r2, r2, #16
 80017d8:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;    asm_calcularCorrelacion(vX, vY, vOut, longitude);    ciclosASM = DWT->CYCCNT;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <main+0xad0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	f107 0118 	add.w	r1, r7, #24
 80017e4:	3914      	subs	r1, #20
 80017e6:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80017ea:	3874      	subs	r0, #116	; 0x74
 80017ec:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 80017f0:	f103 0350 	add.w	r3, r3, #80	; 0x50
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80017fa:	f102 0248 	add.w	r2, r2, #72	; 0x48
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	f7fe fdad 	bl	800035e <asm_calcularCorrelacion>
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <main+0xad0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f507 4284 	add.w	r2, r7, #16896	; 0x4200
 800180c:	f102 0214 	add.w	r2, r2, #20
 8001810:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001812:	e7fe      	b.n	8001812 <main+0xace>
 8001814:	e0001000 	.word	0xe0001000
 8001818:	080044cc 	.word	0x080044cc

0800181c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	; 0x50
 8001820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	2230      	movs	r2, #48	; 0x30
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f002 fdca 	bl	80043c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	4b28      	ldr	r3, [pc, #160]	; (80018e8 <SystemClock_Config+0xcc>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	4a27      	ldr	r2, [pc, #156]	; (80018e8 <SystemClock_Config+0xcc>)
 800184a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184e:	6413      	str	r3, [r2, #64]	; 0x40
 8001850:	4b25      	ldr	r3, [pc, #148]	; (80018e8 <SystemClock_Config+0xcc>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	4b22      	ldr	r3, [pc, #136]	; (80018ec <SystemClock_Config+0xd0>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a21      	ldr	r2, [pc, #132]	; (80018ec <SystemClock_Config+0xd0>)
 8001866:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <SystemClock_Config+0xd0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001878:	2301      	movs	r3, #1
 800187a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800187c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001882:	2302      	movs	r3, #2
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001886:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800188a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800188c:	2304      	movs	r3, #4
 800188e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001890:	23a8      	movs	r3, #168	; 0xa8
 8001892:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001894:	2302      	movs	r3, #2
 8001896:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001898:	2307      	movs	r3, #7
 800189a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800189c:	f107 0320 	add.w	r3, r7, #32
 80018a0:	4618      	mov	r0, r3
 80018a2:	f001 fb0f 	bl	8002ec4 <HAL_RCC_OscConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018ac:	f000 f974 	bl	8001b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b0:	230f      	movs	r3, #15
 80018b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018b4:	2302      	movs	r3, #2
 80018b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	2105      	movs	r1, #5
 80018ce:	4618      	mov	r0, r3
 80018d0:	f001 fd70 	bl	80033b4 <HAL_RCC_ClockConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018da:	f000 f95d 	bl	8001b98 <Error_Handler>
  }
}
 80018de:	bf00      	nop
 80018e0:	3750      	adds	r7, #80	; 0x50
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800
 80018ec:	40007000 	.word	0x40007000

080018f0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <MX_ETH_Init+0x84>)
 80018f6:	4a20      	ldr	r2, [pc, #128]	; (8001978 <MX_ETH_Init+0x88>)
 80018f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80018fa:	4b20      	ldr	r3, [pc, #128]	; (800197c <MX_ETH_Init+0x8c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001900:	4b1e      	ldr	r3, [pc, #120]	; (800197c <MX_ETH_Init+0x8c>)
 8001902:	2280      	movs	r2, #128	; 0x80
 8001904:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001906:	4b1d      	ldr	r3, [pc, #116]	; (800197c <MX_ETH_Init+0x8c>)
 8001908:	22e1      	movs	r2, #225	; 0xe1
 800190a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_ETH_Init+0x8c>)
 800190e:	2200      	movs	r2, #0
 8001910:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001912:	4b1a      	ldr	r3, [pc, #104]	; (800197c <MX_ETH_Init+0x8c>)
 8001914:	2200      	movs	r2, #0
 8001916:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001918:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_ETH_Init+0x8c>)
 800191a:	2200      	movs	r2, #0
 800191c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_ETH_Init+0x84>)
 8001920:	4a16      	ldr	r2, [pc, #88]	; (800197c <MX_ETH_Init+0x8c>)
 8001922:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <MX_ETH_Init+0x84>)
 8001926:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800192a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_ETH_Init+0x84>)
 800192e:	4a14      	ldr	r2, [pc, #80]	; (8001980 <MX_ETH_Init+0x90>)
 8001930:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <MX_ETH_Init+0x84>)
 8001934:	4a13      	ldr	r2, [pc, #76]	; (8001984 <MX_ETH_Init+0x94>)
 8001936:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_ETH_Init+0x84>)
 800193a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800193e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001940:	480c      	ldr	r0, [pc, #48]	; (8001974 <MX_ETH_Init+0x84>)
 8001942:	f000 fcb5 	bl	80022b0 <HAL_ETH_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800194c:	f000 f924 	bl	8001b98 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001950:	2238      	movs	r2, #56	; 0x38
 8001952:	2100      	movs	r1, #0
 8001954:	480c      	ldr	r0, [pc, #48]	; (8001988 <MX_ETH_Init+0x98>)
 8001956:	f002 fd35 	bl	80043c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <MX_ETH_Init+0x98>)
 800195c:	2221      	movs	r2, #33	; 0x21
 800195e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001960:	4b09      	ldr	r3, [pc, #36]	; (8001988 <MX_ETH_Init+0x98>)
 8001962:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001966:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <MX_ETH_Init+0x98>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200001a0 	.word	0x200001a0
 8001978:	40028000 	.word	0x40028000
 800197c:	200007a0 	.word	0x200007a0
 8001980:	20000100 	.word	0x20000100
 8001984:	20000060 	.word	0x20000060
 8001988:	20000028 	.word	0x20000028

0800198c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001990:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <MX_USART3_UART_Init+0x4c>)
 8001992:	4a12      	ldr	r2, [pc, #72]	; (80019dc <MX_USART3_UART_Init+0x50>)
 8001994:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <MX_USART3_UART_Init+0x4c>)
 8001998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800199c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <MX_USART3_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <MX_USART3_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <MX_USART3_UART_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019b0:	4b09      	ldr	r3, [pc, #36]	; (80019d8 <MX_USART3_UART_Init+0x4c>)
 80019b2:	220c      	movs	r2, #12
 80019b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <MX_USART3_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019bc:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <MX_USART3_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019c2:	4805      	ldr	r0, [pc, #20]	; (80019d8 <MX_USART3_UART_Init+0x4c>)
 80019c4:	f001 ff16 	bl	80037f4 <HAL_UART_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019ce:	f000 f8e3 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000250 	.word	0x20000250
 80019dc:	40004800 	.word	0x40004800

080019e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80019ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80019ec:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019ee:	2204      	movs	r2, #4
 80019f0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019f2:	4b11      	ldr	r3, [pc, #68]	; (8001a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019f4:	2202      	movs	r2, #2
 80019f6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019f8:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019fe:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a00:	2202      	movs	r2, #2
 8001a02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001a04:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a0a:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a10:	4b09      	ldr	r3, [pc, #36]	; (8001a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a18:	2201      	movs	r2, #1
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001a24:	f001 f931 	bl	8002c8a <HAL_PCD_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001a2e:	f000 f8b3 	bl	8001b98 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000294 	.word	0x20000294

08001a3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	; 0x30
 8001a40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
 8001a50:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	61bb      	str	r3, [r7, #24]
 8001a56:	4b4c      	ldr	r3, [pc, #304]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a4b      	ldr	r2, [pc, #300]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b49      	ldr	r3, [pc, #292]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	4b45      	ldr	r3, [pc, #276]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a44      	ldr	r2, [pc, #272]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a86:	617b      	str	r3, [r7, #20]
 8001a88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a3d      	ldr	r2, [pc, #244]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b37      	ldr	r3, [pc, #220]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	4a36      	ldr	r2, [pc, #216]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab6:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	4b30      	ldr	r3, [pc, #192]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a2f      	ldr	r2, [pc, #188]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001acc:	f043 0308 	orr.w	r3, r3, #8
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	60bb      	str	r3, [r7, #8]
 8001adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	4b29      	ldr	r3, [pc, #164]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	4a28      	ldr	r2, [pc, #160]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aec:	6313      	str	r3, [r2, #48]	; 0x30
 8001aee:	4b26      	ldr	r3, [pc, #152]	; (8001b88 <MX_GPIO_Init+0x14c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001af6:	607b      	str	r3, [r7, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001afa:	2200      	movs	r2, #0
 8001afc:	f244 0181 	movw	r1, #16513	; 0x4081
 8001b00:	4822      	ldr	r0, [pc, #136]	; (8001b8c <MX_GPIO_Init+0x150>)
 8001b02:	f001 f8a9 	bl	8002c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2140      	movs	r1, #64	; 0x40
 8001b0a:	4821      	ldr	r0, [pc, #132]	; (8001b90 <MX_GPIO_Init+0x154>)
 8001b0c:	f001 f8a4 	bl	8002c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001b10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b16:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001b20:	f107 031c 	add.w	r3, r7, #28
 8001b24:	4619      	mov	r1, r3
 8001b26:	481b      	ldr	r0, [pc, #108]	; (8001b94 <MX_GPIO_Init+0x158>)
 8001b28:	f000 feea 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001b2c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4811      	ldr	r0, [pc, #68]	; (8001b8c <MX_GPIO_Init+0x150>)
 8001b46:	f000 fedb 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b4a:	2340      	movs	r3, #64	; 0x40
 8001b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	480b      	ldr	r0, [pc, #44]	; (8001b90 <MX_GPIO_Init+0x154>)
 8001b62:	f000 fecd 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 031c 	add.w	r3, r7, #28
 8001b76:	4619      	mov	r1, r3
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_GPIO_Init+0x154>)
 8001b7a:	f000 fec1 	bl	8002900 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b7e:	bf00      	nop
 8001b80:	3730      	adds	r7, #48	; 0x30
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40021800 	.word	0x40021800
 8001b94:	40020800 	.word	0x40020800

08001b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9c:	b672      	cpsid	i
}
 8001b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba0:	e7fe      	b.n	8001ba0 <Error_Handler+0x8>
	...

08001ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_MspInit+0x4c>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a0f      	ldr	r2, [pc, #60]	; (8001bf0 <HAL_MspInit+0x4c>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_MspInit+0x4c>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	603b      	str	r3, [r7, #0]
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_MspInit+0x4c>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <HAL_MspInit+0x4c>)
 8001bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd6:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <HAL_MspInit+0x4c>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08e      	sub	sp, #56	; 0x38
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a55      	ldr	r2, [pc, #340]	; (8001d68 <HAL_ETH_MspInit+0x174>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	f040 80a4 	bne.w	8001d60 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c26:	6313      	str	r3, [r2, #48]	; 0x30
 8001c28:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c30:	623b      	str	r3, [r7, #32]
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
 8001c38:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	4a4b      	ldr	r2, [pc, #300]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c42:	6313      	str	r3, [r2, #48]	; 0x30
 8001c44:	4b49      	ldr	r3, [pc, #292]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c4c:	61fb      	str	r3, [r7, #28]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	2300      	movs	r3, #0
 8001c52:	61bb      	str	r3, [r7, #24]
 8001c54:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	4a44      	ldr	r2, [pc, #272]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c60:	4b42      	ldr	r3, [pc, #264]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	4b3e      	ldr	r3, [pc, #248]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c74:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c76:	f043 0304 	orr.w	r3, r3, #4
 8001c7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7c:	4b3b      	ldr	r3, [pc, #236]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	4b37      	ldr	r3, [pc, #220]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	4a36      	ldr	r2, [pc, #216]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6313      	str	r3, [r2, #48]	; 0x30
 8001c98:	4b34      	ldr	r3, [pc, #208]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cac:	4a2f      	ldr	r2, [pc, #188]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001cae:	f043 0302 	orr.w	r3, r3, #2
 8001cb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb4:	4b2d      	ldr	r3, [pc, #180]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	4a28      	ldr	r2, [pc, #160]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001cca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cce:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd0:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <HAL_ETH_MspInit+0x178>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001cdc:	2332      	movs	r3, #50	; 0x32
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cec:	230b      	movs	r3, #11
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	481e      	ldr	r0, [pc, #120]	; (8001d70 <HAL_ETH_MspInit+0x17c>)
 8001cf8:	f000 fe02 	bl	8002900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001cfc:	2386      	movs	r3, #134	; 0x86
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d0c:	230b      	movs	r3, #11
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	4817      	ldr	r0, [pc, #92]	; (8001d74 <HAL_ETH_MspInit+0x180>)
 8001d18:	f000 fdf2 	bl	8002900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d2e:	230b      	movs	r3, #11
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d36:	4619      	mov	r1, r3
 8001d38:	480f      	ldr	r0, [pc, #60]	; (8001d78 <HAL_ETH_MspInit+0x184>)
 8001d3a:	f000 fde1 	bl	8002900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001d3e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d50:	230b      	movs	r3, #11
 8001d52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4808      	ldr	r0, [pc, #32]	; (8001d7c <HAL_ETH_MspInit+0x188>)
 8001d5c:	f000 fdd0 	bl	8002900 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001d60:	bf00      	nop
 8001d62:	3738      	adds	r7, #56	; 0x38
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40028000 	.word	0x40028000
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020000 	.word	0x40020000
 8001d78:	40020400 	.word	0x40020400
 8001d7c:	40021800 	.word	0x40021800

08001d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a19      	ldr	r2, [pc, #100]	; (8001e04 <HAL_UART_MspInit+0x84>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d12c      	bne.n	8001dfc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <HAL_UART_MspInit+0x88>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a17      	ldr	r2, [pc, #92]	; (8001e08 <HAL_UART_MspInit+0x88>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <HAL_UART_MspInit+0x88>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dba:	613b      	str	r3, [r7, #16]
 8001dbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_UART_MspInit+0x88>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <HAL_UART_MspInit+0x88>)
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_UART_MspInit+0x88>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dec:	2307      	movs	r3, #7
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	4619      	mov	r1, r3
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <HAL_UART_MspInit+0x8c>)
 8001df8:	f000 fd82 	bl	8002900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001dfc:	bf00      	nop
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40004800 	.word	0x40004800
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020c00 	.word	0x40020c00

08001e10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08a      	sub	sp, #40	; 0x28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	605a      	str	r2, [r3, #4]
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	60da      	str	r2, [r3, #12]
 8001e26:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e30:	d13f      	bne.n	8001eb2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <HAL_PCD_MspInit+0xac>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	4a20      	ldr	r2, [pc, #128]	; (8001ebc <HAL_PCD_MspInit+0xac>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	6313      	str	r3, [r2, #48]	; 0x30
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <HAL_PCD_MspInit+0xac>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	613b      	str	r3, [r7, #16]
 8001e4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001e4e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001e60:	230a      	movs	r3, #10
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4815      	ldr	r0, [pc, #84]	; (8001ec0 <HAL_PCD_MspInit+0xb0>)
 8001e6c:	f000 fd48 	bl	8002900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001e7e:	f107 0314 	add.w	r3, r7, #20
 8001e82:	4619      	mov	r1, r3
 8001e84:	480e      	ldr	r0, [pc, #56]	; (8001ec0 <HAL_PCD_MspInit+0xb0>)
 8001e86:	f000 fd3b 	bl	8002900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_PCD_MspInit+0xac>)
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8e:	4a0b      	ldr	r2, [pc, #44]	; (8001ebc <HAL_PCD_MspInit+0xac>)
 8001e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e94:	6353      	str	r3, [r2, #52]	; 0x34
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
 8001e9a:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <HAL_PCD_MspInit+0xac>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_PCD_MspInit+0xac>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_PCD_MspInit+0xac>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	; 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000

08001ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ec8:	e7fe      	b.n	8001ec8 <NMI_Handler+0x4>

08001eca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ece:	e7fe      	b.n	8001ece <HardFault_Handler+0x4>

08001ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed4:	e7fe      	b.n	8001ed4 <MemManage_Handler+0x4>

08001ed6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eda:	e7fe      	b.n	8001eda <BusFault_Handler+0x4>

08001edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <UsageFault_Handler+0x4>

08001ee2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001ee8:	f3ef 8314 	mrs	r3, CONTROL
 8001eec:	607b      	str	r3, [r7, #4]
  return(result);
 8001eee:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8001ef0:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f383 8814 	msr	CONTROL, r3
}
 8001f04:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f32:	f000 f893 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f40:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <SystemInit+0x20>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	4a05      	ldr	r2, [pc, #20]	; (8001f5c <SystemInit+0x20>)
 8001f48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 8001f60:	bf00      	nop
  nop
 8001f62:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8001f64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f9c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f68:	480d      	ldr	r0, [pc, #52]	; (8001fa0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f6a:	490e      	ldr	r1, [pc, #56]	; (8001fa4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f6c:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0b      	ldr	r2, [pc, #44]	; (8001fac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f80:	4c0b      	ldr	r4, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f8e:	f7ff ffd5 	bl	8001f3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f92:	f002 f9f3 	bl	800437c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f96:	f7fe fed5 	bl	8000d44 <main>
  bx  lr    
 8001f9a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001f9c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001fa8:	08004514 	.word	0x08004514
  ldr r2, =_sbss
 8001fac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001fb0:	200007ac 	.word	0x200007ac

08001fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC_IRQHandler>
	...

08001fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <HAL_Init+0x40>)
 8001fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_Init+0x40>)
 8001fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd4:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_Init+0x40>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	; (8001ff8 <HAL_Init+0x40>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f000 f931 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f000 f808 	bl	8001ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fec:	f7ff fdda 	bl	8001ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023c00 	.word	0x40023c00

08001ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002004:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_InitTick+0x54>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_InitTick+0x58>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002012:	fbb3 f3f1 	udiv	r3, r3, r1
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f93b 	bl	8002296 <HAL_SYSTICK_Config>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00e      	b.n	8002048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0f      	cmp	r3, #15
 800202e:	d80a      	bhi.n	8002046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	2200      	movs	r2, #0
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	f000 f911 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800203c:	4a06      	ldr	r2, [pc, #24]	; (8002058 <HAL_InitTick+0x5c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e000      	b.n	8002048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000000 	.word	0x20000000
 8002054:	20000008 	.word	0x20000008
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <HAL_IncTick+0x20>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x24>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	; (8002080 <HAL_IncTick+0x24>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000008 	.word	0x20000008
 8002080:	200007a8 	.word	0x200007a8

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	200007a8 	.word	0x200007a8

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff ffee 	bl	8002084 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d005      	beq.n	80020c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_Delay+0x44>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020c2:	bf00      	nop
 80020c4:	f7ff ffde 	bl	8002084 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d8f7      	bhi.n	80020c4 <HAL_Delay+0x28>
  {
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000008 	.word	0x20000008

080020e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800210c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60d3      	str	r3, [r2, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	; (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295
 8002228:	f7ff ff8e 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff47 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002270:	f7ff ff5c 	bl	800212c <__NVIC_GetPriorityGrouping>
 8002274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff8e 	bl	800219c <NVIC_EncodePriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff5d 	bl	8002148 <__NVIC_SetPriority>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffb0 	bl	8002204 <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e06c      	b.n	800239c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d106      	bne.n	80022da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2223      	movs	r2, #35	; 0x23
 80022d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff fc8d 	bl	8001bf4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_ETH_Init+0xf4>)
 80022e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e2:	4a30      	ldr	r2, [pc, #192]	; (80023a4 <HAL_ETH_Init+0xf4>)
 80022e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e8:	6453      	str	r3, [r2, #68]	; 0x44
 80022ea:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <HAL_ETH_Init+0xf4>)
 80022ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_ETH_Init+0xf8>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a2b      	ldr	r2, [pc, #172]	; (80023a8 <HAL_ETH_Init+0xf8>)
 80022fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002300:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_ETH_Init+0xf8>)
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	4927      	ldr	r1, [pc, #156]	; (80023a8 <HAL_ETH_Init+0xf8>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002310:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <HAL_ETH_Init+0xf8>)
 8002312:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	f043 0301 	orr.w	r3, r3, #1
 8002326:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800232a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800232c:	f7ff feaa 	bl	8002084 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002332:	e011      	b.n	8002358 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002334:	f7ff fea6 	bl	8002084 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002342:	d909      	bls.n	8002358 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2204      	movs	r2, #4
 8002348:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	22e0      	movs	r2, #224	; 0xe0
 8002350:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e021      	b.n	800239c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1e4      	bne.n	8002334 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f958 	bl	8002620 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f9ff 	bl	8002774 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fa55 	bl	8002826 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	461a      	mov	r2, r3
 8002382:	2100      	movs	r1, #0
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 f9bd 	bl	8002704 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2210      	movs	r2, #16
 8002396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800
 80023a8:	40013800 	.word	0x40013800

080023ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	4b51      	ldr	r3, [pc, #324]	; (8002508 <ETH_SetMACConfig+0x15c>)
 80023c2:	4013      	ands	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	7c1b      	ldrb	r3, [r3, #16]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <ETH_SetMACConfig+0x28>
 80023ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023d2:	e000      	b.n	80023d6 <ETH_SetMACConfig+0x2a>
 80023d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7c5b      	ldrb	r3, [r3, #17]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <ETH_SetMACConfig+0x38>
 80023de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023e2:	e000      	b.n	80023e6 <ETH_SetMACConfig+0x3a>
 80023e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	7fdb      	ldrb	r3, [r3, #31]
 80023f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80023f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	7f92      	ldrb	r2, [r2, #30]
 8002400:	2a00      	cmp	r2, #0
 8002402:	d102      	bne.n	800240a <ETH_SetMACConfig+0x5e>
 8002404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002408:	e000      	b.n	800240c <ETH_SetMACConfig+0x60>
 800240a:	2200      	movs	r2, #0
                        macconf->Speed |
 800240c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	7f1b      	ldrb	r3, [r3, #28]
 8002412:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002414:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800241a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	791b      	ldrb	r3, [r3, #4]
 8002420:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002422:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	f892 2020 	ldrb.w	r2, [r2, #32]
 800242a:	2a00      	cmp	r2, #0
 800242c:	d102      	bne.n	8002434 <ETH_SetMACConfig+0x88>
 800242e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002432:	e000      	b.n	8002436 <ETH_SetMACConfig+0x8a>
 8002434:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002436:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	7bdb      	ldrb	r3, [r3, #15]
 800243c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800243e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002444:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800244c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800244e:	4313      	orrs	r3, r2
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002466:	2001      	movs	r0, #1
 8002468:	f7ff fe18 	bl	800209c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	699b      	ldr	r3, [r3, #24]
 800247a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002492:	2a00      	cmp	r2, #0
 8002494:	d101      	bne.n	800249a <ETH_SetMACConfig+0xee>
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	e000      	b.n	800249c <ETH_SetMACConfig+0xf0>
 800249a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800249c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80024aa:	2a01      	cmp	r2, #1
 80024ac:	d101      	bne.n	80024b2 <ETH_SetMACConfig+0x106>
 80024ae:	2208      	movs	r2, #8
 80024b0:	e000      	b.n	80024b4 <ETH_SetMACConfig+0x108>
 80024b2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024bc:	2a01      	cmp	r2, #1
 80024be:	d101      	bne.n	80024c4 <ETH_SetMACConfig+0x118>
 80024c0:	2204      	movs	r2, #4
 80024c2:	e000      	b.n	80024c6 <ETH_SetMACConfig+0x11a>
 80024c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80024ce:	2a01      	cmp	r2, #1
 80024d0:	d101      	bne.n	80024d6 <ETH_SetMACConfig+0x12a>
 80024d2:	2202      	movs	r2, #2
 80024d4:	e000      	b.n	80024d8 <ETH_SetMACConfig+0x12c>
 80024d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024d8:	4313      	orrs	r3, r2
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f7ff fdd3 	bl	800209c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	619a      	str	r2, [r3, #24]
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	ff20810f 	.word	0xff20810f

0800250c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4b3d      	ldr	r3, [pc, #244]	; (800261c <ETH_SetDMAConfig+0x110>)
 8002526:	4013      	ands	r3, r2
 8002528:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	7b1b      	ldrb	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d102      	bne.n	8002538 <ETH_SetDMAConfig+0x2c>
 8002532:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002536:	e000      	b.n	800253a <ETH_SetDMAConfig+0x2e>
 8002538:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	7b5b      	ldrb	r3, [r3, #13]
 800253e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002540:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	7f52      	ldrb	r2, [r2, #29]
 8002546:	2a00      	cmp	r2, #0
 8002548:	d102      	bne.n	8002550 <ETH_SetDMAConfig+0x44>
 800254a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800254e:	e000      	b.n	8002552 <ETH_SetDMAConfig+0x46>
 8002550:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002552:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	7b9b      	ldrb	r3, [r3, #14]
 8002558:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800255a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002560:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	7f1b      	ldrb	r3, [r3, #28]
 8002566:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002568:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	7f9b      	ldrb	r3, [r3, #30]
 800256e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002570:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002576:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800257e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002580:	4313      	orrs	r3, r2
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002590:	461a      	mov	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f7ff fd7a 	bl	800209c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b0:	461a      	mov	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	791b      	ldrb	r3, [r3, #4]
 80025ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002600:	2001      	movs	r0, #1
 8002602:	f7ff fd4b 	bl	800209c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260e:	461a      	mov	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6013      	str	r3, [r2, #0]
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	f8de3f23 	.word	0xf8de3f23

08002620 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b0a6      	sub	sp, #152	; 0x98
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002628:	2301      	movs	r3, #1
 800262a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800262e:	2301      	movs	r3, #1
 8002630:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002634:	2300      	movs	r3, #0
 8002636:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002638:	2300      	movs	r3, #0
 800263a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800263e:	2301      	movs	r3, #1
 8002640:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800264a:	2301      	movs	r3, #1
 800264c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800265c:	2300      	movs	r3, #0
 800265e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002666:	2300      	movs	r3, #0
 8002668:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800266a:	2300      	movs	r3, #0
 800266c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002682:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002686:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002688:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800268c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002694:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002698:	4619      	mov	r1, r3
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff fe86 	bl	80023ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026a0:	2301      	movs	r3, #1
 80026a2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026a4:	2301      	movs	r3, #1
 80026a6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80026a8:	2301      	movs	r3, #1
 80026aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80026ae:	2301      	movs	r3, #1
 80026b0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026bc:	2300      	movs	r3, #0
 80026be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026c2:	2300      	movs	r3, #0
 80026c4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026cc:	2301      	movs	r3, #1
 80026ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026d4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026ec:	2300      	movs	r3, #0
 80026ee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026f0:	f107 0308 	add.w	r3, r7, #8
 80026f4:	4619      	mov	r1, r3
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ff08 	bl	800250c <ETH_SetDMAConfig>
}
 80026fc:	bf00      	nop
 80026fe:	3798      	adds	r7, #152	; 0x98
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3305      	adds	r3, #5
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	3204      	adds	r2, #4
 800271c:	7812      	ldrb	r2, [r2, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	4b11      	ldr	r3, [pc, #68]	; (800276c <ETH_MACAddressConfig+0x68>)
 8002726:	4413      	add	r3, r2
 8002728:	461a      	mov	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3303      	adds	r3, #3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	061a      	lsls	r2, r3, #24
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3302      	adds	r3, #2
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	041b      	lsls	r3, r3, #16
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3301      	adds	r3, #1
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	021b      	lsls	r3, r3, #8
 8002748:	4313      	orrs	r3, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	7812      	ldrb	r2, [r2, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <ETH_MACAddressConfig+0x6c>)
 8002756:	4413      	add	r3, r2
 8002758:	461a      	mov	r2, r3
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	6013      	str	r3, [r2, #0]
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40028040 	.word	0x40028040
 8002770:	40028044 	.word	0x40028044

08002774 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e03e      	b.n	8002800 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68d9      	ldr	r1, [r3, #12]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4613      	mov	r3, r2
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2200      	movs	r2, #0
 800279e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2200      	movs	r2, #0
 80027a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2200      	movs	r2, #0
 80027aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	3206      	adds	r2, #6
 80027b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d80c      	bhi.n	80027e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68d9      	ldr	r1, [r3, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	461a      	mov	r2, r3
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	e004      	b.n	80027ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3301      	adds	r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2b03      	cmp	r3, #3
 8002804:	d9bd      	bls.n	8002782 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002818:	611a      	str	r2, [r3, #16]
}
 800281a:	bf00      	nop
 800281c:	3714      	adds	r7, #20
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e046      	b.n	80028c2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6919      	ldr	r1, [r3, #16]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	440b      	add	r3, r1
 8002844:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	2200      	movs	r2, #0
 8002862:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2200      	movs	r2, #0
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002870:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002878:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002886:	68b9      	ldr	r1, [r7, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	3212      	adds	r2, #18
 800288e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d80c      	bhi.n	80028b2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6919      	ldr	r1, [r3, #16]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	440b      	add	r3, r1
 80028aa:	461a      	mov	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	60da      	str	r2, [r3, #12]
 80028b0:	e004      	b.n	80028bc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3301      	adds	r3, #1
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d9b5      	bls.n	8002834 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f2:	60da      	str	r2, [r3, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800290e:	2300      	movs	r3, #0
 8002910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002916:	2300      	movs	r3, #0
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e177      	b.n	8002c0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800291c:	2201      	movs	r2, #1
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	429a      	cmp	r2, r3
 8002936:	f040 8166 	bne.w	8002c06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b01      	cmp	r3, #1
 8002944:	d005      	beq.n	8002952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800294e:	2b02      	cmp	r3, #2
 8002950:	d130      	bne.n	80029b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	2203      	movs	r2, #3
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002988:	2201      	movs	r2, #1
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	69ba      	ldr	r2, [r7, #24]
 8002994:	4013      	ands	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f003 0201 	and.w	r2, r3, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d017      	beq.n	80029f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	2203      	movs	r2, #3
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d123      	bne.n	8002a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	08da      	lsrs	r2, r3, #3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3208      	adds	r2, #8
 8002a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	220f      	movs	r2, #15
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	69b9      	ldr	r1, [r7, #24]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80c0 	beq.w	8002c06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	4b66      	ldr	r3, [pc, #408]	; (8002c24 <HAL_GPIO_Init+0x324>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4a65      	ldr	r2, [pc, #404]	; (8002c24 <HAL_GPIO_Init+0x324>)
 8002a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a94:	6453      	str	r3, [r2, #68]	; 0x44
 8002a96:	4b63      	ldr	r3, [pc, #396]	; (8002c24 <HAL_GPIO_Init+0x324>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aa2:	4a61      	ldr	r2, [pc, #388]	; (8002c28 <HAL_GPIO_Init+0x328>)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	3302      	adds	r3, #2
 8002aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <HAL_GPIO_Init+0x32c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d037      	beq.n	8002b3e <HAL_GPIO_Init+0x23e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a57      	ldr	r2, [pc, #348]	; (8002c30 <HAL_GPIO_Init+0x330>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d031      	beq.n	8002b3a <HAL_GPIO_Init+0x23a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a56      	ldr	r2, [pc, #344]	; (8002c34 <HAL_GPIO_Init+0x334>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d02b      	beq.n	8002b36 <HAL_GPIO_Init+0x236>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a55      	ldr	r2, [pc, #340]	; (8002c38 <HAL_GPIO_Init+0x338>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d025      	beq.n	8002b32 <HAL_GPIO_Init+0x232>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a54      	ldr	r2, [pc, #336]	; (8002c3c <HAL_GPIO_Init+0x33c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01f      	beq.n	8002b2e <HAL_GPIO_Init+0x22e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a53      	ldr	r2, [pc, #332]	; (8002c40 <HAL_GPIO_Init+0x340>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d019      	beq.n	8002b2a <HAL_GPIO_Init+0x22a>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a52      	ldr	r2, [pc, #328]	; (8002c44 <HAL_GPIO_Init+0x344>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d013      	beq.n	8002b26 <HAL_GPIO_Init+0x226>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a51      	ldr	r2, [pc, #324]	; (8002c48 <HAL_GPIO_Init+0x348>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d00d      	beq.n	8002b22 <HAL_GPIO_Init+0x222>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a50      	ldr	r2, [pc, #320]	; (8002c4c <HAL_GPIO_Init+0x34c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d007      	beq.n	8002b1e <HAL_GPIO_Init+0x21e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4f      	ldr	r2, [pc, #316]	; (8002c50 <HAL_GPIO_Init+0x350>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d101      	bne.n	8002b1a <HAL_GPIO_Init+0x21a>
 8002b16:	2309      	movs	r3, #9
 8002b18:	e012      	b.n	8002b40 <HAL_GPIO_Init+0x240>
 8002b1a:	230a      	movs	r3, #10
 8002b1c:	e010      	b.n	8002b40 <HAL_GPIO_Init+0x240>
 8002b1e:	2308      	movs	r3, #8
 8002b20:	e00e      	b.n	8002b40 <HAL_GPIO_Init+0x240>
 8002b22:	2307      	movs	r3, #7
 8002b24:	e00c      	b.n	8002b40 <HAL_GPIO_Init+0x240>
 8002b26:	2306      	movs	r3, #6
 8002b28:	e00a      	b.n	8002b40 <HAL_GPIO_Init+0x240>
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	e008      	b.n	8002b40 <HAL_GPIO_Init+0x240>
 8002b2e:	2304      	movs	r3, #4
 8002b30:	e006      	b.n	8002b40 <HAL_GPIO_Init+0x240>
 8002b32:	2303      	movs	r3, #3
 8002b34:	e004      	b.n	8002b40 <HAL_GPIO_Init+0x240>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e002      	b.n	8002b40 <HAL_GPIO_Init+0x240>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_GPIO_Init+0x240>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	f002 0203 	and.w	r2, r2, #3
 8002b46:	0092      	lsls	r2, r2, #2
 8002b48:	4093      	lsls	r3, r2
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b50:	4935      	ldr	r1, [pc, #212]	; (8002c28 <HAL_GPIO_Init+0x328>)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	089b      	lsrs	r3, r3, #2
 8002b56:	3302      	adds	r3, #2
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5e:	4b3d      	ldr	r3, [pc, #244]	; (8002c54 <HAL_GPIO_Init+0x354>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b82:	4a34      	ldr	r2, [pc, #208]	; (8002c54 <HAL_GPIO_Init+0x354>)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b88:	4b32      	ldr	r3, [pc, #200]	; (8002c54 <HAL_GPIO_Init+0x354>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bac:	4a29      	ldr	r2, [pc, #164]	; (8002c54 <HAL_GPIO_Init+0x354>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bb2:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <HAL_GPIO_Init+0x354>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <HAL_GPIO_Init+0x354>)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	; (8002c54 <HAL_GPIO_Init+0x354>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <HAL_GPIO_Init+0x354>)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	61fb      	str	r3, [r7, #28]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b0f      	cmp	r3, #15
 8002c10:	f67f ae84 	bls.w	800291c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3724      	adds	r7, #36	; 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40013800 	.word	0x40013800
 8002c2c:	40020000 	.word	0x40020000
 8002c30:	40020400 	.word	0x40020400
 8002c34:	40020800 	.word	0x40020800
 8002c38:	40020c00 	.word	0x40020c00
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40021400 	.word	0x40021400
 8002c44:	40021800 	.word	0x40021800
 8002c48:	40021c00 	.word	0x40021c00
 8002c4c:	40022000 	.word	0x40022000
 8002c50:	40022400 	.word	0x40022400
 8002c54:	40013c00 	.word	0x40013c00

08002c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	460b      	mov	r3, r1
 8002c62:	807b      	strh	r3, [r7, #2]
 8002c64:	4613      	mov	r3, r2
 8002c66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c68:	787b      	ldrb	r3, [r7, #1]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c6e:	887a      	ldrh	r2, [r7, #2]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c74:	e003      	b.n	8002c7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c76:	887b      	ldrh	r3, [r7, #2]
 8002c78:	041a      	lsls	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	619a      	str	r2, [r3, #24]
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8c:	b08f      	sub	sp, #60	; 0x3c
 8002c8e:	af0a      	add	r7, sp, #40	; 0x28
 8002c90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e10f      	b.n	8002ebc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff f8aa 	bl	8001e10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f8ad 	bl	8003e3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	603b      	str	r3, [r7, #0]
 8002ce6:	687e      	ldr	r6, [r7, #4]
 8002ce8:	466d      	mov	r5, sp
 8002cea:	f106 0410 	add.w	r4, r6, #16
 8002cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cfe:	1d33      	adds	r3, r6, #4
 8002d00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d02:	6838      	ldr	r0, [r7, #0]
 8002d04:	f001 f838 	bl	8003d78 <USB_CoreInit>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2202      	movs	r2, #2
 8002d12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0d0      	b.n	8002ebc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2100      	movs	r1, #0
 8002d20:	4618      	mov	r0, r3
 8002d22:	f001 f89b 	bl	8003e5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	73fb      	strb	r3, [r7, #15]
 8002d2a:	e04a      	b.n	8002dc2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	333d      	adds	r3, #61	; 0x3d
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	333c      	adds	r3, #60	; 0x3c
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	7bfb      	ldrb	r3, [r7, #15]
 8002d58:	b298      	uxth	r0, r3
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	3344      	adds	r3, #68	; 0x44
 8002d68:	4602      	mov	r2, r0
 8002d6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d6c:	7bfa      	ldrb	r2, [r7, #15]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	3340      	adds	r3, #64	; 0x40
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d80:	7bfa      	ldrb	r2, [r7, #15]
 8002d82:	6879      	ldr	r1, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	3348      	adds	r3, #72	; 0x48
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	334c      	adds	r3, #76	; 0x4c
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002da8:	7bfa      	ldrb	r2, [r7, #15]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3354      	adds	r3, #84	; 0x54
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	73fb      	strb	r3, [r7, #15]
 8002dc2:	7bfa      	ldrb	r2, [r7, #15]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d3af      	bcc.n	8002d2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]
 8002dd0:	e044      	b.n	8002e5c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dd2:	7bfa      	ldrb	r2, [r7, #15]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	4413      	add	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002de8:	7bfa      	ldrb	r2, [r7, #15]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002dfa:	7bfa      	ldrb	r2, [r7, #15]
 8002dfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dfe:	7bfa      	ldrb	r2, [r7, #15]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e14:	7bfa      	ldrb	r2, [r7, #15]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e26:	2200      	movs	r2, #0
 8002e28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e2a:	7bfa      	ldrb	r2, [r7, #15]
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4413      	add	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e52:	2200      	movs	r2, #0
 8002e54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d3b5      	bcc.n	8002dd2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	687e      	ldr	r6, [r7, #4]
 8002e6e:	466d      	mov	r5, sp
 8002e70:	f106 0410 	add.w	r4, r6, #16
 8002e74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e80:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e84:	1d33      	adds	r3, r6, #4
 8002e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e88:	6838      	ldr	r0, [r7, #0]
 8002e8a:	f001 f833 	bl	8003ef4 <USB_DevInit>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e00d      	b.n	8002ebc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f001 f9fe 	bl	80042b6 <USB_DevDisconnect>

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e267      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d075      	beq.n	8002fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ee2:	4b88      	ldr	r3, [pc, #544]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d00c      	beq.n	8002f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eee:	4b85      	ldr	r3, [pc, #532]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d112      	bne.n	8002f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002efa:	4b82      	ldr	r3, [pc, #520]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f06:	d10b      	bne.n	8002f20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f08:	4b7e      	ldr	r3, [pc, #504]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d05b      	beq.n	8002fcc <HAL_RCC_OscConfig+0x108>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d157      	bne.n	8002fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e242      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f28:	d106      	bne.n	8002f38 <HAL_RCC_OscConfig+0x74>
 8002f2a:	4b76      	ldr	r3, [pc, #472]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a75      	ldr	r2, [pc, #468]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	e01d      	b.n	8002f74 <HAL_RCC_OscConfig+0xb0>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x98>
 8002f42:	4b70      	ldr	r3, [pc, #448]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a6f      	ldr	r2, [pc, #444]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b6d      	ldr	r3, [pc, #436]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6c      	ldr	r2, [pc, #432]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e00b      	b.n	8002f74 <HAL_RCC_OscConfig+0xb0>
 8002f5c:	4b69      	ldr	r3, [pc, #420]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a68      	ldr	r2, [pc, #416]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	4b66      	ldr	r3, [pc, #408]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a65      	ldr	r2, [pc, #404]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d013      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7ff f882 	bl	8002084 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f84:	f7ff f87e 	bl	8002084 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e207      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b5b      	ldr	r3, [pc, #364]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0xc0>
 8002fa2:	e014      	b.n	8002fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa4:	f7ff f86e 	bl	8002084 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fac:	f7ff f86a 	bl	8002084 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b64      	cmp	r3, #100	; 0x64
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e1f3      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fbe:	4b51      	ldr	r3, [pc, #324]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0xe8>
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d063      	beq.n	80030a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fda:	4b4a      	ldr	r3, [pc, #296]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00b      	beq.n	8002ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe6:	4b47      	ldr	r3, [pc, #284]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d11c      	bne.n	800302c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ff2:	4b44      	ldr	r3, [pc, #272]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d116      	bne.n	800302c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffe:	4b41      	ldr	r3, [pc, #260]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_RCC_OscConfig+0x152>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d001      	beq.n	8003016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e1c7      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4937      	ldr	r1, [pc, #220]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8003026:	4313      	orrs	r3, r2
 8003028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302a:	e03a      	b.n	80030a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d020      	beq.n	8003076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003034:	4b34      	ldr	r3, [pc, #208]	; (8003108 <HAL_RCC_OscConfig+0x244>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7ff f823 	bl	8002084 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003042:	f7ff f81f 	bl	8002084 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e1a8      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003054:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003060:	4b28      	ldr	r3, [pc, #160]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4925      	ldr	r1, [pc, #148]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8003070:	4313      	orrs	r3, r2
 8003072:	600b      	str	r3, [r1, #0]
 8003074:	e015      	b.n	80030a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003076:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_RCC_OscConfig+0x244>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7ff f802 	bl	8002084 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003084:	f7fe fffe 	bl	8002084 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e187      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003096:	4b1b      	ldr	r3, [pc, #108]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f0      	bne.n	8003084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d036      	beq.n	800311c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695b      	ldr	r3, [r3, #20]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <HAL_RCC_OscConfig+0x248>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030bc:	f7fe ffe2 	bl	8002084 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c4:	f7fe ffde 	bl	8002084 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e167      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d6:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <HAL_RCC_OscConfig+0x240>)
 80030d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCC_OscConfig+0x200>
 80030e2:	e01b      	b.n	800311c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <HAL_RCC_OscConfig+0x248>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ea:	f7fe ffcb 	bl	8002084 <HAL_GetTick>
 80030ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f0:	e00e      	b.n	8003110 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f2:	f7fe ffc7 	bl	8002084 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d907      	bls.n	8003110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e150      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
 8003104:	40023800 	.word	0x40023800
 8003108:	42470000 	.word	0x42470000
 800310c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003110:	4b88      	ldr	r3, [pc, #544]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 8003112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1ea      	bne.n	80030f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8097 	beq.w	8003258 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800312e:	4b81      	ldr	r3, [pc, #516]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10f      	bne.n	800315a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	4b7d      	ldr	r3, [pc, #500]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	4a7c      	ldr	r2, [pc, #496]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	6413      	str	r3, [r2, #64]	; 0x40
 800314a:	4b7a      	ldr	r3, [pc, #488]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003156:	2301      	movs	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	4b77      	ldr	r3, [pc, #476]	; (8003338 <HAL_RCC_OscConfig+0x474>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d118      	bne.n	8003198 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003166:	4b74      	ldr	r3, [pc, #464]	; (8003338 <HAL_RCC_OscConfig+0x474>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a73      	ldr	r2, [pc, #460]	; (8003338 <HAL_RCC_OscConfig+0x474>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003172:	f7fe ff87 	bl	8002084 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317a:	f7fe ff83 	bl	8002084 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b02      	cmp	r3, #2
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e10c      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	4b6a      	ldr	r3, [pc, #424]	; (8003338 <HAL_RCC_OscConfig+0x474>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x2ea>
 80031a0:	4b64      	ldr	r3, [pc, #400]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a63      	ldr	r2, [pc, #396]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
 80031ac:	e01c      	b.n	80031e8 <HAL_RCC_OscConfig+0x324>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b05      	cmp	r3, #5
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x30c>
 80031b6:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	4a5e      	ldr	r2, [pc, #376]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 80031bc:	f043 0304 	orr.w	r3, r3, #4
 80031c0:	6713      	str	r3, [r2, #112]	; 0x70
 80031c2:	4b5c      	ldr	r3, [pc, #368]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 80031c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c6:	4a5b      	ldr	r2, [pc, #364]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6713      	str	r3, [r2, #112]	; 0x70
 80031ce:	e00b      	b.n	80031e8 <HAL_RCC_OscConfig+0x324>
 80031d0:	4b58      	ldr	r3, [pc, #352]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d4:	4a57      	ldr	r2, [pc, #348]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	6713      	str	r3, [r2, #112]	; 0x70
 80031dc:	4b55      	ldr	r3, [pc, #340]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	4a54      	ldr	r2, [pc, #336]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 80031e2:	f023 0304 	bic.w	r3, r3, #4
 80031e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d015      	beq.n	800321c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f0:	f7fe ff48 	bl	8002084 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f6:	e00a      	b.n	800320e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f8:	f7fe ff44 	bl	8002084 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	f241 3288 	movw	r2, #5000	; 0x1388
 8003206:	4293      	cmp	r3, r2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e0cb      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320e:	4b49      	ldr	r3, [pc, #292]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0ee      	beq.n	80031f8 <HAL_RCC_OscConfig+0x334>
 800321a:	e014      	b.n	8003246 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7fe ff32 	bl	8002084 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003222:	e00a      	b.n	800323a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003224:	f7fe ff2e 	bl	8002084 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003232:	4293      	cmp	r3, r2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e0b5      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800323a:	4b3e      	ldr	r3, [pc, #248]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 800323c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1ee      	bne.n	8003224 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003246:	7dfb      	ldrb	r3, [r7, #23]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d105      	bne.n	8003258 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324c:	4b39      	ldr	r3, [pc, #228]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	4a38      	ldr	r2, [pc, #224]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 8003252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003256:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80a1 	beq.w	80033a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003262:	4b34      	ldr	r3, [pc, #208]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	2b08      	cmp	r3, #8
 800326c:	d05c      	beq.n	8003328 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b02      	cmp	r3, #2
 8003274:	d141      	bne.n	80032fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003276:	4b31      	ldr	r3, [pc, #196]	; (800333c <HAL_RCC_OscConfig+0x478>)
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327c:	f7fe ff02 	bl	8002084 <HAL_GetTick>
 8003280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003282:	e008      	b.n	8003296 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003284:	f7fe fefe 	bl	8002084 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b02      	cmp	r3, #2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e087      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003296:	4b27      	ldr	r3, [pc, #156]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f0      	bne.n	8003284 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69da      	ldr	r2, [r3, #28]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	431a      	orrs	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	019b      	lsls	r3, r3, #6
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	085b      	lsrs	r3, r3, #1
 80032ba:	3b01      	subs	r3, #1
 80032bc:	041b      	lsls	r3, r3, #16
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	061b      	lsls	r3, r3, #24
 80032c6:	491b      	ldr	r1, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_RCC_OscConfig+0x478>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fe fed7 	bl	8002084 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032da:	f7fe fed3 	bl	8002084 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e05c      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x416>
 80032f8:	e054      	b.n	80033a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCC_OscConfig+0x478>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fe fec0 	bl	8002084 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003308:	f7fe febc 	bl	8002084 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e045      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_OscConfig+0x470>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x444>
 8003326:	e03d      	b.n	80033a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d107      	bne.n	8003340 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e038      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
 8003334:	40023800 	.word	0x40023800
 8003338:	40007000 	.word	0x40007000
 800333c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003340:	4b1b      	ldr	r3, [pc, #108]	; (80033b0 <HAL_RCC_OscConfig+0x4ec>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d028      	beq.n	80033a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003358:	429a      	cmp	r2, r3
 800335a:	d121      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d11a      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003370:	4013      	ands	r3, r2
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003376:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003378:	4293      	cmp	r3, r2
 800337a:	d111      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	3b01      	subs	r3, #1
 800338a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d107      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800339c:	429a      	cmp	r2, r3
 800339e:	d001      	beq.n	80033a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800

080033b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0cc      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033c8:	4b68      	ldr	r3, [pc, #416]	; (800356c <HAL_RCC_ClockConfig+0x1b8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 030f 	and.w	r3, r3, #15
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d90c      	bls.n	80033f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b65      	ldr	r3, [pc, #404]	; (800356c <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b63      	ldr	r3, [pc, #396]	; (800356c <HAL_RCC_ClockConfig+0x1b8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0b8      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d020      	beq.n	800343e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	2b00      	cmp	r3, #0
 8003406:	d005      	beq.n	8003414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003408:	4b59      	ldr	r3, [pc, #356]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4a58      	ldr	r2, [pc, #352]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 800340e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d005      	beq.n	800342c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003420:	4b53      	ldr	r3, [pc, #332]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4a52      	ldr	r2, [pc, #328]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 8003426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800342a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800342c:	4b50      	ldr	r3, [pc, #320]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	494d      	ldr	r1, [pc, #308]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d044      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d107      	bne.n	8003462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003452:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d119      	bne.n	8003492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e07f      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d003      	beq.n	8003472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800346e:	2b03      	cmp	r3, #3
 8003470:	d107      	bne.n	8003482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003472:	4b3f      	ldr	r3, [pc, #252]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e06f      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003482:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e067      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003492:	4b37      	ldr	r3, [pc, #220]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f023 0203 	bic.w	r2, r3, #3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	4934      	ldr	r1, [pc, #208]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a4:	f7fe fdee 	bl	8002084 <HAL_GetTick>
 80034a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034aa:	e00a      	b.n	80034c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ac:	f7fe fdea 	bl	8002084 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e04f      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034c2:	4b2b      	ldr	r3, [pc, #172]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 020c 	and.w	r2, r3, #12
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d1eb      	bne.n	80034ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034d4:	4b25      	ldr	r3, [pc, #148]	; (800356c <HAL_RCC_ClockConfig+0x1b8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 030f 	and.w	r3, r3, #15
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d20c      	bcs.n	80034fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b22      	ldr	r3, [pc, #136]	; (800356c <HAL_RCC_ClockConfig+0x1b8>)
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	4b20      	ldr	r3, [pc, #128]	; (800356c <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d001      	beq.n	80034fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e032      	b.n	8003562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0304 	and.w	r3, r3, #4
 8003504:	2b00      	cmp	r3, #0
 8003506:	d008      	beq.n	800351a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4916      	ldr	r1, [pc, #88]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 8003516:	4313      	orrs	r3, r2
 8003518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d009      	beq.n	800353a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	490e      	ldr	r1, [pc, #56]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	4313      	orrs	r3, r2
 8003538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800353a:	f000 f821 	bl	8003580 <HAL_RCC_GetSysClockFreq>
 800353e:	4602      	mov	r2, r0
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	490a      	ldr	r1, [pc, #40]	; (8003574 <HAL_RCC_ClockConfig+0x1c0>)
 800354c:	5ccb      	ldrb	r3, [r1, r3]
 800354e:	fa22 f303 	lsr.w	r3, r2, r3
 8003552:	4a09      	ldr	r2, [pc, #36]	; (8003578 <HAL_RCC_ClockConfig+0x1c4>)
 8003554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003556:	4b09      	ldr	r3, [pc, #36]	; (800357c <HAL_RCC_ClockConfig+0x1c8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fe fd4e 	bl	8001ffc <HAL_InitTick>

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	40023c00 	.word	0x40023c00
 8003570:	40023800 	.word	0x40023800
 8003574:	080044ec 	.word	0x080044ec
 8003578:	20000000 	.word	0x20000000
 800357c:	20000004 	.word	0x20000004

08003580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003584:	b094      	sub	sp, #80	; 0x50
 8003586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	647b      	str	r3, [r7, #68]	; 0x44
 800358c:	2300      	movs	r3, #0
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003590:	2300      	movs	r3, #0
 8003592:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003598:	4b79      	ldr	r3, [pc, #484]	; (8003780 <HAL_RCC_GetSysClockFreq+0x200>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	2b08      	cmp	r3, #8
 80035a2:	d00d      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0x40>
 80035a4:	2b08      	cmp	r3, #8
 80035a6:	f200 80e1 	bhi.w	800376c <HAL_RCC_GetSysClockFreq+0x1ec>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x34>
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d003      	beq.n	80035ba <HAL_RCC_GetSysClockFreq+0x3a>
 80035b2:	e0db      	b.n	800376c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035b4:	4b73      	ldr	r3, [pc, #460]	; (8003784 <HAL_RCC_GetSysClockFreq+0x204>)
 80035b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035b8:	e0db      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ba:	4b73      	ldr	r3, [pc, #460]	; (8003788 <HAL_RCC_GetSysClockFreq+0x208>)
 80035bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035be:	e0d8      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035c0:	4b6f      	ldr	r3, [pc, #444]	; (8003780 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ca:	4b6d      	ldr	r3, [pc, #436]	; (8003780 <HAL_RCC_GetSysClockFreq+0x200>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d063      	beq.n	800369e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d6:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <HAL_RCC_GetSysClockFreq+0x200>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	099b      	lsrs	r3, r3, #6
 80035dc:	2200      	movs	r2, #0
 80035de:	63bb      	str	r3, [r7, #56]	; 0x38
 80035e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80035e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e8:	633b      	str	r3, [r7, #48]	; 0x30
 80035ea:	2300      	movs	r3, #0
 80035ec:	637b      	str	r3, [r7, #52]	; 0x34
 80035ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80035f2:	4622      	mov	r2, r4
 80035f4:	462b      	mov	r3, r5
 80035f6:	f04f 0000 	mov.w	r0, #0
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	0159      	lsls	r1, r3, #5
 8003600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003604:	0150      	lsls	r0, r2, #5
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4621      	mov	r1, r4
 800360c:	1a51      	subs	r1, r2, r1
 800360e:	6139      	str	r1, [r7, #16]
 8003610:	4629      	mov	r1, r5
 8003612:	eb63 0301 	sbc.w	r3, r3, r1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003624:	4659      	mov	r1, fp
 8003626:	018b      	lsls	r3, r1, #6
 8003628:	4651      	mov	r1, sl
 800362a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800362e:	4651      	mov	r1, sl
 8003630:	018a      	lsls	r2, r1, #6
 8003632:	4651      	mov	r1, sl
 8003634:	ebb2 0801 	subs.w	r8, r2, r1
 8003638:	4659      	mov	r1, fp
 800363a:	eb63 0901 	sbc.w	r9, r3, r1
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800364a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800364e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003652:	4690      	mov	r8, r2
 8003654:	4699      	mov	r9, r3
 8003656:	4623      	mov	r3, r4
 8003658:	eb18 0303 	adds.w	r3, r8, r3
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	462b      	mov	r3, r5
 8003660:	eb49 0303 	adc.w	r3, r9, r3
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003672:	4629      	mov	r1, r5
 8003674:	024b      	lsls	r3, r1, #9
 8003676:	4621      	mov	r1, r4
 8003678:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800367c:	4621      	mov	r1, r4
 800367e:	024a      	lsls	r2, r1, #9
 8003680:	4610      	mov	r0, r2
 8003682:	4619      	mov	r1, r3
 8003684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003686:	2200      	movs	r2, #0
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
 800368a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800368c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003690:	f7fc fe82 	bl	8000398 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4613      	mov	r3, r2
 800369a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800369c:	e058      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369e:	4b38      	ldr	r3, [pc, #224]	; (8003780 <HAL_RCC_GetSysClockFreq+0x200>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	099b      	lsrs	r3, r3, #6
 80036a4:	2200      	movs	r2, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	4611      	mov	r1, r2
 80036aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036ae:	623b      	str	r3, [r7, #32]
 80036b0:	2300      	movs	r3, #0
 80036b2:	627b      	str	r3, [r7, #36]	; 0x24
 80036b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036b8:	4642      	mov	r2, r8
 80036ba:	464b      	mov	r3, r9
 80036bc:	f04f 0000 	mov.w	r0, #0
 80036c0:	f04f 0100 	mov.w	r1, #0
 80036c4:	0159      	lsls	r1, r3, #5
 80036c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036ca:	0150      	lsls	r0, r2, #5
 80036cc:	4602      	mov	r2, r0
 80036ce:	460b      	mov	r3, r1
 80036d0:	4641      	mov	r1, r8
 80036d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80036d6:	4649      	mov	r1, r9
 80036d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036f0:	ebb2 040a 	subs.w	r4, r2, sl
 80036f4:	eb63 050b 	sbc.w	r5, r3, fp
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	f04f 0300 	mov.w	r3, #0
 8003700:	00eb      	lsls	r3, r5, #3
 8003702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003706:	00e2      	lsls	r2, r4, #3
 8003708:	4614      	mov	r4, r2
 800370a:	461d      	mov	r5, r3
 800370c:	4643      	mov	r3, r8
 800370e:	18e3      	adds	r3, r4, r3
 8003710:	603b      	str	r3, [r7, #0]
 8003712:	464b      	mov	r3, r9
 8003714:	eb45 0303 	adc.w	r3, r5, r3
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003726:	4629      	mov	r1, r5
 8003728:	028b      	lsls	r3, r1, #10
 800372a:	4621      	mov	r1, r4
 800372c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003730:	4621      	mov	r1, r4
 8003732:	028a      	lsls	r2, r1, #10
 8003734:	4610      	mov	r0, r2
 8003736:	4619      	mov	r1, r3
 8003738:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800373a:	2200      	movs	r2, #0
 800373c:	61bb      	str	r3, [r7, #24]
 800373e:	61fa      	str	r2, [r7, #28]
 8003740:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003744:	f7fc fe28 	bl	8000398 <__aeabi_uldivmod>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	4613      	mov	r3, r2
 800374e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003750:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_RCC_GetSysClockFreq+0x200>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	0c1b      	lsrs	r3, r3, #16
 8003756:	f003 0303 	and.w	r3, r3, #3
 800375a:	3301      	adds	r3, #1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003760:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800376a:	e002      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800376c:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetSysClockFreq+0x204>)
 800376e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003774:	4618      	mov	r0, r3
 8003776:	3750      	adds	r7, #80	; 0x50
 8003778:	46bd      	mov	sp, r7
 800377a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800377e:	bf00      	nop
 8003780:	40023800 	.word	0x40023800
 8003784:	00f42400 	.word	0x00f42400
 8003788:	007a1200 	.word	0x007a1200

0800378c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003790:	4b03      	ldr	r3, [pc, #12]	; (80037a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003792:	681b      	ldr	r3, [r3, #0]
}
 8003794:	4618      	mov	r0, r3
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000000 	.word	0x20000000

080037a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037a8:	f7ff fff0 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	0a9b      	lsrs	r3, r3, #10
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4903      	ldr	r1, [pc, #12]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40023800 	.word	0x40023800
 80037c8:	080044fc 	.word	0x080044fc

080037cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037d0:	f7ff ffdc 	bl	800378c <HAL_RCC_GetHCLKFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	0b5b      	lsrs	r3, r3, #13
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4903      	ldr	r1, [pc, #12]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40023800 	.word	0x40023800
 80037f0:	080044fc 	.word	0x080044fc

080037f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e03f      	b.n	8003886 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7fe fab0 	bl	8001d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2224      	movs	r2, #36	; 0x24
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f829 	bl	8003890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	691a      	ldr	r2, [r3, #16]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800384c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800385c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800386c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003894:	b0c0      	sub	sp, #256	; 0x100
 8003896:	af00      	add	r7, sp, #0
 8003898:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	68d9      	ldr	r1, [r3, #12]
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	ea40 0301 	orr.w	r3, r0, r1
 80038b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038be:	689a      	ldr	r2, [r3, #8]
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	431a      	orrs	r2, r3
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d4:	69db      	ldr	r3, [r3, #28]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038e8:	f021 010c 	bic.w	r1, r1, #12
 80038ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038f6:	430b      	orrs	r3, r1
 80038f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390a:	6999      	ldr	r1, [r3, #24]
 800390c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	ea40 0301 	orr.w	r3, r0, r1
 8003916:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b8f      	ldr	r3, [pc, #572]	; (8003b5c <UART_SetConfig+0x2cc>)
 8003920:	429a      	cmp	r2, r3
 8003922:	d005      	beq.n	8003930 <UART_SetConfig+0xa0>
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	4b8d      	ldr	r3, [pc, #564]	; (8003b60 <UART_SetConfig+0x2d0>)
 800392c:	429a      	cmp	r2, r3
 800392e:	d104      	bne.n	800393a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003930:	f7ff ff4c 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 8003934:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003938:	e003      	b.n	8003942 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800393a:	f7ff ff33 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 800393e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800394c:	f040 810c 	bne.w	8003b68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003954:	2200      	movs	r2, #0
 8003956:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800395a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800395e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003962:	4622      	mov	r2, r4
 8003964:	462b      	mov	r3, r5
 8003966:	1891      	adds	r1, r2, r2
 8003968:	65b9      	str	r1, [r7, #88]	; 0x58
 800396a:	415b      	adcs	r3, r3
 800396c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800396e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003972:	4621      	mov	r1, r4
 8003974:	eb12 0801 	adds.w	r8, r2, r1
 8003978:	4629      	mov	r1, r5
 800397a:	eb43 0901 	adc.w	r9, r3, r1
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800398a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800398e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003992:	4690      	mov	r8, r2
 8003994:	4699      	mov	r9, r3
 8003996:	4623      	mov	r3, r4
 8003998:	eb18 0303 	adds.w	r3, r8, r3
 800399c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80039a0:	462b      	mov	r3, r5
 80039a2:	eb49 0303 	adc.w	r3, r9, r3
 80039a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80039be:	460b      	mov	r3, r1
 80039c0:	18db      	adds	r3, r3, r3
 80039c2:	653b      	str	r3, [r7, #80]	; 0x50
 80039c4:	4613      	mov	r3, r2
 80039c6:	eb42 0303 	adc.w	r3, r2, r3
 80039ca:	657b      	str	r3, [r7, #84]	; 0x54
 80039cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039d4:	f7fc fce0 	bl	8000398 <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4b61      	ldr	r3, [pc, #388]	; (8003b64 <UART_SetConfig+0x2d4>)
 80039de:	fba3 2302 	umull	r2, r3, r3, r2
 80039e2:	095b      	lsrs	r3, r3, #5
 80039e4:	011c      	lsls	r4, r3, #4
 80039e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039f8:	4642      	mov	r2, r8
 80039fa:	464b      	mov	r3, r9
 80039fc:	1891      	adds	r1, r2, r2
 80039fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8003a00:	415b      	adcs	r3, r3
 8003a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003a08:	4641      	mov	r1, r8
 8003a0a:	eb12 0a01 	adds.w	sl, r2, r1
 8003a0e:	4649      	mov	r1, r9
 8003a10:	eb43 0b01 	adc.w	fp, r3, r1
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a28:	4692      	mov	sl, r2
 8003a2a:	469b      	mov	fp, r3
 8003a2c:	4643      	mov	r3, r8
 8003a2e:	eb1a 0303 	adds.w	r3, sl, r3
 8003a32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a36:	464b      	mov	r3, r9
 8003a38:	eb4b 0303 	adc.w	r3, fp, r3
 8003a3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a54:	460b      	mov	r3, r1
 8003a56:	18db      	adds	r3, r3, r3
 8003a58:	643b      	str	r3, [r7, #64]	; 0x40
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	eb42 0303 	adc.w	r3, r2, r3
 8003a60:	647b      	str	r3, [r7, #68]	; 0x44
 8003a62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a6a:	f7fc fc95 	bl	8000398 <__aeabi_uldivmod>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	4b3b      	ldr	r3, [pc, #236]	; (8003b64 <UART_SetConfig+0x2d4>)
 8003a76:	fba3 2301 	umull	r2, r3, r3, r1
 8003a7a:	095b      	lsrs	r3, r3, #5
 8003a7c:	2264      	movs	r2, #100	; 0x64
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	1acb      	subs	r3, r1, r3
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a8a:	4b36      	ldr	r3, [pc, #216]	; (8003b64 <UART_SetConfig+0x2d4>)
 8003a8c:	fba3 2302 	umull	r2, r3, r3, r2
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a98:	441c      	add	r4, r3
 8003a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aa4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003aa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003aac:	4642      	mov	r2, r8
 8003aae:	464b      	mov	r3, r9
 8003ab0:	1891      	adds	r1, r2, r2
 8003ab2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ab4:	415b      	adcs	r3, r3
 8003ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ab8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003abc:	4641      	mov	r1, r8
 8003abe:	1851      	adds	r1, r2, r1
 8003ac0:	6339      	str	r1, [r7, #48]	; 0x30
 8003ac2:	4649      	mov	r1, r9
 8003ac4:	414b      	adcs	r3, r1
 8003ac6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ad4:	4659      	mov	r1, fp
 8003ad6:	00cb      	lsls	r3, r1, #3
 8003ad8:	4651      	mov	r1, sl
 8003ada:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ade:	4651      	mov	r1, sl
 8003ae0:	00ca      	lsls	r2, r1, #3
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	4642      	mov	r2, r8
 8003aea:	189b      	adds	r3, r3, r2
 8003aec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003af0:	464b      	mov	r3, r9
 8003af2:	460a      	mov	r2, r1
 8003af4:	eb42 0303 	adc.w	r3, r2, r3
 8003af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003b0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b10:	460b      	mov	r3, r1
 8003b12:	18db      	adds	r3, r3, r3
 8003b14:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b16:	4613      	mov	r3, r2
 8003b18:	eb42 0303 	adc.w	r3, r2, r3
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003b26:	f7fc fc37 	bl	8000398 <__aeabi_uldivmod>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <UART_SetConfig+0x2d4>)
 8003b30:	fba3 1302 	umull	r1, r3, r3, r2
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	2164      	movs	r1, #100	; 0x64
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	3332      	adds	r3, #50	; 0x32
 8003b42:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <UART_SetConfig+0x2d4>)
 8003b44:	fba2 2303 	umull	r2, r3, r2, r3
 8003b48:	095b      	lsrs	r3, r3, #5
 8003b4a:	f003 0207 	and.w	r2, r3, #7
 8003b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4422      	add	r2, r4
 8003b56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b58:	e105      	b.n	8003d66 <UART_SetConfig+0x4d6>
 8003b5a:	bf00      	nop
 8003b5c:	40011000 	.word	0x40011000
 8003b60:	40011400 	.word	0x40011400
 8003b64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b7a:	4642      	mov	r2, r8
 8003b7c:	464b      	mov	r3, r9
 8003b7e:	1891      	adds	r1, r2, r2
 8003b80:	6239      	str	r1, [r7, #32]
 8003b82:	415b      	adcs	r3, r3
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
 8003b86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b8a:	4641      	mov	r1, r8
 8003b8c:	1854      	adds	r4, r2, r1
 8003b8e:	4649      	mov	r1, r9
 8003b90:	eb43 0501 	adc.w	r5, r3, r1
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	00eb      	lsls	r3, r5, #3
 8003b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ba2:	00e2      	lsls	r2, r4, #3
 8003ba4:	4614      	mov	r4, r2
 8003ba6:	461d      	mov	r5, r3
 8003ba8:	4643      	mov	r3, r8
 8003baa:	18e3      	adds	r3, r4, r3
 8003bac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bb0:	464b      	mov	r3, r9
 8003bb2:	eb45 0303 	adc.w	r3, r5, r3
 8003bb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	008b      	lsls	r3, r1, #2
 8003bda:	4621      	mov	r1, r4
 8003bdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003be0:	4621      	mov	r1, r4
 8003be2:	008a      	lsls	r2, r1, #2
 8003be4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003be8:	f7fc fbd6 	bl	8000398 <__aeabi_uldivmod>
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4b60      	ldr	r3, [pc, #384]	; (8003d74 <UART_SetConfig+0x4e4>)
 8003bf2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	011c      	lsls	r4, r3, #4
 8003bfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003c04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003c08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003c0c:	4642      	mov	r2, r8
 8003c0e:	464b      	mov	r3, r9
 8003c10:	1891      	adds	r1, r2, r2
 8003c12:	61b9      	str	r1, [r7, #24]
 8003c14:	415b      	adcs	r3, r3
 8003c16:	61fb      	str	r3, [r7, #28]
 8003c18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c1c:	4641      	mov	r1, r8
 8003c1e:	1851      	adds	r1, r2, r1
 8003c20:	6139      	str	r1, [r7, #16]
 8003c22:	4649      	mov	r1, r9
 8003c24:	414b      	adcs	r3, r1
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c34:	4659      	mov	r1, fp
 8003c36:	00cb      	lsls	r3, r1, #3
 8003c38:	4651      	mov	r1, sl
 8003c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c3e:	4651      	mov	r1, sl
 8003c40:	00ca      	lsls	r2, r1, #3
 8003c42:	4610      	mov	r0, r2
 8003c44:	4619      	mov	r1, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	4642      	mov	r2, r8
 8003c4a:	189b      	adds	r3, r3, r2
 8003c4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c50:	464b      	mov	r3, r9
 8003c52:	460a      	mov	r2, r1
 8003c54:	eb42 0303 	adc.w	r3, r2, r3
 8003c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c74:	4649      	mov	r1, r9
 8003c76:	008b      	lsls	r3, r1, #2
 8003c78:	4641      	mov	r1, r8
 8003c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c7e:	4641      	mov	r1, r8
 8003c80:	008a      	lsls	r2, r1, #2
 8003c82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c86:	f7fc fb87 	bl	8000398 <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4b39      	ldr	r3, [pc, #228]	; (8003d74 <UART_SetConfig+0x4e4>)
 8003c90:	fba3 1302 	umull	r1, r3, r3, r2
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	2164      	movs	r1, #100	; 0x64
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	3332      	adds	r3, #50	; 0x32
 8003ca2:	4a34      	ldr	r2, [pc, #208]	; (8003d74 <UART_SetConfig+0x4e4>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cae:	441c      	add	r4, r3
 8003cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	673b      	str	r3, [r7, #112]	; 0x70
 8003cb8:	677a      	str	r2, [r7, #116]	; 0x74
 8003cba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cbe:	4642      	mov	r2, r8
 8003cc0:	464b      	mov	r3, r9
 8003cc2:	1891      	adds	r1, r2, r2
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	415b      	adcs	r3, r3
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cce:	4641      	mov	r1, r8
 8003cd0:	1851      	adds	r1, r2, r1
 8003cd2:	6039      	str	r1, [r7, #0]
 8003cd4:	4649      	mov	r1, r9
 8003cd6:	414b      	adcs	r3, r1
 8003cd8:	607b      	str	r3, [r7, #4]
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ce6:	4659      	mov	r1, fp
 8003ce8:	00cb      	lsls	r3, r1, #3
 8003cea:	4651      	mov	r1, sl
 8003cec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cf0:	4651      	mov	r1, sl
 8003cf2:	00ca      	lsls	r2, r1, #3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4642      	mov	r2, r8
 8003cfc:	189b      	adds	r3, r3, r2
 8003cfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d00:	464b      	mov	r3, r9
 8003d02:	460a      	mov	r2, r1
 8003d04:	eb42 0303 	adc.w	r3, r2, r3
 8003d08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	663b      	str	r3, [r7, #96]	; 0x60
 8003d14:	667a      	str	r2, [r7, #100]	; 0x64
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d22:	4649      	mov	r1, r9
 8003d24:	008b      	lsls	r3, r1, #2
 8003d26:	4641      	mov	r1, r8
 8003d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	008a      	lsls	r2, r1, #2
 8003d30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d34:	f7fc fb30 	bl	8000398 <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4b0d      	ldr	r3, [pc, #52]	; (8003d74 <UART_SetConfig+0x4e4>)
 8003d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	2164      	movs	r1, #100	; 0x64
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	3332      	adds	r3, #50	; 0x32
 8003d50:	4a08      	ldr	r2, [pc, #32]	; (8003d74 <UART_SetConfig+0x4e4>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	f003 020f 	and.w	r2, r3, #15
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4422      	add	r2, r4
 8003d64:	609a      	str	r2, [r3, #8]
}
 8003d66:	bf00      	nop
 8003d68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
 8003d74:	51eb851f 	.word	0x51eb851f

08003d78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d78:	b084      	sub	sp, #16
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b084      	sub	sp, #16
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	f107 001c 	add.w	r0, r7, #28
 8003d86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d122      	bne.n	8003dd6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d105      	bne.n	8003dca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 faa2 	bl	8004314 <USB_CoreReset>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	73fb      	strb	r3, [r7, #15]
 8003dd4:	e01a      	b.n	8003e0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fa96 	bl	8004314 <USB_CoreReset>
 8003de8:	4603      	mov	r3, r0
 8003dea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38
 8003dfe:	e005      	b.n	8003e0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d10b      	bne.n	8003e2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f043 0206 	orr.w	r2, r3, #6
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f043 0220 	orr.w	r2, r3, #32
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e36:	b004      	add	sp, #16
 8003e38:	4770      	bx	lr

08003e3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f023 0201 	bic.w	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d115      	bne.n	8003eaa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	f7fe f906 	bl	800209c <HAL_Delay>
      ms++;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	3301      	adds	r3, #1
 8003e94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fa2e 	bl	80042f8 <USB_GetMode>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d01e      	beq.n	8003ee0 <USB_SetCurrentMode+0x84>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2b31      	cmp	r3, #49	; 0x31
 8003ea6:	d9f0      	bls.n	8003e8a <USB_SetCurrentMode+0x2e>
 8003ea8:	e01a      	b.n	8003ee0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d115      	bne.n	8003edc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f7fe f8ed 	bl	800209c <HAL_Delay>
      ms++;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fa15 	bl	80042f8 <USB_GetMode>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <USB_SetCurrentMode+0x84>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b31      	cmp	r3, #49	; 0x31
 8003ed8:	d9f0      	bls.n	8003ebc <USB_SetCurrentMode+0x60>
 8003eda:	e001      	b.n	8003ee0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e005      	b.n	8003eec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2b32      	cmp	r3, #50	; 0x32
 8003ee4:	d101      	bne.n	8003eea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	b580      	push	{r7, lr}
 8003ef8:	b086      	sub	sp, #24
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
 8003efe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	e009      	b.n	8003f28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	3340      	adds	r3, #64	; 0x40
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	2200      	movs	r2, #0
 8003f20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	3301      	adds	r3, #1
 8003f26:	613b      	str	r3, [r7, #16]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	2b0e      	cmp	r3, #14
 8003f2c:	d9f2      	bls.n	8003f14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d11c      	bne.n	8003f6e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f42:	f043 0302 	orr.w	r3, r3, #2
 8003f46:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f6c:	e00b      	b.n	8003f86 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	2300      	movs	r3, #0
 8003f90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f98:	4619      	mov	r1, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	680b      	ldr	r3, [r1, #0]
 8003fa4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d10c      	bne.n	8003fc6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d104      	bne.n	8003fbc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f965 	bl	8004284 <USB_SetDevSpeed>
 8003fba:	e008      	b.n	8003fce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f960 	bl	8004284 <USB_SetDevSpeed>
 8003fc4:	e003      	b.n	8003fce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fc6:	2103      	movs	r1, #3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f95b 	bl	8004284 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fce:	2110      	movs	r1, #16
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f8f3 	bl	80041bc <USB_FlushTxFifo>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d001      	beq.n	8003fe0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f91f 	bl	8004224 <USB_FlushRxFifo>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004002:	461a      	mov	r2, r3
 8004004:	2300      	movs	r3, #0
 8004006:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800400e:	461a      	mov	r2, r3
 8004010:	2300      	movs	r3, #0
 8004012:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004014:	2300      	movs	r3, #0
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e043      	b.n	80040a2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	015a      	lsls	r2, r3, #5
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	4413      	add	r3, r2
 8004022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800402c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004030:	d118      	bne.n	8004064 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10a      	bne.n	800404e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	461a      	mov	r2, r3
 8004046:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	e013      	b.n	8004076 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405a:	461a      	mov	r2, r3
 800405c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e008      	b.n	8004076 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004070:	461a      	mov	r2, r3
 8004072:	2300      	movs	r3, #0
 8004074:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004082:	461a      	mov	r2, r3
 8004084:	2300      	movs	r3, #0
 8004086:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	461a      	mov	r2, r3
 8004096:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800409a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	3301      	adds	r3, #1
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d3b7      	bcc.n	800401a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	e043      	b.n	8004138 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040c6:	d118      	bne.n	80040fa <USB_DevInit+0x206>
    {
      if (i == 0U)
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10a      	bne.n	80040e4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040da:	461a      	mov	r2, r3
 80040dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040e0:	6013      	str	r3, [r2, #0]
 80040e2:	e013      	b.n	800410c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f0:	461a      	mov	r2, r3
 80040f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80040f6:	6013      	str	r3, [r2, #0]
 80040f8:	e008      	b.n	800410c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	4413      	add	r3, r2
 8004102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004106:	461a      	mov	r2, r3
 8004108:	2300      	movs	r3, #0
 800410a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004118:	461a      	mov	r2, r3
 800411a:	2300      	movs	r3, #0
 800411c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412a:	461a      	mov	r2, r3
 800412c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004130:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	3301      	adds	r3, #1
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	429a      	cmp	r2, r3
 800413e:	d3b7      	bcc.n	80040b0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800414e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004152:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004160:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004164:	2b00      	cmp	r3, #0
 8004166:	d105      	bne.n	8004174 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f043 0210 	orr.w	r2, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	699a      	ldr	r2, [r3, #24]
 8004178:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <USB_DevInit+0x2c4>)
 800417a:	4313      	orrs	r3, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f043 0208 	orr.w	r2, r3, #8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004194:	2b01      	cmp	r3, #1
 8004196:	d107      	bne.n	80041a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041a0:	f043 0304 	orr.w	r3, r3, #4
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041b4:	b004      	add	sp, #16
 80041b6:	4770      	bx	lr
 80041b8:	803c3800 	.word	0x803c3800

080041bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3301      	adds	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4a13      	ldr	r2, [pc, #76]	; (8004220 <USB_FlushTxFifo+0x64>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d901      	bls.n	80041dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e01b      	b.n	8004214 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	daf2      	bge.n	80041ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	019b      	lsls	r3, r3, #6
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3301      	adds	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a08      	ldr	r2, [pc, #32]	; (8004220 <USB_FlushTxFifo+0x64>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e006      	b.n	8004214 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b20      	cmp	r3, #32
 8004210:	d0f0      	beq.n	80041f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	00030d40 	.word	0x00030d40

08004224 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3301      	adds	r3, #1
 8004234:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4a11      	ldr	r2, [pc, #68]	; (8004280 <USB_FlushRxFifo+0x5c>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d901      	bls.n	8004242 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e018      	b.n	8004274 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	daf2      	bge.n	8004230 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2210      	movs	r2, #16
 8004252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4a08      	ldr	r2, [pc, #32]	; (8004280 <USB_FlushRxFifo+0x5c>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e006      	b.n	8004274 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0310 	and.w	r3, r3, #16
 800426e:	2b10      	cmp	r3, #16
 8004270:	d0f0      	beq.n	8004254 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	00030d40 	.word	0x00030d40

08004284 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	78fb      	ldrb	r3, [r7, #3]
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042a4:	4313      	orrs	r3, r2
 80042a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042d0:	f023 0303 	bic.w	r3, r3, #3
 80042d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e4:	f043 0302 	orr.w	r3, r3, #2
 80042e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0301 	and.w	r3, r3, #1
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	3301      	adds	r3, #1
 8004324:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	4a13      	ldr	r2, [pc, #76]	; (8004378 <USB_CoreReset+0x64>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e01b      	b.n	800436a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	daf2      	bge.n	8004320 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	f043 0201 	orr.w	r2, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3301      	adds	r3, #1
 800434e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <USB_CoreReset+0x64>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d901      	bls.n	800435c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e006      	b.n	800436a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b01      	cmp	r3, #1
 8004366:	d0f0      	beq.n	800434a <USB_CoreReset+0x36>

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	00030d40 	.word	0x00030d40

0800437c <__libc_init_array>:
 800437c:	b570      	push	{r4, r5, r6, lr}
 800437e:	4d0d      	ldr	r5, [pc, #52]	; (80043b4 <__libc_init_array+0x38>)
 8004380:	4c0d      	ldr	r4, [pc, #52]	; (80043b8 <__libc_init_array+0x3c>)
 8004382:	1b64      	subs	r4, r4, r5
 8004384:	10a4      	asrs	r4, r4, #2
 8004386:	2600      	movs	r6, #0
 8004388:	42a6      	cmp	r6, r4
 800438a:	d109      	bne.n	80043a0 <__libc_init_array+0x24>
 800438c:	4d0b      	ldr	r5, [pc, #44]	; (80043bc <__libc_init_array+0x40>)
 800438e:	4c0c      	ldr	r4, [pc, #48]	; (80043c0 <__libc_init_array+0x44>)
 8004390:	f000 f820 	bl	80043d4 <_init>
 8004394:	1b64      	subs	r4, r4, r5
 8004396:	10a4      	asrs	r4, r4, #2
 8004398:	2600      	movs	r6, #0
 800439a:	42a6      	cmp	r6, r4
 800439c:	d105      	bne.n	80043aa <__libc_init_array+0x2e>
 800439e:	bd70      	pop	{r4, r5, r6, pc}
 80043a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a4:	4798      	blx	r3
 80043a6:	3601      	adds	r6, #1
 80043a8:	e7ee      	b.n	8004388 <__libc_init_array+0xc>
 80043aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80043ae:	4798      	blx	r3
 80043b0:	3601      	adds	r6, #1
 80043b2:	e7f2      	b.n	800439a <__libc_init_array+0x1e>
 80043b4:	0800450c 	.word	0x0800450c
 80043b8:	0800450c 	.word	0x0800450c
 80043bc:	0800450c 	.word	0x0800450c
 80043c0:	08004510 	.word	0x08004510

080043c4 <memset>:
 80043c4:	4402      	add	r2, r0
 80043c6:	4603      	mov	r3, r0
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d100      	bne.n	80043ce <memset+0xa>
 80043cc:	4770      	bx	lr
 80043ce:	f803 1b01 	strb.w	r1, [r3], #1
 80043d2:	e7f9      	b.n	80043c8 <memset+0x4>

080043d4 <_init>:
 80043d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d6:	bf00      	nop
 80043d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043da:	bc08      	pop	{r3}
 80043dc:	469e      	mov	lr, r3
 80043de:	4770      	bx	lr

080043e0 <_fini>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	bf00      	nop
 80043e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043e6:	bc08      	pop	{r3}
 80043e8:	469e      	mov	lr, r3
 80043ea:	4770      	bx	lr
