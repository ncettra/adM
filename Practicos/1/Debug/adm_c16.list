
adm_c16.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004020  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080041cc  080041cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c4  080042c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042cc  080042cc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042d0  080042d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080042d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000d961  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000f65a  00000000  00000000  0002d99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d82  00000000  00000000  0003cff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ba0  00000000  00000000  0003ed80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d98d6  00000000  00000000  0003f920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000ae8  00000000  00000000  001191f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00023b2f  00000000  00000000  00119ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d80f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003104  00000000  00000000  0013d860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080041b4 	.word	0x080041b4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	080041b4 	.word	0x080041b4

080001ec <asm_svc>:
@ Prototipo en "C":
@   void asm_svc (void)
@
.thumb_func
    asm_svc:
        svc 0
 80001ec:	df00      	svc	0
        bx lr
 80001ee:	4770      	bx	lr

080001f0 <asm_sum>:
@ Valor de retorno:
@   r0: resultado de la suma de firstOperand y secondOperand
@
.thumb_func
    asm_sum:
        add r0, r1  @ r0 = r0 + r1
 80001f0:	4408      	add	r0, r1
        bx lr       @ vuelve adonde fue llamada (especificamente, si "pc"
 80001f2:	4770      	bx	lr

080001f4 <asm_zeros>:
   r1: longitud (longitud)
*/

.thumb_func
	asm_zeros:
	    cbz r0, exit_1   			// Salto a la etiqueta exit si r0 es cero
 80001f4:	b130      	cbz	r0, 8000204 <exit_1>
	    cbz r1, exit_1   			// Salto a la etiqueta exit si r1 es cero
 80001f6:	b129      	cbz	r1, 8000204 <exit_1>
	    movs r3, #0    				// Carga el valor cero en el registro r3
 80001f8:	2300      	movs	r3, #0
	    mov r2, r1     				// Copia el valor de r1 en r2
 80001fa:	460a      	mov	r2, r1

080001fc <loop_1>:
	loop_1:
	    subs r2, #1    				// Decrementa el valor de r2 en uno
 80001fc:	3a01      	subs	r2, #1
	    str r3, [r0, r2, LSL #2]  	// Almacena el valor cero en la dirección de memoria calculada a partir de r0 y r2, multiplicada por cuatro debido a LSL #2
 80001fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	    bne loop_1     				// Salta al loop si r2 no es cero
 8000202:	d1fb      	bne.n	80001fc <loop_1>

08000204 <exit_1>:
	exit_1:
	    bx lr          				// Retorno desde la función
 8000204:	4770      	bx	lr

08000206 <asm_productoEscalar32>:
	r3: escalar a multiplicar
*/

.thumb_func
    asm_productoEscalar32:
    	push {r4}					//guarda r4 en la pila
 8000206:	b410      	push	{r4}

08000208 <loop_2>:
    loop_2:
    	subs r2, #1 				//decrementamos la longitud
 8000208:	3a01      	subs	r2, #1
    	ldr r4, [r0, r2, LSL #2] 	//cargamos un valor de 32bits en el r4 y lo desplazamos
 800020a:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    	mul r4, r4, r3 			 	//multiplica r4 por el escalar en r3
 800020e:	fb04 f403 	mul.w	r4, r4, r3
    	str r4, [r1, r2, LSL #2] 	//guardamos el resultado de la multiplicacion
 8000212:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
    	bne loop_2
 8000216:	d1f7      	bne.n	8000208 <loop_2>
    	pop {r4}					//restaura los valores previos de los registros
 8000218:	bc10      	pop	{r4}
        bx lr
 800021a:	4770      	bx	lr

0800021c <asm_productoEscalar16>:
	r3: escalar a multiplicar
*/
//NOTA EL H INDICA EL THUMB de 16bits
.thumb_func
    asm_productoEscalar16:
    	push {r4}			   		//guardo r4 en pila
 800021c:	b410      	push	{r4}

0800021e <loop_3>:
    loop_3:
    	ldrh r4, [r0, r2, LSL #1] 	//cargamos un valor de 32bits en el r4 y lo desplazamos
 800021e:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
    	mul r4, r4, r3 			 	//multiplica r4 por el escalar en r3
 8000222:	fb04 f403 	mul.w	r4, r4, r3
    	strh r4, [r1, r2, LSL #1] 	//guardamos el resultado de la multiplicacion
 8000226:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
    	subs r2, #1 				//decrementamos la longitud
 800022a:	3a01      	subs	r2, #1
    	bne loop_2
 800022c:	d1ec      	bne.n	8000208 <loop_2>
    	pop {r4}					//restaura los valores previos de los registros
 800022e:	bc10      	pop	{r4}
        bx lr
 8000230:	4770      	bx	lr

08000232 <asm_productoEscalar12>:
	r3: escalar a multiplicar

*/
.thumb_func
asm_productoEscalar12:
	    push {r4,r5}              	// Guardar registros en la pila
 8000232:	b430      	push	{r4, r5}

08000234 <loop_4>:
	loop_4:
	    ldrh r4, [r0, r2, LSL #1]   // Cargar valor de medio palabra (16 bits) en r4
 8000234:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
	    mul r5, r4, r3              // Multiplicar r4 por el escalar r3 y lo tiro en r5
 8000238:	fb04 f503 	mul.w	r5, r4, r3
	    usat r4, #12, r5            // Saturar el resultado a 12 bits
 800023c:	f385 040c 	usat	r4, #12, r5
	    strh r4, [r1, r2, LSL #1]   // Almacenar el resultado en memoria
 8000240:	f821 4012 	strh.w	r4, [r1, r2, lsl #1]
	    subs r2, #1                 // Decrementar r2
 8000244:	3a01      	subs	r2, #1
	    bne loop_4                  // Mientras r2 > 0
 8000246:	d1f5      	bne.n	8000234 <loop_4>
	    pop {r4,r5}               	// Recuperar registros y retornar
 8000248:	bc30      	pop	{r4, r5}
	    bx lr
 800024a:	4770      	bx	lr

0800024c <asm_filtroVentana10>:


*/
.thumb_func
asm_filtroVentana10:
push {r4-r10}
 800024c:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
	//r1 vector out
	//r2 logintud
	//r10 -> SampleOffset = 5 (ver en programa en C)
	//r9 -> WindowSize = SampleOffset*2 + 1 ---> 11

	mov r3, r2					// Resguardo longitud (r2) para ver cuando estoy fuera del vector
 8000250:	4613      	mov	r3, r2
	mov r9, #11 				// cantidad de muestras ventana
 8000252:	f04f 090b 	mov.w	r9, #11
	mov r10, #5 				// posicion de la ventana
 8000256:	f04f 0a05 	mov.w	sl, #5

0800025a <loop_5_1>:

loop_5_1: 						// Recorremos VectorIN
	subs r3, #1
 800025a:	3b01      	subs	r3, #1
	beq exit_5					// Si ya lo recorri saltar al exit
 800025c:	d01a      	beq.n	8000294 <exit_5>
	mov r6, #0					// Limpio el acumulador
 800025e:	f04f 0600 	mov.w	r6, #0
	add r4, r3, r10				// Posicion del vector + posicion central de la ventana r3+r10
 8000262:	eb03 040a 	add.w	r4, r3, sl
	cmp r4, r9					// Comparo con la cantidad de muestras que tiene la ventana
 8000266:	454c      	cmp	r4, r9
	mov r7, #0
 8000268:	f04f 0700 	mov.w	r7, #0
	itt gt						// Verifico que si la ventana es maás grande que las muestras restantes
 800026c:	bfc4      	itt	gt
	subgt r7, r4, r9
 800026e:	eba4 0709 	subgt.w	r7, r4, r9
	subgt r7, #1
 8000272:	3f01      	subgt	r7, #1
	mov r8, r9
 8000274:	46c8      	mov	r8, r9

08000276 <loop_5_2>:

loop_5_2:						// Recorremos la ventana para sumar y promediar
	subs r4, #1
 8000276:	3c01      	subs	r4, #1
	beq loop_5_1
 8000278:	d0ef      	beq.n	800025a <loop_5_1>
	cmp r2, r4					// ignorar operaciones si estamos afura del vector
 800027a:	42a2      	cmp	r2, r4
	bls loop_5_2
 800027c:	d9fb      	bls.n	8000276 <loop_5_2>
	cmp r4, r7
 800027e:	42bc      	cmp	r4, r7
	ittt ls						// Chequeo si llegue al final
 8000280:	bf9e      	ittt	ls
	udivls r6, r6, r8			// Si llegue divido para promediar
 8000282:	fbb6 f6f8 	udivls	r6, r6, r8
	strhls r6, [r1, r3, LSL #1]	// Guardo el resultado en vector out
 8000286:	f821 6013 	strhls.w	r6, [r1, r3, lsl #1]
	bls loop_5_1				// Sigue con el siguiente valor
 800028a:	e7e6      	bls.n	800025a <loop_5_1>

	ldrh r5, [r0, r4, LSL #1]
 800028c:	f830 5014 	ldrh.w	r5, [r0, r4, lsl #1]
	add r6, r6, r5				// r6 = r6 + r5 se suma una muetra más
 8000290:	442e      	add	r6, r5
	b loop_5_2
 8000292:	e7f0      	b.n	8000276 <loop_5_2>

08000294 <exit_5>:

exit_5:
	pop {r4-r10}
 8000294:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
	bx lr
 8000298:	4770      	bx	lr

0800029a <asm_pack32to16>:
prototipo: void pack32to16 (int32_t * vectorIn, int16_t *vectorOut, uint32_t longitud);

*/
.thumb_func
asm_pack32to16:
    push {r4, r5}               	// Guardar registros en la pila
 800029a:	b430      	push	{r4, r5}
    mov r4, r0                      // Puntero al vector de entrada (32 bits)
 800029c:	4604      	mov	r4, r0
    mov r5, r1                      // Puntero al vector de salida (16 bits)
 800029e:	460d      	mov	r5, r1
    mov r0, r2                      // Longitud del vector
 80002a0:	4610      	mov	r0, r2

080002a2 <loop_6>:
loop_6:
    ldr r1, [r4], #4                // Cargar valor de 32 bits
 80002a2:	f854 1b04 	ldr.w	r1, [r4], #4
    movs r1, r1, LSR #16            // Desplazar valor de 32 bits a la derecha para obtener 16 bits
 80002a6:	0c09      	lsrs	r1, r1, #16
    strh r1, [r5], #2               // Almacenar valor de 16 bits en vector de salida
 80002a8:	f825 1b02 	strh.w	r1, [r5], #2
    subs r0, r0, #1                 // Decrementar contador
 80002ac:	3801      	subs	r0, #1
    bne loop_6                      // Repetir mientras contador no sea cero
 80002ae:	d1f8      	bne.n	80002a2 <loop_6>
    pop {r4, r5}                    // Recuperar registros y retornar
 80002b0:	bc30      	pop	{r4, r5}
    bx lr
 80002b2:	4770      	bx	lr

080002b4 <asm_max32>:
	retorno: la posicion del valor maximo en int32
*/

.thumb_func
asm_max32:
    push {r4}
 80002b4:	b410      	push	{r4}
    sub r1, #1
 80002b6:	f1a1 0101 	sub.w	r1, r1, #1
    ldr r2, [r0, r1, LSL #2]    // Se guarda el primer valor para comparar
 80002ba:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    mov r3, r1                 	// Se guarda el índice
 80002be:	460b      	mov	r3, r1
    subs r1, #1
 80002c0:	3901      	subs	r1, #1

080002c2 <loop_7>:
loop_7:
    ldr r4, [r0, r1, LSL #2]    // Se carga siguiente valor para comparar
 80002c2:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
    cmp r4, r2                 	// Se compara con el valor cargado previo
 80002c6:	4294      	cmp	r4, r2
    bgt greater_than           	// Salta a greater_than si r4 > r2
 80002c8:	dc02      	bgt.n	80002d0 <greater_than>
    subs r1, #1
 80002ca:	3901      	subs	r1, #1
    bne loop_7                 	// Vuelve al bucle si no se ha recorrido todo el vector
 80002cc:	d1f9      	bne.n	80002c2 <loop_7>
    b end
 80002ce:	e003      	b.n	80002d8 <end>

080002d0 <greater_than>:
greater_than:
    mov r2, r4                 	// Si el nuevo valor es mayor, se almacena en r2 para volver a comparar
 80002d0:	4622      	mov	r2, r4
    mov r3, r1                 	// Se guarda el índice
 80002d2:	460b      	mov	r3, r1
    subs r1, #1
 80002d4:	3901      	subs	r1, #1
    bne loop_7                 	// Vuelve al bucle si no se ha recorrido todo el vector
 80002d6:	d1f4      	bne.n	80002c2 <loop_7>

080002d8 <end>:
end:
    pop {r4}
 80002d8:	bc10      	pop	{r4}
    mov r0, r3                 	// Se guarda el valor de retorno
 80002da:	4618      	mov	r0, r3
    bx lr                      	// Colocar el resultado en el registro de retorno
 80002dc:	4770      	bx	lr

080002de <asm_downsampleM>:
	r3: N saltos
*/

.thumb_func
asm_downsampleM:
    push {r4-r6}
 80002de:	b470      	push	{r4, r5, r6}
    mov r4, #0                   // i = 0
 80002e0:	f04f 0400 	mov.w	r4, #0
    mov r5, #0                   // j = 0
 80002e4:	f04f 0500 	mov.w	r5, #0

080002e8 <loop>:
loop:
    ldr r6, [r0, r4, LSL #2]     // Cargar muestra de vectorIn
 80002e8:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
    str r6, [r1, r5, LSL #2]     // Almacenar muestra en vectorOut
 80002ec:	f841 6025 	str.w	r6, [r1, r5, lsl #2]
    add r4, r4, r3               // Incrementar i por N
 80002f0:	441c      	add	r4, r3
    add r5, r5, #1               // Incrementar j
 80002f2:	f105 0501 	add.w	r5, r5, #1
    cmp r4, r2                   // Comparar i con longitud
 80002f6:	4294      	cmp	r4, r2
    blt loop                     // Volver al bucle si i < longitud
 80002f8:	dbf6      	blt.n	80002e8 <loop>
    pop {r4-r6}
 80002fa:	bc70      	pop	{r4, r5, r6}
    bx lr
 80002fc:	4770      	bx	lr

080002fe <asm_invertir>:
	r1: longitud
*/

.thumb_func
asm_invertir:
push {r4}
 80002fe:	b410      	push	{r4}
    	mov r2, #0  				// posicion 0, en r1 tengo el otro extremo
 8000300:	f04f 0200 	mov.w	r2, #0

08000304 <loop_9>:
    loop_9:
    	subs r1, #1
 8000304:	3901      	subs	r1, #1

    	ldrh r3, [r0, r2, LSL #1]  	// !--->   !
 8000306:	f830 3012 	ldrh.w	r3, [r0, r2, lsl #1]
    	ldrh r4, [r0, r1, LSL #1]  	// !   <---!
 800030a:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]

    	cmp r1, r2 					//verifico que el indice izq sea distinto al derecho
 800030e:	4291      	cmp	r1, r2

		itte hi 					// uso el if and then con doble condicionante
 8000310:	bf86      	itte	hi
		strhhi r3, [r0, r1, LSL #1]	// Intercambio valores de los extremos
 8000312:	f820 3011 	strhhi.w	r3, [r0, r1, lsl #1]
		strhhi r4, [r0, r2, LSL #1]
 8000316:	f820 4012 	strhhi.w	r4, [r0, r2, lsl #1]
		bls exit_9					// Se ejecuta hasta que las posiciones de r2 y r1 se solapen
 800031a:	e002      	bls.n	8000322 <exit_9>

    	add r2, #1 					// de un lado decresco y de este crezco (es más facil verlo en la funcion en C)
 800031c:	f102 0201 	add.w	r2, r2, #1
		bne loop_9
 8000320:	d1f0      	bne.n	8000304 <loop_9>

08000322 <exit_9>:
    exit_9:
    	pop {r4}
 8000322:	bc10      	pop	{r4}
        bx lr
 8000324:	4770      	bx	lr

08000326 <asm_eco>:
	aca hardcodie algunas cosas como las muestras, pero podria introducirlas y calcular mas cosas en funcion de los parametros
*/

.thumb_func
asm_eco:
    	push {r4-r6}
 8000326:	b470      	push	{r4, r5, r6}
    	mov r4, #882  				// Retraso de 20ms (882)
 8000328:	f240 3472 	movw	r4, #882	; 0x372
    	mov r2, #4095 				// Cant de muestras (4096)
 800032c:	f640 72ff 	movw	r2, #4095	; 0xfff

08000330 <loop_10>:
    loop_10:
    	sub r3, r2, r4  			// (4096 - 882)
 8000330:	eba2 0304 	sub.w	r3, r2, r4
    	ldrsh r5, [r0, r2, LSL #1]  // Cargo la muestra
 8000334:	f930 5012 	ldrsh.w	r5, [r0, r2, lsl #1]
    	ldrsh r6, [r0, r3, LSL #1]  // Cargo la muestra desplazada
 8000338:	f930 6013 	ldrsh.w	r6, [r0, r3, lsl #1]
    	asr r6, #1					// Hago un desplazamiento hacia la derecha para dividir por dos
 800033c:	ea4f 0666 	mov.w	r6, r6, asr #1
    	add r6, r5, r6 				// Sumo la division anterior a la muestra
 8000340:	442e      	add	r6, r5
    	strh r6, [r1, r2, LSL #1]
 8000342:	f821 6012 	strh.w	r6, [r1, r2, lsl #1]
    	cmp r2, r4  				// Si el desplazamiento de las muestras alcanza a 882, no hay que agregar "eco"
 8000346:	42a2      	cmp	r2, r4
    	sub r2, #1
 8000348:	f1a2 0201 	sub.w	r2, r2, #1
    	bne loop_10					// si ya no se agrega "eco" copiamos las muestras directamente
 800034c:	d1f0      	bne.n	8000330 <loop_10>

0800034e <loop_10_2>:
    loop_10_2:
    	ldrh r6, [r0, r2, LSL #1]
 800034e:	f830 6012 	ldrh.w	r6, [r0, r2, lsl #1]
    	strh r6, [r1, r2, LSL #1]
 8000352:	f821 6012 	strh.w	r6, [r1, r2, lsl #1]
    	subs r2, #1
 8000356:	3a01      	subs	r2, #1
    	bne loop_10_2
 8000358:	d1f9      	bne.n	800034e <loop_10_2>
    	pop {r4-r6}
 800035a:	bc70      	pop	{r4, r5, r6}
        bx lr
 800035c:	4770      	bx	lr

0800035e <asm_calcularCorrelacion>:

*/

.thumb_func
asm_calcularCorrelacion:
    push {r4, r5, r6}           	// Guardar registros en la pila
 800035e:	b470      	push	{r4, r5, r6}
    mov r4, r0                      // Puntero al primer vector
 8000360:	4604      	mov	r4, r0
    mov r5, r1                      // Puntero al segundo vector
 8000362:	460d      	mov	r5, r1
    mov r6, r2                      // Longitud de los vectores
 8000364:	4616      	mov	r6, r2
    ldr r0, [r4]                    // Cargar el primer valor del primer vector
 8000366:	6820      	ldr	r0, [r4, #0]
    ldr r1, [r5]                    // Cargar el primer valor del segundo vector
 8000368:	6829      	ldr	r1, [r5, #0]
    mov r2, #0                      // Inicializar el acumulador de la correlación en cero
 800036a:	f04f 0200 	mov.w	r2, #0

0800036e <loop_11>:
loop_11:
    mul r3, r0, r1                  // Multiplicar los valores de los vectores
 800036e:	fb00 f301 	mul.w	r3, r0, r1
    add r2, r2, r3                  // Acumular el resultado de la multiplicación
 8000372:	441a      	add	r2, r3
    add r4, r4, #4                  // Avanzar al siguiente valor del primer vector (incrementar en 4 bytes)
 8000374:	f104 0404 	add.w	r4, r4, #4
    add r5, r5, #4                  // Avanzar al siguiente valor del segundo vector (incrementar en 4 bytes)
 8000378:	f105 0504 	add.w	r5, r5, #4
    ldr r0, [r4]                    // Cargar el siguiente valor del primer vector
 800037c:	6820      	ldr	r0, [r4, #0]
    ldr r1, [r5]                    // Cargar el siguiente valor del segundo vector
 800037e:	6829      	ldr	r1, [r5, #0]
    subs r6, r6, #1                 // Decrementar el contador de longitud en 1
 8000380:	3e01      	subs	r6, #1
    cmp r6, #0                      // Comparar el contador con cero
 8000382:	2e00      	cmp	r6, #0
    bne loop_11                     // Repetir mientras el contador no sea cero
 8000384:	d1f3      	bne.n	800036e <loop_11>
    pop {r4, r5, r6}            	// Recuperar registros y retornar
 8000386:	bc70      	pop	{r4, r5, r6}
    bx lr
 8000388:	4770      	bx	lr
	...

0800038c <__aeabi_uldivmod>:
 800038c:	b953      	cbnz	r3, 80003a4 <__aeabi_uldivmod+0x18>
 800038e:	b94a      	cbnz	r2, 80003a4 <__aeabi_uldivmod+0x18>
 8000390:	2900      	cmp	r1, #0
 8000392:	bf08      	it	eq
 8000394:	2800      	cmpeq	r0, #0
 8000396:	bf1c      	itt	ne
 8000398:	f04f 31ff 	movne.w	r1, #4294967295
 800039c:	f04f 30ff 	movne.w	r0, #4294967295
 80003a0:	f000 b974 	b.w	800068c <__aeabi_idiv0>
 80003a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80003a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003ac:	f000 f806 	bl	80003bc <__udivmoddi4>
 80003b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003b8:	b004      	add	sp, #16
 80003ba:	4770      	bx	lr

080003bc <__udivmoddi4>:
 80003bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c0:	9d08      	ldr	r5, [sp, #32]
 80003c2:	4604      	mov	r4, r0
 80003c4:	468e      	mov	lr, r1
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d14d      	bne.n	8000466 <__udivmoddi4+0xaa>
 80003ca:	428a      	cmp	r2, r1
 80003cc:	4694      	mov	ip, r2
 80003ce:	d969      	bls.n	80004a4 <__udivmoddi4+0xe8>
 80003d0:	fab2 f282 	clz	r2, r2
 80003d4:	b152      	cbz	r2, 80003ec <__udivmoddi4+0x30>
 80003d6:	fa01 f302 	lsl.w	r3, r1, r2
 80003da:	f1c2 0120 	rsb	r1, r2, #32
 80003de:	fa20 f101 	lsr.w	r1, r0, r1
 80003e2:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e6:	ea41 0e03 	orr.w	lr, r1, r3
 80003ea:	4094      	lsls	r4, r2
 80003ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f0:	0c21      	lsrs	r1, r4, #16
 80003f2:	fbbe f6f8 	udiv	r6, lr, r8
 80003f6:	fa1f f78c 	uxth.w	r7, ip
 80003fa:	fb08 e316 	mls	r3, r8, r6, lr
 80003fe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000402:	fb06 f107 	mul.w	r1, r6, r7
 8000406:	4299      	cmp	r1, r3
 8000408:	d90a      	bls.n	8000420 <__udivmoddi4+0x64>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 811f 	bcs.w	8000654 <__udivmoddi4+0x298>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 811c 	bls.w	8000654 <__udivmoddi4+0x298>
 800041c:	3e02      	subs	r6, #2
 800041e:	4463      	add	r3, ip
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 f707 	mul.w	r7, r0, r7
 8000434:	42a7      	cmp	r7, r4
 8000436:	d90a      	bls.n	800044e <__udivmoddi4+0x92>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	f080 810a 	bcs.w	8000658 <__udivmoddi4+0x29c>
 8000444:	42a7      	cmp	r7, r4
 8000446:	f240 8107 	bls.w	8000658 <__udivmoddi4+0x29c>
 800044a:	4464      	add	r4, ip
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000452:	1be4      	subs	r4, r4, r7
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa4>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xc2>
 800046a:	2d00      	cmp	r5, #0
 800046c:	f000 80ef 	beq.w	800064e <__udivmoddi4+0x292>
 8000470:	2600      	movs	r6, #0
 8000472:	e9c5 0100 	strd	r0, r1, [r5]
 8000476:	4630      	mov	r0, r6
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f683 	clz	r6, r3
 8000482:	2e00      	cmp	r6, #0
 8000484:	d14a      	bne.n	800051c <__udivmoddi4+0x160>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd4>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80f9 	bhi.w	8000682 <__udivmoddi4+0x2c6>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	469e      	mov	lr, r3
 800049a:	2d00      	cmp	r5, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa4>
 800049e:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa4>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xec>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 8092 	bne.w	80005d6 <__udivmoddi4+0x21a>
 80004b2:	eba1 010c 	sub.w	r1, r1, ip
 80004b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	2601      	movs	r6, #1
 80004c0:	0c20      	lsrs	r0, r4, #16
 80004c2:	fbb1 f3f7 	udiv	r3, r1, r7
 80004c6:	fb07 1113 	mls	r1, r7, r3, r1
 80004ca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ce:	fb0e f003 	mul.w	r0, lr, r3
 80004d2:	4288      	cmp	r0, r1
 80004d4:	d908      	bls.n	80004e8 <__udivmoddi4+0x12c>
 80004d6:	eb1c 0101 	adds.w	r1, ip, r1
 80004da:	f103 38ff 	add.w	r8, r3, #4294967295
 80004de:	d202      	bcs.n	80004e6 <__udivmoddi4+0x12a>
 80004e0:	4288      	cmp	r0, r1
 80004e2:	f200 80cb 	bhi.w	800067c <__udivmoddi4+0x2c0>
 80004e6:	4643      	mov	r3, r8
 80004e8:	1a09      	subs	r1, r1, r0
 80004ea:	b2a4      	uxth	r4, r4
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1110 	mls	r1, r7, r0, r1
 80004f4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004f8:	fb0e fe00 	mul.w	lr, lr, r0
 80004fc:	45a6      	cmp	lr, r4
 80004fe:	d908      	bls.n	8000512 <__udivmoddi4+0x156>
 8000500:	eb1c 0404 	adds.w	r4, ip, r4
 8000504:	f100 31ff 	add.w	r1, r0, #4294967295
 8000508:	d202      	bcs.n	8000510 <__udivmoddi4+0x154>
 800050a:	45a6      	cmp	lr, r4
 800050c:	f200 80bb 	bhi.w	8000686 <__udivmoddi4+0x2ca>
 8000510:	4608      	mov	r0, r1
 8000512:	eba4 040e 	sub.w	r4, r4, lr
 8000516:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x9a>
 800051c:	f1c6 0720 	rsb	r7, r6, #32
 8000520:	40b3      	lsls	r3, r6
 8000522:	fa22 fc07 	lsr.w	ip, r2, r7
 8000526:	ea4c 0c03 	orr.w	ip, ip, r3
 800052a:	fa20 f407 	lsr.w	r4, r0, r7
 800052e:	fa01 f306 	lsl.w	r3, r1, r6
 8000532:	431c      	orrs	r4, r3
 8000534:	40f9      	lsrs	r1, r7
 8000536:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053a:	fa00 f306 	lsl.w	r3, r0, r6
 800053e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000542:	0c20      	lsrs	r0, r4, #16
 8000544:	fa1f fe8c 	uxth.w	lr, ip
 8000548:	fb09 1118 	mls	r1, r9, r8, r1
 800054c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000550:	fb08 f00e 	mul.w	r0, r8, lr
 8000554:	4288      	cmp	r0, r1
 8000556:	fa02 f206 	lsl.w	r2, r2, r6
 800055a:	d90b      	bls.n	8000574 <__udivmoddi4+0x1b8>
 800055c:	eb1c 0101 	adds.w	r1, ip, r1
 8000560:	f108 3aff 	add.w	sl, r8, #4294967295
 8000564:	f080 8088 	bcs.w	8000678 <__udivmoddi4+0x2bc>
 8000568:	4288      	cmp	r0, r1
 800056a:	f240 8085 	bls.w	8000678 <__udivmoddi4+0x2bc>
 800056e:	f1a8 0802 	sub.w	r8, r8, #2
 8000572:	4461      	add	r1, ip
 8000574:	1a09      	subs	r1, r1, r0
 8000576:	b2a4      	uxth	r4, r4
 8000578:	fbb1 f0f9 	udiv	r0, r1, r9
 800057c:	fb09 1110 	mls	r1, r9, r0, r1
 8000580:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000584:	fb00 fe0e 	mul.w	lr, r0, lr
 8000588:	458e      	cmp	lr, r1
 800058a:	d908      	bls.n	800059e <__udivmoddi4+0x1e2>
 800058c:	eb1c 0101 	adds.w	r1, ip, r1
 8000590:	f100 34ff 	add.w	r4, r0, #4294967295
 8000594:	d26c      	bcs.n	8000670 <__udivmoddi4+0x2b4>
 8000596:	458e      	cmp	lr, r1
 8000598:	d96a      	bls.n	8000670 <__udivmoddi4+0x2b4>
 800059a:	3802      	subs	r0, #2
 800059c:	4461      	add	r1, ip
 800059e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a2:	fba0 9402 	umull	r9, r4, r0, r2
 80005a6:	eba1 010e 	sub.w	r1, r1, lr
 80005aa:	42a1      	cmp	r1, r4
 80005ac:	46c8      	mov	r8, r9
 80005ae:	46a6      	mov	lr, r4
 80005b0:	d356      	bcc.n	8000660 <__udivmoddi4+0x2a4>
 80005b2:	d053      	beq.n	800065c <__udivmoddi4+0x2a0>
 80005b4:	b15d      	cbz	r5, 80005ce <__udivmoddi4+0x212>
 80005b6:	ebb3 0208 	subs.w	r2, r3, r8
 80005ba:	eb61 010e 	sbc.w	r1, r1, lr
 80005be:	fa01 f707 	lsl.w	r7, r1, r7
 80005c2:	fa22 f306 	lsr.w	r3, r2, r6
 80005c6:	40f1      	lsrs	r1, r6
 80005c8:	431f      	orrs	r7, r3
 80005ca:	e9c5 7100 	strd	r7, r1, [r5]
 80005ce:	2600      	movs	r6, #0
 80005d0:	4631      	mov	r1, r6
 80005d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d6:	f1c2 0320 	rsb	r3, r2, #32
 80005da:	40d8      	lsrs	r0, r3
 80005dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e0:	fa21 f303 	lsr.w	r3, r1, r3
 80005e4:	4091      	lsls	r1, r2
 80005e6:	4301      	orrs	r1, r0
 80005e8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005ec:	fa1f fe8c 	uxth.w	lr, ip
 80005f0:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f4:	fb07 3610 	mls	r6, r7, r0, r3
 80005f8:	0c0b      	lsrs	r3, r1, #16
 80005fa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005fe:	fb00 f60e 	mul.w	r6, r0, lr
 8000602:	429e      	cmp	r6, r3
 8000604:	fa04 f402 	lsl.w	r4, r4, r2
 8000608:	d908      	bls.n	800061c <__udivmoddi4+0x260>
 800060a:	eb1c 0303 	adds.w	r3, ip, r3
 800060e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000612:	d22f      	bcs.n	8000674 <__udivmoddi4+0x2b8>
 8000614:	429e      	cmp	r6, r3
 8000616:	d92d      	bls.n	8000674 <__udivmoddi4+0x2b8>
 8000618:	3802      	subs	r0, #2
 800061a:	4463      	add	r3, ip
 800061c:	1b9b      	subs	r3, r3, r6
 800061e:	b289      	uxth	r1, r1
 8000620:	fbb3 f6f7 	udiv	r6, r3, r7
 8000624:	fb07 3316 	mls	r3, r7, r6, r3
 8000628:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800062c:	fb06 f30e 	mul.w	r3, r6, lr
 8000630:	428b      	cmp	r3, r1
 8000632:	d908      	bls.n	8000646 <__udivmoddi4+0x28a>
 8000634:	eb1c 0101 	adds.w	r1, ip, r1
 8000638:	f106 38ff 	add.w	r8, r6, #4294967295
 800063c:	d216      	bcs.n	800066c <__udivmoddi4+0x2b0>
 800063e:	428b      	cmp	r3, r1
 8000640:	d914      	bls.n	800066c <__udivmoddi4+0x2b0>
 8000642:	3e02      	subs	r6, #2
 8000644:	4461      	add	r1, ip
 8000646:	1ac9      	subs	r1, r1, r3
 8000648:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800064c:	e738      	b.n	80004c0 <__udivmoddi4+0x104>
 800064e:	462e      	mov	r6, r5
 8000650:	4628      	mov	r0, r5
 8000652:	e705      	b.n	8000460 <__udivmoddi4+0xa4>
 8000654:	4606      	mov	r6, r0
 8000656:	e6e3      	b.n	8000420 <__udivmoddi4+0x64>
 8000658:	4618      	mov	r0, r3
 800065a:	e6f8      	b.n	800044e <__udivmoddi4+0x92>
 800065c:	454b      	cmp	r3, r9
 800065e:	d2a9      	bcs.n	80005b4 <__udivmoddi4+0x1f8>
 8000660:	ebb9 0802 	subs.w	r8, r9, r2
 8000664:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000668:	3801      	subs	r0, #1
 800066a:	e7a3      	b.n	80005b4 <__udivmoddi4+0x1f8>
 800066c:	4646      	mov	r6, r8
 800066e:	e7ea      	b.n	8000646 <__udivmoddi4+0x28a>
 8000670:	4620      	mov	r0, r4
 8000672:	e794      	b.n	800059e <__udivmoddi4+0x1e2>
 8000674:	4640      	mov	r0, r8
 8000676:	e7d1      	b.n	800061c <__udivmoddi4+0x260>
 8000678:	46d0      	mov	r8, sl
 800067a:	e77b      	b.n	8000574 <__udivmoddi4+0x1b8>
 800067c:	3b02      	subs	r3, #2
 800067e:	4461      	add	r1, ip
 8000680:	e732      	b.n	80004e8 <__udivmoddi4+0x12c>
 8000682:	4630      	mov	r0, r6
 8000684:	e709      	b.n	800049a <__udivmoddi4+0xde>
 8000686:	4464      	add	r4, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e742      	b.n	8000512 <__udivmoddi4+0x156>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <PrivilegiosSVC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void PrivilegiosSVC (void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000696:	f3ef 8314 	mrs	r3, CONTROL
 800069a:	607b      	str	r3, [r7, #4]
  return(result);
 800069c:	687b      	ldr	r3, [r7, #4]
    // bit 1: Mapeo del stack pointer(sp). MSP=0, PSP=1.
    // bit 0: Modo de ejecucion en Thread. Privilegiado=0, No privilegiado=1.
    //        Recordar que este valor solo se usa en modo Thread. Las
    //        interrupciones siempre se ejecutan en modo Handler con total
    //        privilegio.
    uint32_t x = __get_CONTROL ();
 800069e:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x |= 1;
 80006a0:	69fb      	ldr	r3, [r7, #28]
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	61fb      	str	r3, [r7, #28]
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	60bb      	str	r3, [r7, #8]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	f383 8814 	msr	CONTROL, r3
}
 80006b2:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006b4:	f3ef 8314 	mrs	r3, CONTROL
 80006b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80006ba:	68fb      	ldr	r3, [r7, #12]
    // bit 0 a modo No privilegiado.
    __set_CONTROL (x);

    // En este punto se estaria ejecutando en modo No privilegiado.
    // Lectura del registro "control" para confirmar.
    x = __get_CONTROL ();
 80006bc:	61fb      	str	r3, [r7, #28]

    // Actividad de debug: Ver registro "control" y valor de variable "x".
    //__BKPT (0);

    x &= ~1u;
 80006be:	69fb      	ldr	r3, [r7, #28]
 80006c0:	f023 0301 	bic.w	r3, r3, #1
 80006c4:	61fb      	str	r3, [r7, #28]
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	f383 8814 	msr	CONTROL, r3
}
 80006d0:	bf00      	nop
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006d2:	f3ef 8314 	mrs	r3, CONTROL
 80006d6:	617b      	str	r3, [r7, #20]
  return(result);
 80006d8:	697b      	ldr	r3, [r7, #20]
    // Se intenta volver a modo Privilegiado (bit 0, valor 0).
    __set_CONTROL (x);

    // Confirma que esta operacion es ignorada por estar ejecutandose en modo
    // Thread no privilegiado.
    x = __get_CONTROL ();
 80006da:	61fb      	str	r3, [r7, #28]
    // Para esto se invoca por software a la interrupcion SVC (Supervisor Call)
    // utilizando la instruccion "svc".
    // No hay intrinsics para realizar esta tarea. Para utilizar la instruccion
    // es necesario implementar una funcion en assembler. Ver el archivo
    // asm_func.S.
    asm_svc ();
 80006dc:	f7ff fd86 	bl	80001ec <asm_svc>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80006e0:	f3ef 8314 	mrs	r3, CONTROL
 80006e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80006e6:	69bb      	ldr	r3, [r7, #24]

    // El sistema operativo (el handler de SVC) deberia haber devuelto el modo
    // de ejecucion de Thread a privilegiado (bit 0 en valor 0).
    x = __get_CONTROL ();
 80006e8:	61fb      	str	r3, [r7, #28]

    // Fin del ejemplo de SVC
}
 80006ea:	bf00      	nop
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <zeros>:


void zeros(uint32_t *vector, uint32_t longitud) {
 80006f2:	b480      	push	{r7}
 80006f4:	b085      	sub	sp, #20
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
 80006fa:	6039      	str	r1, [r7, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	e008      	b.n	8000714 <zeros+0x22>
        vector[i] = 0;
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fa      	ldr	r2, [r7, #12]
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	d3f2      	bcc.n	8000702 <zeros+0x10>
    }
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <zeros_optimizada>:

//optimizado, dsp aplicar en todos.....:

void zeros_optimizada(uint32_t *vector, uint32_t longitud) {
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
    for (; longitud >0; longitud--) {
 8000734:	e00b      	b.n	800074e <zeros_optimizada+0x24>
        vector[longitud-1] = 0;
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800073c:	3b01      	subs	r3, #1
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	4413      	add	r3, r2
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
    for (; longitud >0; longitud--) {
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	3b01      	subs	r3, #1
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f0      	bne.n	8000736 <zeros_optimizada+0xc>
    }
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <productoEscalar32>:

void productoEscalar32(uint32_t *vectorIn, uint32_t *vectorOut, uint32_t longitud, uint32_t escalar) {
 8000762:	b480      	push	{r7}
 8000764:	b087      	sub	sp, #28
 8000766:	af00      	add	r7, sp, #0
 8000768:	60f8      	str	r0, [r7, #12]
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < longitud; i++) { //en clase no utilizaron la variable auxiliar i,
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	e00f      	b.n	8000796 <productoEscalar32+0x34>
        vectorOut[i] = vectorIn[i] * escalar;
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	68b9      	ldr	r1, [r7, #8]
 8000786:	440b      	add	r3, r1
 8000788:	6839      	ldr	r1, [r7, #0]
 800078a:	fb01 f202 	mul.w	r2, r1, r2
 800078e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) { //en clase no utilizaron la variable auxiliar i,
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	3301      	adds	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
 8000796:	697a      	ldr	r2, [r7, #20]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	429a      	cmp	r2, r3
 800079c:	d3eb      	bcc.n	8000776 <productoEscalar32+0x14>
    }
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	371c      	adds	r7, #28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <productoEscalar16>:

void productoEscalar16(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar) {
 80007ac:	b480      	push	{r7}
 80007ae:	b087      	sub	sp, #28
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	807b      	strh	r3, [r7, #2]
    for (uint32_t i = 0; i < longitud; i++) {
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	e010      	b.n	80007e2 <productoEscalar16+0x36>
        vectorOut[i] = vectorIn[i] * escalar;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	68fa      	ldr	r2, [r7, #12]
 80007c6:	4413      	add	r3, r2
 80007c8:	881a      	ldrh	r2, [r3, #0]
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	68b9      	ldr	r1, [r7, #8]
 80007d0:	440b      	add	r3, r1
 80007d2:	8879      	ldrh	r1, [r7, #2]
 80007d4:	fb11 f202 	smulbb	r2, r1, r2
 80007d8:	b292      	uxth	r2, r2
 80007da:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	3301      	adds	r3, #1
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	697a      	ldr	r2, [r7, #20]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d3ea      	bcc.n	80007c0 <productoEscalar16+0x14>
    }
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	371c      	adds	r7, #28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr

080007f8 <productoEscalar12>:

void productoEscalar12(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud, uint16_t escalar) {
 80007f8:	b480      	push	{r7}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	807b      	strh	r3, [r7, #2]
    for (uint32_t i = 0; i < longitud; i++) {
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
 800080a:	e01f      	b.n	800084c <productoEscalar12+0x54>
        uint32_t resultado = (uint32_t)vectorIn[i] * (uint32_t)escalar;
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	4413      	add	r3, r2
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	887b      	ldrh	r3, [r7, #2]
 800081a:	fb02 f303 	mul.w	r3, r2, r3
 800081e:	613b      	str	r3, [r7, #16]
        if (resultado > 0xFFF) {
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000826:	d307      	bcc.n	8000838 <productoEscalar12+0x40>
            vectorOut[i] = 0xFFF; // Saturación a 12 bits
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	4413      	add	r3, r2
 8000830:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000834:	801a      	strh	r2, [r3, #0]
 8000836:	e006      	b.n	8000846 <productoEscalar12+0x4e>
        } else {
            vectorOut[i] = (uint16_t)resultado;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	4413      	add	r3, r2
 8000840:	693a      	ldr	r2, [r7, #16]
 8000842:	b292      	uxth	r2, r2
 8000844:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	3301      	adds	r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697a      	ldr	r2, [r7, #20]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	429a      	cmp	r2, r3
 8000852:	d3db      	bcc.n	800080c <productoEscalar12+0x14>
        }
    }
}
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	371c      	adds	r7, #28
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <filtroVentana10>:

void filtroVentana10(uint16_t *vectorIn, uint16_t *vectorOut, uint32_t longitud) {
 8000862:	b480      	push	{r7}
 8000864:	b089      	sub	sp, #36	; 0x24
 8000866:	af00      	add	r7, sp, #0
 8000868:	60f8      	str	r0, [r7, #12]
 800086a:	60b9      	str	r1, [r7, #8]
 800086c:	607a      	str	r2, [r7, #4]
    int32_t p;
    const uint8_t SampleOffset = 5;
 800086e:	2305      	movs	r3, #5
 8000870:	75fb      	strb	r3, [r7, #23]
    const uint8_t WindowSize = (SampleOffset * 2) + 1;
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	b2db      	uxtb	r3, r3
 8000878:	3301      	adds	r3, #1
 800087a:	75bb      	strb	r3, [r7, #22]

    for (int32_t i = longitud - 1; i >= 0; i--) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	61fb      	str	r3, [r7, #28]
 8000882:	e03f      	b.n	8000904 <filtroVentana10+0xa2>
        p = i;
 8000884:	69fb      	ldr	r3, [r7, #28]
 8000886:	613b      	str	r3, [r7, #16]
        vectorOut[p] = 0;
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	4413      	add	r3, r2
 8000890:	2200      	movs	r2, #0
 8000892:	801a      	strh	r2, [r3, #0]

        for (int32_t j = p + SampleOffset; j >= p - SampleOffset; j--) {
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	4413      	add	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
 800089c:	e01a      	b.n	80008d4 <filtroVentana10+0x72>
            if (j < longitud && j >= 0) {
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d913      	bls.n	80008ce <filtroVentana10+0x6c>
 80008a6:	69bb      	ldr	r3, [r7, #24]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db10      	blt.n	80008ce <filtroVentana10+0x6c>
                vectorOut[p] += vectorIn[j];
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	68ba      	ldr	r2, [r7, #8]
 80008b2:	4413      	add	r3, r2
 80008b4:	8819      	ldrh	r1, [r3, #0]
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	881a      	ldrh	r2, [r3, #0]
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	68b8      	ldr	r0, [r7, #8]
 80008c6:	4403      	add	r3, r0
 80008c8:	440a      	add	r2, r1
 80008ca:	b292      	uxth	r2, r2
 80008cc:	801a      	strh	r2, [r3, #0]
        for (int32_t j = p + SampleOffset; j >= p - SampleOffset; j--) {
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	3b01      	subs	r3, #1
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	7dfb      	ldrb	r3, [r7, #23]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	69ba      	ldr	r2, [r7, #24]
 80008dc:	429a      	cmp	r2, r3
 80008de:	dade      	bge.n	800089e <filtroVentana10+0x3c>
            }
        }

        vectorOut[p] /= WindowSize;
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	4413      	add	r3, r2
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	461a      	mov	r2, r3
 80008ec:	7dbb      	ldrb	r3, [r7, #22]
 80008ee:	fb92 f1f3 	sdiv	r1, r2, r3
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	4413      	add	r3, r2
 80008fa:	b28a      	uxth	r2, r1
 80008fc:	801a      	strh	r2, [r3, #0]
    for (int32_t i = longitud - 1; i >= 0; i--) {
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3b01      	subs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	2b00      	cmp	r3, #0
 8000908:	dabc      	bge.n	8000884 <filtroVentana10+0x22>
    }
}
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	3724      	adds	r7, #36	; 0x24
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <pack32to16>:

void pack32to16(int32_t *vectorIn, int16_t *vectorOut, uint32_t longitud) {
 8000918:	b480      	push	{r7}
 800091a:	b087      	sub	sp, #28
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < longitud; i++) {
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	e00e      	b.n	8000948 <pack32to16+0x30>
        vectorOut[i] = (int16_t)(vectorIn[i] >> 16);
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	4413      	add	r3, r2
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	1419      	asrs	r1, r3, #16
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	68ba      	ldr	r2, [r7, #8]
 800093c:	4413      	add	r3, r2
 800093e:	b20a      	sxth	r2, r1
 8000940:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < longitud; i++) {
 8000942:	697b      	ldr	r3, [r7, #20]
 8000944:	3301      	adds	r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697a      	ldr	r2, [r7, #20]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	429a      	cmp	r2, r3
 800094e:	d3ec      	bcc.n	800092a <pack32to16+0x12>
    }
}
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	371c      	adds	r7, #28
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <max>:

int32_t max(int32_t *vectorIn, uint32_t longitud) {
 800095e:	b480      	push	{r7}
 8000960:	b087      	sub	sp, #28
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
 8000966:	6039      	str	r1, [r7, #0]
    int32_t maxValor = vectorIn[0];
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	617b      	str	r3, [r7, #20]
    uint32_t maxPosicion = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	613b      	str	r3, [r7, #16]

    for (uint32_t i = 1; i < longitud; i++) {
 8000972:	2301      	movs	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	e012      	b.n	800099e <max+0x40>
        if (vectorIn[i] > maxValor) {
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	4413      	add	r3, r2
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	429a      	cmp	r2, r3
 8000986:	da07      	bge.n	8000998 <max+0x3a>
            maxValor = vectorIn[i];
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4413      	add	r3, r2
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	617b      	str	r3, [r7, #20]
            maxPosicion = i;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 1; i < longitud; i++) {
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3301      	adds	r3, #1
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d3e8      	bcc.n	8000978 <max+0x1a>
        }
    }

    return maxPosicion;
 80009a6:	693b      	ldr	r3, [r7, #16]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	371c      	adds	r7, #28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <downsampleM>:

void downsampleM(int32_t *vectorIn, int32_t *vectorOut, uint32_t longitud, uint32_t N) {
 80009b4:	b480      	push	{r7}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	607a      	str	r2, [r7, #4]
 80009c0:	603b      	str	r3, [r7, #0]
    uint32_t i;
    uint32_t j = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]

    for (i = 0; i < longitud; i += N) {
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	e010      	b.n	80009ee <downsampleM+0x3a>
        vectorOut[j] = vectorIn[i];
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	441a      	add	r2, r3
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	68b9      	ldr	r1, [r7, #8]
 80009da:	440b      	add	r3, r1
 80009dc:	6812      	ldr	r2, [r2, #0]
 80009de:	601a      	str	r2, [r3, #0]
        j++;
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	3301      	adds	r3, #1
 80009e4:	613b      	str	r3, [r7, #16]
    for (i = 0; i < longitud; i += N) {
 80009e6:	697a      	ldr	r2, [r7, #20]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	697a      	ldr	r2, [r7, #20]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d3ea      	bcc.n	80009cc <downsampleM+0x18>
    }
}
 80009f6:	bf00      	nop
 80009f8:	bf00      	nop
 80009fa:	371c      	adds	r7, #28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <invertir>:
void invertir(uint16_t *vector, uint32_t longitud) {
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
    uint32_t i;
    uint16_t temp;

    for (i = 0; i < longitud / 2; i++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e022      	b.n	8000a5a <invertir+0x56>
        temp = vector[i];
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	817b      	strh	r3, [r7, #10]
        vector[i] = vector[longitud - i - 1];
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	1ad3      	subs	r3, r2, r3
 8000a26:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	441a      	add	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	440b      	add	r3, r1
 8000a3a:	8812      	ldrh	r2, [r2, #0]
 8000a3c:	801a      	strh	r2, [r3, #0]
        vector[longitud - i - 1] = temp;
 8000a3e:	683a      	ldr	r2, [r7, #0]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	1ad3      	subs	r3, r2, r3
 8000a44:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000a48:	3b01      	subs	r3, #1
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	4413      	add	r3, r2
 8000a50:	897a      	ldrh	r2, [r7, #10]
 8000a52:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < longitud / 2; i++) {
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	3301      	adds	r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	085b      	lsrs	r3, r3, #1
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d3d7      	bcc.n	8000a14 <invertir+0x10>
    }
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <introducirEco>:

void introducirEco(int16_t *vector, int16_t *vectorOut) {
 8000a72:	b480      	push	{r7}
 8000a74:	b089      	sub	sp, #36	; 0x24
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
    uint32_t retrasoMuestras = 882; // 20ms de retraso = 882 muetras
 8000a7c:	f240 3372 	movw	r3, #882	; 0x372
 8000a80:	617b      	str	r3, [r7, #20]
    uint32_t longitud = 4096;
 8000a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a86:	613b      	str	r3, [r7, #16]
    int16_t mitadAmplitud = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	81fb      	strh	r3, [r7, #14]

    //SIN ECO
    for (uint32_t i = 0; i < retrasoMuestras; i++) {
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	e00d      	b.n	8000aae <introducirEco+0x3c>
        vectorOut[i] = vector[i];
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	687a      	ldr	r2, [r7, #4]
 8000a98:	441a      	add	r2, r3
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	6839      	ldr	r1, [r7, #0]
 8000aa0:	440b      	add	r3, r1
 8000aa2:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000aa6:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < retrasoMuestras; i++) {
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	61fb      	str	r3, [r7, #28]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d3ed      	bcc.n	8000a92 <introducirEco+0x20>
    }

    //ECO
    for (uint32_t i = retrasoMuestras; i < longitud; i++) {
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	61bb      	str	r3, [r7, #24]
 8000aba:	e027      	b.n	8000b0c <introducirEco+0x9a>
        mitadAmplitud = vector[i - retrasoMuestras] / 2; //retraso
 8000abc:	69ba      	ldr	r2, [r7, #24]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000acc:	0fda      	lsrs	r2, r3, #31
 8000ace:	4413      	add	r3, r2
 8000ad0:	105b      	asrs	r3, r3, #1
 8000ad2:	81fb      	strh	r3, [r7, #14]
        vectorOut[i] += vector[i] + mitadAmplitud;
 8000ad4:	69bb      	ldr	r3, [r7, #24]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	6879      	ldr	r1, [r7, #4]
 8000ae8:	440b      	add	r3, r1
 8000aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aee:	b299      	uxth	r1, r3
 8000af0:	89fb      	ldrh	r3, [r7, #14]
 8000af2:	440b      	add	r3, r1
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4413      	add	r3, r2
 8000af8:	b299      	uxth	r1, r3
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	4413      	add	r3, r2
 8000b02:	b20a      	sxth	r2, r1
 8000b04:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = retrasoMuestras; i < longitud; i++) {
 8000b06:	69bb      	ldr	r3, [r7, #24]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	61bb      	str	r3, [r7, #24]
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d3d3      	bcc.n	8000abc <introducirEco+0x4a>
    }

}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3724      	adds	r7, #36	; 0x24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr

08000b22 <introducirEco_Intrinsic>:
void introducirEco_Intrinsic(int16_t *vector, int16_t *vectorOut) {
 8000b22:	b480      	push	{r7}
 8000b24:	b08f      	sub	sp, #60	; 0x3c
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
 8000b2a:	6039      	str	r1, [r7, #0]
    uint32_t retrasoMuestras = 882; // 20ms de retraso = 882 muetras
 8000b2c:	f240 3372 	movw	r3, #882	; 0x372
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t longitud = 4096;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
    int16_t mitadAmplitud = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	84fb      	strh	r3, [r7, #38]	; 0x26

    //SIN ECO
    for (uint32_t i = 0; i < retrasoMuestras; i++) {
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	637b      	str	r3, [r7, #52]	; 0x34
 8000b40:	e00d      	b.n	8000b5e <introducirEco_Intrinsic+0x3c>
        vectorOut[i] = vector[i];
 8000b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	441a      	add	r2, r3
 8000b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	6839      	ldr	r1, [r7, #0]
 8000b50:	440b      	add	r3, r1
 8000b52:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b56:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < retrasoMuestras; i++) {
 8000b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8000b5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d3ed      	bcc.n	8000b42 <introducirEco_Intrinsic+0x20>
    }

    //ECO
    for (uint32_t i = retrasoMuestras; i < longitud; i++) {
 8000b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
 8000b6a:	e034      	b.n	8000bd6 <introducirEco_Intrinsic+0xb4>
        mitadAmplitud = vector[i - retrasoMuestras] / 2; //retraso
 8000b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	4413      	add	r3, r2
 8000b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b7c:	0fda      	lsrs	r2, r3, #31
 8000b7e:	4413      	add	r3, r2
 8000b80:	105b      	asrs	r3, r3, #1
 8000b82:	84fb      	strh	r3, [r7, #38]	; 0x26
        vectorOut[i] = __QADD16(vectorOut[i], __QADD16(vector[i], mitadAmplitud));
 8000b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	683a      	ldr	r2, [r7, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b90:	4619      	mov	r1, r3
 8000b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000ba4:	617a      	str	r2, [r7, #20]
 8000ba6:	613b      	str	r3, [r7, #16]

__STATIC_FORCEINLINE uint32_t __QADD16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	fa93 f312 	qadd16	r3, r3, r2
 8000bb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	6239      	str	r1, [r7, #32]
 8000bb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	fa93 f312 	qadd16	r3, r3, r2
 8000bc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8000bc2:	69b9      	ldr	r1, [r7, #24]
 8000bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	4413      	add	r3, r2
 8000bcc:	b20a      	sxth	r2, r1
 8000bce:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = retrasoMuestras; i < longitud; i++) {
 8000bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8000bd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d3c6      	bcc.n	8000b6c <introducirEco_Intrinsic+0x4a>
    }

}
 8000bde:	bf00      	nop
 8000be0:	bf00      	nop
 8000be2:	373c      	adds	r7, #60	; 0x3c
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bec:	b5b0      	push	{r4, r5, r7, lr}
 8000bee:	f5ad 4d83 	sub.w	sp, sp, #16768	; 0x4180
 8000bf2:	b092      	sub	sp, #72	; 0x48
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf6:	f001 f8cf 	bl	8001d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfa:	f000 fcff 	bl	80015fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bfe:	f000 fe0d 	bl	800181c <MX_GPIO_Init>
  MX_ETH_Init();
 8000c02:	f000 fd65 	bl	80016d0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000c06:	f000 fdb1 	bl	800176c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c0a:	f000 fdd9 	bl	80017c0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  PrivilegiosSVC ();
 8000c0e:	f7ff fd3f 	bl	8000690 <PrivilegiosSVC>
  DWT->CTRL |= 1 << DWT_CTRL_CYCCNTENA_Pos; //activar el contador
 8000c12:	4bcb      	ldr	r3, [pc, #812]	; (8000f40 <main+0x354>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4aca      	ldr	r2, [pc, #808]	; (8000f40 <main+0x354>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 1 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */

  uint32_t resultado[10] = {10,20,10,40,50,60,20,10,20,40};
 8000c1e:	4bc9      	ldr	r3, [pc, #804]	; (8000f44 <main+0x358>)
 8000c20:	f507 4482 	add.w	r4, r7, #16640	; 0x4100
 8000c24:	f104 045c 	add.w	r4, r4, #92	; 0x5c
 8000c28:	461d      	mov	r5, r3
 8000c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c32:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c36:	e884 0003 	stmia.w	r4, {r0, r1}
  DWT->CYCCNT = 0;  asm_zeros(resultado, 10);  ciclosASM = DWT->CYCCNT;
 8000c3a:	4bc1      	ldr	r3, [pc, #772]	; (8000f40 <main+0x354>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000c44:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8000c48:	210a      	movs	r1, #10
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fad2 	bl	80001f4 <asm_zeros>
 8000c50:	4bbb      	ldr	r3, [pc, #748]	; (8000f40 <main+0x354>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000c58:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8000c5c:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  zeros(resultado, 10);  ciclosC = DWT->CYCCNT;
 8000c5e:	4bb8      	ldr	r3, [pc, #736]	; (8000f40 <main+0x354>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000c68:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8000c6c:	210a      	movs	r1, #10
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fd3f 	bl	80006f2 <zeros>
 8000c74:	4bb2      	ldr	r3, [pc, #712]	; (8000f40 <main+0x354>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000c7c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8000c80:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  zeros_optimizada(resultado, 10);  ciclosC2 = DWT->CYCCNT;
 8000c82:	4baf      	ldr	r3, [pc, #700]	; (8000f40 <main+0x354>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000c8c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8000c90:	210a      	movs	r1, #10
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fd49 	bl	800072a <zeros_optimizada>
 8000c98:	4ba9      	ldr	r3, [pc, #676]	; (8000f40 <main+0x354>)
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000ca0:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 8000ca4:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 2 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */

  uint32_t vectorIN_ej2[10] = {10,20,10,40,50,60,70,80,90,100};
 8000ca6:	4ba8      	ldr	r3, [pc, #672]	; (8000f48 <main+0x35c>)
 8000ca8:	f507 4482 	add.w	r4, r7, #16640	; 0x4100
 8000cac:	f104 0434 	add.w	r4, r4, #52	; 0x34
 8000cb0:	461d      	mov	r5, r3
 8000cb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cba:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000cbe:	e884 0003 	stmia.w	r4, {r0, r1}
  uint32_t vectorOUT_ej2[10] = {0,0,0,0,0,0,0,0,0,0};
 8000cc2:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000cc6:	f103 030c 	add.w	r3, r3, #12
 8000cca:	2228      	movs	r2, #40	; 0x28
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fa68 	bl	80041a4 <memset>
  uint32_t longitud_ej2 = 10, escalar_ej2 = 2;
 8000cd4:	230a      	movs	r3, #10
 8000cd6:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000cda:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000ce6:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8000cea:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_productoEscalar32(vectorIN_ej2,vectorOUT_ej2,longitud_ej2,escalar_ej2);  ciclosASM = DWT->CYCCNT;
 8000cec:	4b94      	ldr	r3, [pc, #592]	; (8000f40 <main+0x354>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000cf6:	f101 010c 	add.w	r1, r1, #12
 8000cfa:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000cfe:	f100 0034 	add.w	r0, r0, #52	; 0x34
 8000d02:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000d06:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000d10:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000d14:	6812      	ldr	r2, [r2, #0]
 8000d16:	f7ff fa76 	bl	8000206 <asm_productoEscalar32>
 8000d1a:	4b89      	ldr	r3, [pc, #548]	; (8000f40 <main+0x354>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000d22:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8000d26:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  productoEscalar32(vectorIN_ej2,vectorOUT_ej2,longitud_ej2,escalar_ej2);  ciclosC = DWT->CYCCNT;
 8000d28:	4b85      	ldr	r3, [pc, #532]	; (8000f40 <main+0x354>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	f507 4182 	add.w	r1, r7, #16640	; 0x4100
 8000d32:	f101 010c 	add.w	r1, r1, #12
 8000d36:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000d3a:	f100 0034 	add.w	r0, r0, #52	; 0x34
 8000d3e:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000d42:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000d4c:	f102 0238 	add.w	r2, r2, #56	; 0x38
 8000d50:	6812      	ldr	r2, [r2, #0]
 8000d52:	f7ff fd06 	bl	8000762 <productoEscalar32>
 8000d56:	4b7a      	ldr	r3, [pc, #488]	; (8000f40 <main+0x354>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000d5e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8000d62:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 3 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */

  uint16_t vectorIN_ej3[5] = {10,20,10,40,50};
 8000d64:	4a79      	ldr	r2, [pc, #484]	; (8000f4c <main+0x360>)
 8000d66:	f507 4382 	add.w	r3, r7, #16640	; 0x4100
 8000d6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d6c:	c303      	stmia	r3!, {r0, r1}
 8000d6e:	801a      	strh	r2, [r3, #0]
  uint16_t vectorOUT_ej3[5] = {0,0,0,0,0};
 8000d70:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000d74:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	811a      	strh	r2, [r3, #8]
  uint32_t longitud_ej3 = 5;
 8000d80:	2305      	movs	r3, #5
 8000d82:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000d86:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000d8a:	6013      	str	r3, [r2, #0]
  uint16_t escalar_ej3 = 2;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000d92:	f102 022e 	add.w	r2, r2, #46	; 0x2e
 8000d96:	8013      	strh	r3, [r2, #0]
  DWT->CYCCNT = 0;  asm_productoEscalar16(vectorIN_ej3,vectorOUT_ej3,longitud_ej3,escalar_ej3);  ciclosASM = DWT->CYCCNT;
 8000d98:	4b69      	ldr	r3, [pc, #420]	; (8000f40 <main+0x354>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000da2:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8000dac:	f101 0174 	add.w	r1, r1, #116	; 0x74
 8000db0:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000db4:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000db8:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	f7ff fa2d 	bl	800021c <asm_productoEscalar16>
 8000dc2:	4b5f      	ldr	r3, [pc, #380]	; (8000f40 <main+0x354>)
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000dca:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8000dce:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  productoEscalar16(vectorIN_ej3,vectorOUT_ej3,longitud_ej3,escalar_ej3);  ciclosC = DWT->CYCCNT;
 8000dd0:	4b5b      	ldr	r3, [pc, #364]	; (8000f40 <main+0x354>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000dda:	f103 032e 	add.w	r3, r3, #46	; 0x2e
 8000dde:	881b      	ldrh	r3, [r3, #0]
 8000de0:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8000de4:	f101 0174 	add.w	r1, r1, #116	; 0x74
 8000de8:	f507 4082 	add.w	r0, r7, #16640	; 0x4100
 8000dec:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000df0:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000df4:	6812      	ldr	r2, [r2, #0]
 8000df6:	f7ff fcd9 	bl	80007ac <productoEscalar16>
 8000dfa:	4b51      	ldr	r3, [pc, #324]	; (8000f40 <main+0x354>)
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000e02:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8000e06:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 4 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */

  uint16_t vectorIN_ej4[5] = {10000,10000,10000,10000,10000};
 8000e08:	4a51      	ldr	r2, [pc, #324]	; (8000f50 <main+0x364>)
 8000e0a:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000e0e:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8000e12:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e14:	c303      	stmia	r3!, {r0, r1}
 8000e16:	801a      	strh	r2, [r3, #0]
  uint16_t vectorOUT_ej4[5] = {0};
 8000e18:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000e1c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	811a      	strh	r2, [r3, #8]
  uint32_t longitud_ej4 = 5;
 8000e28:	2305      	movs	r3, #5
 8000e2a:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000e2e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000e32:	6013      	str	r3, [r2, #0]
  uint16_t escalar_ej4 = 6;
 8000e34:	2306      	movs	r3, #6
 8000e36:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000e3a:	f102 0226 	add.w	r2, r2, #38	; 0x26
 8000e3e:	8013      	strh	r3, [r2, #0]

  DWT->CYCCNT = 0;  asm_productoEscalar12(vectorIN_ej4,vectorOUT_ej4,longitud_ej4,escalar_ej4);  ciclosASM = DWT->CYCCNT;
 8000e40:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <main+0x354>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000e4a:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8000e54:	f101 015c 	add.w	r1, r1, #92	; 0x5c
 8000e58:	f507 4081 	add.w	r0, r7, #16512	; 0x4080
 8000e5c:	f100 0068 	add.w	r0, r0, #104	; 0x68
 8000e60:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000e64:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000e68:	6812      	ldr	r2, [r2, #0]
 8000e6a:	f7ff f9e2 	bl	8000232 <asm_productoEscalar12>
 8000e6e:	4b34      	ldr	r3, [pc, #208]	; (8000f40 <main+0x354>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000e76:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8000e7a:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  productoEscalar12(vectorIN_ej4,vectorOUT_ej4,longitud_ej4,escalar_ej4);  ciclosC = DWT->CYCCNT;
 8000e7c:	4b30      	ldr	r3, [pc, #192]	; (8000f40 <main+0x354>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000e86:	f103 0326 	add.w	r3, r3, #38	; 0x26
 8000e8a:	881b      	ldrh	r3, [r3, #0]
 8000e8c:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8000e90:	f101 015c 	add.w	r1, r1, #92	; 0x5c
 8000e94:	f507 4081 	add.w	r0, r7, #16512	; 0x4080
 8000e98:	f100 0068 	add.w	r0, r0, #104	; 0x68
 8000e9c:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000ea0:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	f7ff fca7 	bl	80007f8 <productoEscalar12>
 8000eaa:	4b25      	ldr	r3, [pc, #148]	; (8000f40 <main+0x354>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000eb2:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8000eb6:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 5 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */

  uint16_t vectorIN_ej5[10] = {1,2,3,4,5,6,7,8,9};
 8000eb8:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000ebc:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000ec0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	6053      	str	r3, [r2, #4]
 8000ecc:	6093      	str	r3, [r2, #8]
 8000ece:	60d3      	str	r3, [r2, #12]
 8000ed0:	6113      	str	r3, [r2, #16]
 8000ed2:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000ed6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000eda:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000ede:	2201      	movs	r2, #1
 8000ee0:	801a      	strh	r2, [r3, #0]
 8000ee2:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000ee6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000eea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000eee:	2202      	movs	r2, #2
 8000ef0:	805a      	strh	r2, [r3, #2]
 8000ef2:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000ef6:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000efa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000efe:	2203      	movs	r2, #3
 8000f00:	809a      	strh	r2, [r3, #4]
 8000f02:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000f06:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000f0a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f0e:	2204      	movs	r2, #4
 8000f10:	80da      	strh	r2, [r3, #6]
 8000f12:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000f16:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000f1a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f1e:	2205      	movs	r2, #5
 8000f20:	811a      	strh	r2, [r3, #8]
 8000f22:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000f26:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000f2a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f2e:	2206      	movs	r2, #6
 8000f30:	815a      	strh	r2, [r3, #10]
 8000f32:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000f36:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000f3a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f3e:	e009      	b.n	8000f54 <main+0x368>
 8000f40:	e0001000 	.word	0xe0001000
 8000f44:	080041cc 	.word	0x080041cc
 8000f48:	080041f4 	.word	0x080041f4
 8000f4c:	0800421c 	.word	0x0800421c
 8000f50:	08004228 	.word	0x08004228
 8000f54:	2207      	movs	r2, #7
 8000f56:	819a      	strh	r2, [r3, #12]
 8000f58:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000f5c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000f60:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f64:	2208      	movs	r2, #8
 8000f66:	81da      	strh	r2, [r3, #14]
 8000f68:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000f6c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000f70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f74:	2209      	movs	r2, #9
 8000f76:	821a      	strh	r2, [r3, #16]
  uint16_t vectorOUT_ej5[10] = {0};
 8000f78:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8000f7c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000f80:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000f84:	461a      	mov	r2, r3
 8000f86:	2300      	movs	r3, #0
 8000f88:	6013      	str	r3, [r2, #0]
 8000f8a:	6053      	str	r3, [r2, #4]
 8000f8c:	6093      	str	r3, [r2, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
 8000f90:	6113      	str	r3, [r2, #16]
  uint32_t longitud_ej5 = 10;
 8000f92:	230a      	movs	r3, #10
 8000f94:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000f98:	f102 0220 	add.w	r2, r2, #32
 8000f9c:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;  asm_filtroVentana10(vectorIN_ej5,vectorOUT_ej5,longitud_ej5);  ciclosASM = DWT->CYCCNT;
 8000f9e:	4bcd      	ldr	r3, [pc, #820]	; (80012d4 <main+0x6e8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8000fa8:	f101 0134 	add.w	r1, r1, #52	; 0x34
 8000fac:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000fb0:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000fb4:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000fb8:	f102 0220 	add.w	r2, r2, #32
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff f944 	bl	800024c <asm_filtroVentana10>
 8000fc4:	4bc3      	ldr	r3, [pc, #780]	; (80012d4 <main+0x6e8>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000fcc:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8000fd0:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  filtroVentana10(vectorIN_ej5,vectorOUT_ej5,longitud_ej5);  ciclosC = DWT->CYCCNT;
 8000fd2:	4bc0      	ldr	r3, [pc, #768]	; (80012d4 <main+0x6e8>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8000fdc:	f101 0134 	add.w	r1, r1, #52	; 0x34
 8000fe0:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8000fe4:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8000fe8:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8000fec:	f102 0220 	add.w	r2, r2, #32
 8000ff0:	6812      	ldr	r2, [r2, #0]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fc35 	bl	8000862 <filtroVentana10>
 8000ff8:	4bb6      	ldr	r3, [pc, #728]	; (80012d4 <main+0x6e8>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001000:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8001004:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 6 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */

  uint32_t vectorIN_ej6[5] = {0xFFFF,0xFEFF,0xEAFF,0xE9FF,0x01FF};
 8001006:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 800100a:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800100e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001012:	4ab1      	ldr	r2, [pc, #708]	; (80012d8 <main+0x6ec>)
 8001014:	461c      	mov	r4, r3
 8001016:	4615      	mov	r5, r2
 8001018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	6023      	str	r3, [r4, #0]
  uint32_t vectorOUT_ej6[5] = {0,0,0,0,0};
 8001020:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8001024:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001028:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800102c:	461a      	mov	r2, r3
 800102e:	2300      	movs	r3, #0
 8001030:	6013      	str	r3, [r2, #0]
 8001032:	6053      	str	r3, [r2, #4]
 8001034:	6093      	str	r3, [r2, #8]
 8001036:	60d3      	str	r3, [r2, #12]
 8001038:	6113      	str	r3, [r2, #16]
  uint32_t longitud_ej6 = 5;
 800103a:	2305      	movs	r3, #5
 800103c:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001040:	f102 021c 	add.w	r2, r2, #28
 8001044:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;  asm_pack32to16(vectorIN_ej6,vectorOUT_ej6,longitud_ej6);  ciclosASM = DWT->CYCCNT;
 8001046:	4ba3      	ldr	r3, [pc, #652]	; (80012d4 <main+0x6e8>)
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8001050:	f101 010c 	add.w	r1, r1, #12
 8001054:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 8001058:	f103 0320 	add.w	r3, r3, #32
 800105c:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001060:	f102 021c 	add.w	r2, r2, #28
 8001064:	6812      	ldr	r2, [r2, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f917 	bl	800029a <asm_pack32to16>
 800106c:	4b99      	ldr	r3, [pc, #612]	; (80012d4 <main+0x6e8>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001074:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001078:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  pack32to16(vectorIN_ej6,vectorOUT_ej6,longitud_ej6);  ciclosC = DWT->CYCCNT;
 800107a:	4b96      	ldr	r3, [pc, #600]	; (80012d4 <main+0x6e8>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	f507 4181 	add.w	r1, r7, #16512	; 0x4080
 8001084:	f101 010c 	add.w	r1, r1, #12
 8001088:	f507 4381 	add.w	r3, r7, #16512	; 0x4080
 800108c:	f103 0320 	add.w	r3, r3, #32
 8001090:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001094:	f102 021c 	add.w	r2, r2, #28
 8001098:	6812      	ldr	r2, [r2, #0]
 800109a:	4618      	mov	r0, r3
 800109c:	f7ff fc3c 	bl	8000918 <pack32to16>
 80010a0:	4b8c      	ldr	r3, [pc, #560]	; (80012d4 <main+0x6e8>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80010a8:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80010ac:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 7 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */

  uint32_t vectorIN_ej7[10] = {1,2,3,5,4,8,2,3,5,0};
 80010ae:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 80010b2:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80010b6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80010ba:	4a88      	ldr	r2, [pc, #544]	; (80012dc <main+0x6f0>)
 80010bc:	461c      	mov	r4, r3
 80010be:	4615      	mov	r5, r2
 80010c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010cc:	e884 0003 	stmia.w	r4, {r0, r1}
  uint32_t longitud_ej7 = 10;
 80010d0:	230a      	movs	r3, #10
 80010d2:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80010d6:	f102 0218 	add.w	r2, r2, #24
 80010da:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;  uint32_t pos = asm_max32(vectorIN_ej7,longitud_ej7);  ciclosASM = DWT->CYCCNT;
 80010dc:	4b7d      	ldr	r3, [pc, #500]	; (80012d4 <main+0x6e8>)
 80010de:	2200      	movs	r2, #0
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80010e6:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80010ea:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80010ee:	f102 0218 	add.w	r2, r2, #24
 80010f2:	6811      	ldr	r1, [r2, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f8dd 	bl	80002b4 <asm_max32>
 80010fa:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 80010fe:	f103 0314 	add.w	r3, r3, #20
 8001102:	6018      	str	r0, [r3, #0]
 8001104:	4b73      	ldr	r3, [pc, #460]	; (80012d4 <main+0x6e8>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 800110c:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001110:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  uint32_t pos2 = max(vectorIN_ej7,longitud_ej7);  ciclosC = DWT->CYCCNT;
 8001112:	4b70      	ldr	r3, [pc, #448]	; (80012d4 <main+0x6e8>)
 8001114:	2200      	movs	r2, #0
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800111c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8001120:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001124:	f102 0218 	add.w	r2, r2, #24
 8001128:	6811      	ldr	r1, [r2, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fc17 	bl	800095e <max>
 8001130:	4603      	mov	r3, r0
 8001132:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001136:	f102 0210 	add.w	r2, r2, #16
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	4b65      	ldr	r3, [pc, #404]	; (80012d4 <main+0x6e8>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001144:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8001148:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 8 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */

  uint32_t vectorIN_ej8[10] = {1,2,3,4,5,6,7,8,9,10};
 800114a:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 800114e:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001152:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001156:	4a62      	ldr	r2, [pc, #392]	; (80012e0 <main+0x6f4>)
 8001158:	461c      	mov	r4, r3
 800115a:	4615      	mov	r5, r2
 800115c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001160:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001164:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001168:	e884 0003 	stmia.w	r4, {r0, r1}
  uint32_t vectorOUT_ej8[10] = {0,0,0,0,0,0,0,0,0,0};
 800116c:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8001170:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001174:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001178:	4618      	mov	r0, r3
 800117a:	2328      	movs	r3, #40	; 0x28
 800117c:	461a      	mov	r2, r3
 800117e:	2100      	movs	r1, #0
 8001180:	f003 f810 	bl	80041a4 <memset>
  uint32_t longitud_ej8 = 10;
 8001184:	230a      	movs	r3, #10
 8001186:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 800118a:	f102 020c 	add.w	r2, r2, #12
 800118e:	6013      	str	r3, [r2, #0]
  uint32_t N = 2;
 8001190:	2302      	movs	r3, #2
 8001192:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001196:	f102 0208 	add.w	r2, r2, #8
 800119a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;  asm_downsampleM(vectorIN_ej8,vectorOUT_ej8,longitud_ej8,N);  ciclosASM = DWT->CYCCNT;
 800119c:	4b4d      	ldr	r3, [pc, #308]	; (80012d4 <main+0x6e8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 80011a6:	f101 0114 	add.w	r1, r1, #20
 80011aa:	f507 4080 	add.w	r0, r7, #16384	; 0x4000
 80011ae:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 80011b2:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 80011b6:	f103 0308 	add.w	r3, r3, #8
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80011c0:	f102 020c 	add.w	r2, r2, #12
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	f7ff f88a 	bl	80002de <asm_downsampleM>
 80011ca:	4b42      	ldr	r3, [pc, #264]	; (80012d4 <main+0x6e8>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80011d2:	f102 0244 	add.w	r2, r2, #68	; 0x44
 80011d6:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  downsampleM(vectorIN_ej8,vectorOUT_ej8,longitud_ej8,N);  ciclosC = DWT->CYCCNT;
 80011d8:	4b3e      	ldr	r3, [pc, #248]	; (80012d4 <main+0x6e8>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 80011e2:	f101 0114 	add.w	r1, r1, #20
 80011e6:	f507 4080 	add.w	r0, r7, #16384	; 0x4000
 80011ea:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 80011ee:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 80011f2:	f103 0308 	add.w	r3, r3, #8
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80011fc:	f102 020c 	add.w	r2, r2, #12
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	f7ff fbd7 	bl	80009b4 <downsampleM>
 8001206:	4b33      	ldr	r3, [pc, #204]	; (80012d4 <main+0x6e8>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 800120e:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8001212:	6013      	str	r3, [r2, #0]
  /*
   * 	EJERCICIO 9 PRUEBA DE FUNCIONES EN C y ASM
   *
   * */

  uint16_t vectorIN_ej9[10] = {1,2,3,4,5,6,7,8,9,10};
 8001214:	f507 4383 	add.w	r3, r7, #16768	; 0x4180
 8001218:	f103 0348 	add.w	r3, r3, #72	; 0x48
 800121c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001220:	4a30      	ldr	r2, [pc, #192]	; (80012e4 <main+0x6f8>)
 8001222:	461c      	mov	r4, r3
 8001224:	4615      	mov	r5, r2
 8001226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122a:	682b      	ldr	r3, [r5, #0]
 800122c:	6023      	str	r3, [r4, #0]
  uint32_t longitud_ej9 = 10;
 800122e:	230a      	movs	r3, #10
 8001230:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001234:	f102 0204 	add.w	r2, r2, #4
 8001238:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;  asm_invertir(vectorIN_ej9,longitud_ej9);  ciclosASM = DWT->CYCCNT;
 800123a:	4b26      	ldr	r3, [pc, #152]	; (80012d4 <main+0x6e8>)
 800123c:	2200      	movs	r2, #0
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8001244:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001248:	f102 0204 	add.w	r2, r2, #4
 800124c:	6811      	ldr	r1, [r2, #0]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff f855 	bl	80002fe <asm_invertir>
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <main+0x6e8>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 800125c:	f102 0244 	add.w	r2, r2, #68	; 0x44
 8001260:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;  invertir(vectorIN_ej9,longitud_ej9);  ciclosC = DWT->CYCCNT;
 8001262:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <main+0x6e8>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800126c:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001270:	f102 0204 	add.w	r2, r2, #4
 8001274:	6811      	ldr	r1, [r2, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fbc4 	bl	8000a04 <invertir>
 800127c:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <main+0x6e8>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 8001284:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8001288:	6013      	str	r3, [r2, #0]



 //prueba de eco, no hago una funcion asm con SIMD porque no encuentro donde aplicarlo eficientemente

  muestras[0] = 10;  muestras[1] = 15;  muestras[2] = 20;  muestras[3] = 25;
 800128a:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800128e:	f103 0308 	add.w	r3, r3, #8
 8001292:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001296:	220a      	movs	r2, #10
 8001298:	801a      	strh	r2, [r3, #0]
 800129a:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800129e:	f103 0308 	add.w	r3, r3, #8
 80012a2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80012a6:	220f      	movs	r2, #15
 80012a8:	805a      	strh	r2, [r3, #2]
 80012aa:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80012ae:	f103 0308 	add.w	r3, r3, #8
 80012b2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80012b6:	2214      	movs	r2, #20
 80012b8:	809a      	strh	r2, [r3, #4]
 80012ba:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80012be:	f103 0308 	add.w	r3, r3, #8
 80012c2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80012c6:	2219      	movs	r2, #25
 80012c8:	80da      	strh	r2, [r3, #6]
  muestras[882] = 10;  muestras[883] = 20;  muestras[884] = 30;  muestras[885] = 40;
 80012ca:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80012ce:	f103 0308 	add.w	r3, r3, #8
 80012d2:	e009      	b.n	80012e8 <main+0x6fc>
 80012d4:	e0001000 	.word	0xe0001000
 80012d8:	08004234 	.word	0x08004234
 80012dc:	08004248 	.word	0x08004248
 80012e0:	08004270 	.word	0x08004270
 80012e4:	08004298 	.word	0x08004298
 80012e8:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80012ec:	220a      	movs	r2, #10
 80012ee:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 80012f2:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80012f6:	f103 0308 	add.w	r3, r3, #8
 80012fa:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80012fe:	2214      	movs	r2, #20
 8001300:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 8001304:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001308:	f103 0308 	add.w	r3, r3, #8
 800130c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001310:	221e      	movs	r2, #30
 8001312:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 8001316:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800131a:	f103 0308 	add.w	r3, r3, #8
 800131e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001322:	2228      	movs	r2, #40	; 0x28
 8001324:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  muestras_eco[0] = 0;  muestras_eco[1] = 0;  muestras_eco[2] = 0;  muestras_eco[3] = 0;
 8001328:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800132c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]
 8001334:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001338:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800133c:	2200      	movs	r2, #0
 800133e:	805a      	strh	r2, [r3, #2]
 8001340:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001344:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001348:	2200      	movs	r2, #0
 800134a:	809a      	strh	r2, [r3, #4]
 800134c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001350:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001354:	2200      	movs	r2, #0
 8001356:	80da      	strh	r2, [r3, #6]
  muestras_eco[882] = 0;  muestras_eco[883] = 0;  muestras_eco[884] = 0;  muestras_eco[885] = 0;
 8001358:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800135c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001360:	2200      	movs	r2, #0
 8001362:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 8001366:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800136a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800136e:	2200      	movs	r2, #0
 8001370:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 8001374:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001378:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800137c:	2200      	movs	r2, #0
 800137e:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 8001382:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001386:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800138a:	2200      	movs	r2, #0
 800138c:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea

  DWT->CYCCNT = 0;
 8001390:	4b99      	ldr	r3, [pc, #612]	; (80015f8 <main+0xa0c>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  asm_eco(muestras, muestras_eco);
 8001396:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800139a:	3a48      	subs	r2, #72	; 0x48
 800139c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80013a0:	f103 0308 	add.w	r3, r3, #8
 80013a4:	3b08      	subs	r3, #8
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7fe ffbc 	bl	8000326 <asm_eco>
  ciclosASM = DWT->CYCCNT;
 80013ae:	4b92      	ldr	r3, [pc, #584]	; (80015f8 <main+0xa0c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80013b6:	f102 0244 	add.w	r2, r2, #68	; 0x44
 80013ba:	6013      	str	r3, [r2, #0]

  muestras[0] = 10;  muestras[1] = 15;  muestras[2] = 20;  muestras[3] = 25;
 80013bc:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80013c0:	f103 0308 	add.w	r3, r3, #8
 80013c4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80013c8:	220a      	movs	r2, #10
 80013ca:	801a      	strh	r2, [r3, #0]
 80013cc:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80013d0:	f103 0308 	add.w	r3, r3, #8
 80013d4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80013d8:	220f      	movs	r2, #15
 80013da:	805a      	strh	r2, [r3, #2]
 80013dc:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80013e0:	f103 0308 	add.w	r3, r3, #8
 80013e4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80013e8:	2214      	movs	r2, #20
 80013ea:	809a      	strh	r2, [r3, #4]
 80013ec:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80013f0:	f103 0308 	add.w	r3, r3, #8
 80013f4:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80013f8:	2219      	movs	r2, #25
 80013fa:	80da      	strh	r2, [r3, #6]
  muestras[882] = 10;  muestras[883] = 20;  muestras[884] = 30;  muestras[885] = 40;
 80013fc:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001400:	f103 0308 	add.w	r3, r3, #8
 8001404:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001408:	220a      	movs	r2, #10
 800140a:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 800140e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001412:	f103 0308 	add.w	r3, r3, #8
 8001416:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800141a:	2214      	movs	r2, #20
 800141c:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 8001420:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001424:	f103 0308 	add.w	r3, r3, #8
 8001428:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800142c:	221e      	movs	r2, #30
 800142e:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 8001432:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001436:	f103 0308 	add.w	r3, r3, #8
 800143a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800143e:	2228      	movs	r2, #40	; 0x28
 8001440:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  muestras_eco[0] = 0;  muestras_eco[1] = 0;  muestras_eco[2] = 0;  muestras_eco[3] = 0;
 8001444:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001448:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800144c:	2200      	movs	r2, #0
 800144e:	801a      	strh	r2, [r3, #0]
 8001450:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001454:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001458:	2200      	movs	r2, #0
 800145a:	805a      	strh	r2, [r3, #2]
 800145c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001460:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001464:	2200      	movs	r2, #0
 8001466:	809a      	strh	r2, [r3, #4]
 8001468:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800146c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001470:	2200      	movs	r2, #0
 8001472:	80da      	strh	r2, [r3, #6]
  muestras_eco[882] = 0;  muestras_eco[883] = 0;  muestras_eco[884] = 0;  muestras_eco[885] = 0;
 8001474:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001478:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800147c:	2200      	movs	r2, #0
 800147e:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 8001482:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001486:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800148a:	2200      	movs	r2, #0
 800148c:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 8001490:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001494:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001498:	2200      	movs	r2, #0
 800149a:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 800149e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80014a2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80014a6:	2200      	movs	r2, #0
 80014a8:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea


  DWT->CYCCNT = 0;
 80014ac:	4b52      	ldr	r3, [pc, #328]	; (80015f8 <main+0xa0c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  introducirEco(muestras, muestras_eco);
 80014b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80014b6:	3a48      	subs	r2, #72	; 0x48
 80014b8:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80014bc:	f103 0308 	add.w	r3, r3, #8
 80014c0:	3b08      	subs	r3, #8
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fad4 	bl	8000a72 <introducirEco>
  ciclosC = DWT->CYCCNT;
 80014ca:	4b4b      	ldr	r3, [pc, #300]	; (80015f8 <main+0xa0c>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80014d2:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80014d6:	6013      	str	r3, [r2, #0]

  muestras[0] = 10;  muestras[1] = 15;  muestras[2] = 20;  muestras[3] = 25;
 80014d8:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80014dc:	f103 0308 	add.w	r3, r3, #8
 80014e0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80014e4:	220a      	movs	r2, #10
 80014e6:	801a      	strh	r2, [r3, #0]
 80014e8:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80014ec:	f103 0308 	add.w	r3, r3, #8
 80014f0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80014f4:	220f      	movs	r2, #15
 80014f6:	805a      	strh	r2, [r3, #2]
 80014f8:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 80014fc:	f103 0308 	add.w	r3, r3, #8
 8001500:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001504:	2214      	movs	r2, #20
 8001506:	809a      	strh	r2, [r3, #4]
 8001508:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800150c:	f103 0308 	add.w	r3, r3, #8
 8001510:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001514:	2219      	movs	r2, #25
 8001516:	80da      	strh	r2, [r3, #6]
  muestras[882] = 10;  muestras[883] = 20;  muestras[884] = 30;  muestras[885] = 40;
 8001518:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800151c:	f103 0308 	add.w	r3, r3, #8
 8001520:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001524:	220a      	movs	r2, #10
 8001526:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 800152a:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 800152e:	f103 0308 	add.w	r3, r3, #8
 8001532:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001536:	2214      	movs	r2, #20
 8001538:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 800153c:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001540:	f103 0308 	add.w	r3, r3, #8
 8001544:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001548:	221e      	movs	r2, #30
 800154a:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 800154e:	f507 5307 	add.w	r3, r7, #8640	; 0x21c0
 8001552:	f103 0308 	add.w	r3, r3, #8
 8001556:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800155a:	2228      	movs	r2, #40	; 0x28
 800155c:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea
  muestras_eco[0] = 0;  muestras_eco[1] = 0;  muestras_eco[2] = 0;  muestras_eco[3] = 0;
 8001560:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001564:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
 800156c:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001570:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001574:	2200      	movs	r2, #0
 8001576:	805a      	strh	r2, [r3, #2]
 8001578:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 800157c:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001580:	2200      	movs	r2, #0
 8001582:	809a      	strh	r2, [r3, #4]
 8001584:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001588:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800158c:	2200      	movs	r2, #0
 800158e:	80da      	strh	r2, [r3, #6]
  muestras_eco[882] = 0;  muestras_eco[883] = 0;  muestras_eco[884] = 0;  muestras_eco[885] = 0;
 8001590:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001594:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001598:	2200      	movs	r2, #0
 800159a:	f8a3 26e4 	strh.w	r2, [r3, #1764]	; 0x6e4
 800159e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80015a2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80015a6:	2200      	movs	r2, #0
 80015a8:	f8a3 26e6 	strh.w	r2, [r3, #1766]	; 0x6e6
 80015ac:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80015b0:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80015b4:	2200      	movs	r2, #0
 80015b6:	f8a3 26e8 	strh.w	r2, [r3, #1768]	; 0x6e8
 80015ba:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 80015be:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80015c2:	2200      	movs	r2, #0
 80015c4:	f8a3 26ea 	strh.w	r2, [r3, #1770]	; 0x6ea


  DWT->CYCCNT = 0;
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <main+0xa0c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	605a      	str	r2, [r3, #4]
  introducirEco_Intrinsic(muestras, muestras_eco);
 80015ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80015d2:	3a48      	subs	r2, #72	; 0x48
 80015d4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80015d8:	f103 0308 	add.w	r3, r3, #8
 80015dc:	3b08      	subs	r3, #8
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fa9e 	bl	8000b22 <introducirEco_Intrinsic>
  ciclosC = DWT->CYCCNT;
 80015e6:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <main+0xa0c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f507 4283 	add.w	r2, r7, #16768	; 0x4180
 80015ee:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80015f2:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <main+0xa08>
 80015f6:	bf00      	nop
 80015f8:	e0001000 	.word	0xe0001000

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b094      	sub	sp, #80	; 0x50
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	2230      	movs	r2, #48	; 0x30
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f002 fdca 	bl	80041a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
 8001624:	4b28      	ldr	r3, [pc, #160]	; (80016c8 <SystemClock_Config+0xcc>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <SystemClock_Config+0xcc>)
 800162a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162e:	6413      	str	r3, [r2, #64]	; 0x40
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <SystemClock_Config+0xcc>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800163c:	2300      	movs	r3, #0
 800163e:	607b      	str	r3, [r7, #4]
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <SystemClock_Config+0xd0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a21      	ldr	r2, [pc, #132]	; (80016cc <SystemClock_Config+0xd0>)
 8001646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <SystemClock_Config+0xd0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001658:	2301      	movs	r3, #1
 800165a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800165c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001662:	2302      	movs	r3, #2
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800166c:	2304      	movs	r3, #4
 800166e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001670:	23a8      	movs	r3, #168	; 0xa8
 8001672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001674:	2302      	movs	r3, #2
 8001676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001678:	2307      	movs	r3, #7
 800167a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167c:	f107 0320 	add.w	r3, r7, #32
 8001680:	4618      	mov	r0, r3
 8001682:	f001 fb0f 	bl	8002ca4 <HAL_RCC_OscConfig>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800168c:	f000 f974 	bl	8001978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001690:	230f      	movs	r3, #15
 8001692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001694:	2302      	movs	r3, #2
 8001696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800169c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	2105      	movs	r1, #5
 80016ae:	4618      	mov	r0, r3
 80016b0:	f001 fd70 	bl	8003194 <HAL_RCC_ClockConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016ba:	f000 f95d 	bl	8001978 <Error_Handler>
  }
}
 80016be:	bf00      	nop
 80016c0:	3750      	adds	r7, #80	; 0x50
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40007000 	.word	0x40007000

080016d0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80016d4:	4b1f      	ldr	r3, [pc, #124]	; (8001754 <MX_ETH_Init+0x84>)
 80016d6:	4a20      	ldr	r2, [pc, #128]	; (8001758 <MX_ETH_Init+0x88>)
 80016d8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80016da:	4b20      	ldr	r3, [pc, #128]	; (800175c <MX_ETH_Init+0x8c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <MX_ETH_Init+0x8c>)
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <MX_ETH_Init+0x8c>)
 80016e8:	22e1      	movs	r2, #225	; 0xe1
 80016ea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <MX_ETH_Init+0x8c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <MX_ETH_Init+0x8c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_ETH_Init+0x8c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80016fe:	4b15      	ldr	r3, [pc, #84]	; (8001754 <MX_ETH_Init+0x84>)
 8001700:	4a16      	ldr	r2, [pc, #88]	; (800175c <MX_ETH_Init+0x8c>)
 8001702:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001704:	4b13      	ldr	r3, [pc, #76]	; (8001754 <MX_ETH_Init+0x84>)
 8001706:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800170a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <MX_ETH_Init+0x84>)
 800170e:	4a14      	ldr	r2, [pc, #80]	; (8001760 <MX_ETH_Init+0x90>)
 8001710:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <MX_ETH_Init+0x84>)
 8001714:	4a13      	ldr	r2, [pc, #76]	; (8001764 <MX_ETH_Init+0x94>)
 8001716:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001718:	4b0e      	ldr	r3, [pc, #56]	; (8001754 <MX_ETH_Init+0x84>)
 800171a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800171e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <MX_ETH_Init+0x84>)
 8001722:	f000 fcb5 	bl	8002090 <HAL_ETH_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800172c:	f000 f924 	bl	8001978 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001730:	2238      	movs	r2, #56	; 0x38
 8001732:	2100      	movs	r1, #0
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <MX_ETH_Init+0x98>)
 8001736:	f002 fd35 	bl	80041a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <MX_ETH_Init+0x98>)
 800173c:	2221      	movs	r2, #33	; 0x21
 800173e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <MX_ETH_Init+0x98>)
 8001742:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001746:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001748:	4b07      	ldr	r3, [pc, #28]	; (8001768 <MX_ETH_Init+0x98>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001a0 	.word	0x200001a0
 8001758:	40028000 	.word	0x40028000
 800175c:	200007a0 	.word	0x200007a0
 8001760:	20000100 	.word	0x20000100
 8001764:	20000060 	.word	0x20000060
 8001768:	20000028 	.word	0x20000028

0800176c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 8001772:	4a12      	ldr	r2, [pc, #72]	; (80017bc <MX_USART3_UART_Init+0x50>)
 8001774:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001776:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 8001778:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800177c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b08      	ldr	r3, [pc, #32]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_USART3_UART_Init+0x4c>)
 80017a4:	f001 ff16 	bl	80035d4 <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017ae:	f000 f8e3 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000250 	.word	0x20000250
 80017bc:	40004800 	.word	0x40004800

080017c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80017ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ce:	2204      	movs	r2, #4
 80017d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017d4:	2202      	movs	r2, #2
 80017d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017e0:	2202      	movs	r2, #2
 80017e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80017f6:	4b08      	ldr	r3, [pc, #32]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80017fe:	2200      	movs	r2, #0
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001802:	4805      	ldr	r0, [pc, #20]	; (8001818 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001804:	f001 f931 	bl	8002a6a <HAL_PCD_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800180e:	f000 f8b3 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000294 	.word	0x20000294

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
 8001836:	4b4c      	ldr	r3, [pc, #304]	; (8001968 <MX_GPIO_Init+0x14c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a4b      	ldr	r2, [pc, #300]	; (8001968 <MX_GPIO_Init+0x14c>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b49      	ldr	r3, [pc, #292]	; (8001968 <MX_GPIO_Init+0x14c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	61bb      	str	r3, [r7, #24]
 800184c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	4b45      	ldr	r3, [pc, #276]	; (8001968 <MX_GPIO_Init+0x14c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a44      	ldr	r2, [pc, #272]	; (8001968 <MX_GPIO_Init+0x14c>)
 8001858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b42      	ldr	r3, [pc, #264]	; (8001968 <MX_GPIO_Init+0x14c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b3e      	ldr	r3, [pc, #248]	; (8001968 <MX_GPIO_Init+0x14c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a3d      	ldr	r2, [pc, #244]	; (8001968 <MX_GPIO_Init+0x14c>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <MX_GPIO_Init+0x14c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <MX_GPIO_Init+0x14c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4a36      	ldr	r2, [pc, #216]	; (8001968 <MX_GPIO_Init+0x14c>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4b34      	ldr	r3, [pc, #208]	; (8001968 <MX_GPIO_Init+0x14c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b30      	ldr	r3, [pc, #192]	; (8001968 <MX_GPIO_Init+0x14c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4a2f      	ldr	r2, [pc, #188]	; (8001968 <MX_GPIO_Init+0x14c>)
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <MX_GPIO_Init+0x14c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b29      	ldr	r3, [pc, #164]	; (8001968 <MX_GPIO_Init+0x14c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a28      	ldr	r2, [pc, #160]	; (8001968 <MX_GPIO_Init+0x14c>)
 80018c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b26      	ldr	r3, [pc, #152]	; (8001968 <MX_GPIO_Init+0x14c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80018da:	2200      	movs	r2, #0
 80018dc:	f244 0181 	movw	r1, #16513	; 0x4081
 80018e0:	4822      	ldr	r0, [pc, #136]	; (800196c <MX_GPIO_Init+0x150>)
 80018e2:	f001 f8a9 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2140      	movs	r1, #64	; 0x40
 80018ea:	4821      	ldr	r0, [pc, #132]	; (8001970 <MX_GPIO_Init+0x154>)
 80018ec:	f001 f8a4 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80018f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	4619      	mov	r1, r3
 8001906:	481b      	ldr	r0, [pc, #108]	; (8001974 <MX_GPIO_Init+0x158>)
 8001908:	f000 feea 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800190c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001912:	2301      	movs	r3, #1
 8001914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	4811      	ldr	r0, [pc, #68]	; (800196c <MX_GPIO_Init+0x150>)
 8001926:	f000 fedb 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800192a:	2340      	movs	r3, #64	; 0x40
 800192c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	4619      	mov	r1, r3
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <MX_GPIO_Init+0x154>)
 8001942:	f000 fecd 	bl	80026e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	4805      	ldr	r0, [pc, #20]	; (8001970 <MX_GPIO_Init+0x154>)
 800195a:	f000 fec1 	bl	80026e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800195e:	bf00      	nop
 8001960:	3730      	adds	r7, #48	; 0x30
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40023800 	.word	0x40023800
 800196c:	40020400 	.word	0x40020400
 8001970:	40021800 	.word	0x40021800
 8001974:	40020800 	.word	0x40020800

08001978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800197c:	b672      	cpsid	i
}
 800197e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001980:	e7fe      	b.n	8001980 <Error_Handler+0x8>
	...

08001984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_MspInit+0x4c>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <HAL_MspInit+0x4c>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <HAL_MspInit+0x4c>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	603b      	str	r3, [r7, #0]
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <HAL_MspInit+0x4c>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a08      	ldr	r2, [pc, #32]	; (80019d0 <HAL_MspInit+0x4c>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_MspInit+0x4c>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800

080019d4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08e      	sub	sp, #56	; 0x38
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a55      	ldr	r2, [pc, #340]	; (8001b48 <HAL_ETH_MspInit+0x174>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	f040 80a4 	bne.w	8001b40 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
 80019fc:	4b53      	ldr	r3, [pc, #332]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a06:	6313      	str	r3, [r2, #48]	; 0x30
 8001a08:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a10:	623b      	str	r3, [r7, #32]
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	4a4b      	ldr	r2, [pc, #300]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a22:	6313      	str	r3, [r2, #48]	; 0x30
 8001a24:	4b49      	ldr	r3, [pc, #292]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	2300      	movs	r3, #0
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a38:	4a44      	ldr	r2, [pc, #272]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a40:	4b42      	ldr	r3, [pc, #264]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a48:	61bb      	str	r3, [r7, #24]
 8001a4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	4a3d      	ldr	r2, [pc, #244]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a56:	f043 0304 	orr.w	r3, r3, #4
 8001a5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a36      	ldr	r2, [pc, #216]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	4a2f      	ldr	r2, [pc, #188]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	6313      	str	r3, [r2, #48]	; 0x30
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a28      	ldr	r2, [pc, #160]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aae:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <HAL_ETH_MspInit+0x178>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001abc:	2332      	movs	r3, #50	; 0x32
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001acc:	230b      	movs	r3, #11
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	481e      	ldr	r0, [pc, #120]	; (8001b50 <HAL_ETH_MspInit+0x17c>)
 8001ad8:	f000 fe02 	bl	80026e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001adc:	2386      	movs	r3, #134	; 0x86
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aec:	230b      	movs	r3, #11
 8001aee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af4:	4619      	mov	r1, r3
 8001af6:	4817      	ldr	r0, [pc, #92]	; (8001b54 <HAL_ETH_MspInit+0x180>)
 8001af8:	f000 fdf2 	bl	80026e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001afc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b0e:	230b      	movs	r3, #11
 8001b10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b16:	4619      	mov	r1, r3
 8001b18:	480f      	ldr	r0, [pc, #60]	; (8001b58 <HAL_ETH_MspInit+0x184>)
 8001b1a:	f000 fde1 	bl	80026e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001b1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b30:	230b      	movs	r3, #11
 8001b32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4808      	ldr	r0, [pc, #32]	; (8001b5c <HAL_ETH_MspInit+0x188>)
 8001b3c:	f000 fdd0 	bl	80026e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001b40:	bf00      	nop
 8001b42:	3738      	adds	r7, #56	; 0x38
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40028000 	.word	0x40028000
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	40021800 	.word	0x40021800

08001b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08a      	sub	sp, #40	; 0x28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 0314 	add.w	r3, r7, #20
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <HAL_UART_MspInit+0x84>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d12c      	bne.n	8001bdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_UART_MspInit+0x88>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	4a17      	ldr	r2, [pc, #92]	; (8001be8 <HAL_UART_MspInit+0x88>)
 8001b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b90:	6413      	str	r3, [r2, #64]	; 0x40
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_UART_MspInit+0x88>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_UART_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a10      	ldr	r2, [pc, #64]	; (8001be8 <HAL_UART_MspInit+0x88>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_UART_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001bcc:	2307      	movs	r3, #7
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4805      	ldr	r0, [pc, #20]	; (8001bec <HAL_UART_MspInit+0x8c>)
 8001bd8:	f000 fd82 	bl	80026e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40004800 	.word	0x40004800
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40020c00 	.word	0x40020c00

08001bf0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08a      	sub	sp, #40	; 0x28
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c10:	d13f      	bne.n	8001c92 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_PCD_MspInit+0xac>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <HAL_PCD_MspInit+0xac>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b1e      	ldr	r3, [pc, #120]	; (8001c9c <HAL_PCD_MspInit+0xac>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	613b      	str	r3, [r7, #16]
 8001c2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c2e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c40:	230a      	movs	r3, #10
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4815      	ldr	r0, [pc, #84]	; (8001ca0 <HAL_PCD_MspInit+0xb0>)
 8001c4c:	f000 fd48 	bl	80026e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	480e      	ldr	r0, [pc, #56]	; (8001ca0 <HAL_PCD_MspInit+0xb0>)
 8001c66:	f000 fd3b 	bl	80026e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_PCD_MspInit+0xac>)
 8001c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_PCD_MspInit+0xac>)
 8001c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c74:	6353      	str	r3, [r2, #52]	; 0x34
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_PCD_MspInit+0xac>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_PCD_MspInit+0xac>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_PCD_MspInit+0xac>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	; 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ca8:	e7fe      	b.n	8001ca8 <NMI_Handler+0x4>

08001caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cae:	e7fe      	b.n	8001cae <HardFault_Handler+0x4>

08001cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb4:	e7fe      	b.n	8001cb4 <MemManage_Handler+0x4>

08001cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <BusFault_Handler+0x4>

08001cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <UsageFault_Handler+0x4>

08001cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8001cc8:	f3ef 8314 	mrs	r3, CONTROL
 8001ccc:	607b      	str	r3, [r7, #4]
  return(result);
 8001cce:	687b      	ldr	r3, [r7, #4]
	// Handler de la interrupcion "SVC" (Supervisor Call).
	// Usado por el ejemplo "PrivilegiosSVC".

    // Se obtiene el valor del registro "control". El bit 0 indica el nivel
    // de privilegio en modo "Thread". Deberia ser 1: No privilegiado.
    uint32_t x = __get_CONTROL ();
 8001cd0:	60fb      	str	r3, [r7, #12]

    // Borra el bit 0. Nuevo valor 0: privilegiado.
    x &= ~1u;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f383 8814 	msr	CONTROL, r3
}
 8001ce4:	bf00      	nop
    __set_CONTROL (x);
  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d12:	f000 f893 	bl	8001e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <SystemInit+0x20>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <SystemInit+0x20>)
 8001d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  nop
 8001d40:	bf00      	nop
  nop
 8001d42:	bf00      	nop
  ldr   sp, =_estack       /* set stack pointer */
 8001d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d7c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d48:	480d      	ldr	r0, [pc, #52]	; (8001d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d4a:	490e      	ldr	r1, [pc, #56]	; (8001d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d50:	e002      	b.n	8001d58 <LoopCopyDataInit>

08001d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d56:	3304      	adds	r3, #4

08001d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d5c:	d3f9      	bcc.n	8001d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5e:	4a0b      	ldr	r2, [pc, #44]	; (8001d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d60:	4c0b      	ldr	r4, [pc, #44]	; (8001d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d64:	e001      	b.n	8001d6a <LoopFillZerobss>

08001d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d68:	3204      	adds	r2, #4

08001d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d6c:	d3fb      	bcc.n	8001d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d6e:	f7ff ffd5 	bl	8001d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d72:	f002 f9f3 	bl	800415c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d76:	f7fe ff39 	bl	8000bec <main>
  bx  lr    
 8001d7a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d7c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d88:	080042d4 	.word	0x080042d4
  ldr r2, =_sbss
 8001d8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d90:	200007ac 	.word	0x200007ac

08001d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d94:	e7fe      	b.n	8001d94 <ADC_IRQHandler>
	...

08001d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d9c:	4b0e      	ldr	r3, [pc, #56]	; (8001dd8 <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <HAL_Init+0x40>)
 8001da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_Init+0x40>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <HAL_Init+0x40>)
 8001dae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db4:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <HAL_Init+0x40>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_Init+0x40>)
 8001dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc0:	2003      	movs	r0, #3
 8001dc2:	f000 f931 	bl	8002028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f000 f808 	bl	8001ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dcc:	f7ff fdda 	bl	8001984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023c00 	.word	0x40023c00

08001ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_InitTick+0x54>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_InitTick+0x58>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f93b 	bl	8002076 <HAL_SYSTICK_Config>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00e      	b.n	8001e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b0f      	cmp	r3, #15
 8001e0e:	d80a      	bhi.n	8001e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e10:	2200      	movs	r2, #0
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f000 f911 	bl	800203e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e1c:	4a06      	ldr	r2, [pc, #24]	; (8001e38 <HAL_InitTick+0x5c>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e000      	b.n	8001e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3708      	adds	r7, #8
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000008 	.word	0x20000008
 8001e38:	20000004 	.word	0x20000004

08001e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_IncTick+0x20>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	461a      	mov	r2, r3
 8001e46:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x24>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a04      	ldr	r2, [pc, #16]	; (8001e60 <HAL_IncTick+0x24>)
 8001e4e:	6013      	str	r3, [r2, #0]
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20000008 	.word	0x20000008
 8001e60:	200007a8 	.word	0x200007a8

08001e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return uwTick;
 8001e68:	4b03      	ldr	r3, [pc, #12]	; (8001e78 <HAL_GetTick+0x14>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	200007a8 	.word	0x200007a8

08001e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e84:	f7ff ffee 	bl	8001e64 <HAL_GetTick>
 8001e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e94:	d005      	beq.n	8001ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e96:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <HAL_Delay+0x44>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea2:	bf00      	nop
 8001ea4:	f7ff ffde 	bl	8001e64 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d8f7      	bhi.n	8001ea4 <HAL_Delay+0x28>
  {
  }
}
 8001eb4:	bf00      	nop
 8001eb6:	bf00      	nop
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000008 	.word	0x20000008

08001ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ef6:	4a04      	ldr	r2, [pc, #16]	; (8001f08 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	60d3      	str	r3, [r2, #12]
}
 8001efc:	bf00      	nop
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <__NVIC_GetPriorityGrouping+0x18>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	0a1b      	lsrs	r3, r3, #8
 8001f16:	f003 0307 	and.w	r3, r3, #7
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	6039      	str	r1, [r7, #0]
 8001f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	db0a      	blt.n	8001f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	490c      	ldr	r1, [pc, #48]	; (8001f74 <__NVIC_SetPriority+0x4c>)
 8001f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f46:	0112      	lsls	r2, r2, #4
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f50:	e00a      	b.n	8001f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	4908      	ldr	r1, [pc, #32]	; (8001f78 <__NVIC_SetPriority+0x50>)
 8001f58:	79fb      	ldrb	r3, [r7, #7]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	3b04      	subs	r3, #4
 8001f60:	0112      	lsls	r2, r2, #4
 8001f62:	b2d2      	uxtb	r2, r2
 8001f64:	440b      	add	r3, r1
 8001f66:	761a      	strb	r2, [r3, #24]
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000e100 	.word	0xe000e100
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	; 0x24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f1c3 0307 	rsb	r3, r3, #7
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	bf28      	it	cs
 8001f9a:	2304      	movcs	r3, #4
 8001f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	2b06      	cmp	r3, #6
 8001fa4:	d902      	bls.n	8001fac <NVIC_EncodePriority+0x30>
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3b03      	subs	r3, #3
 8001faa:	e000      	b.n	8001fae <NVIC_EncodePriority+0x32>
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43da      	mvns	r2, r3
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	fa01 f303 	lsl.w	r3, r1, r3
 8001fce:	43d9      	mvns	r1, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	4313      	orrs	r3, r2
         );
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3724      	adds	r7, #36	; 0x24
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
	...

08001fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff4:	d301      	bcc.n	8001ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e00f      	b.n	800201a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ffa:	4a0a      	ldr	r2, [pc, #40]	; (8002024 <SysTick_Config+0x40>)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002002:	210f      	movs	r1, #15
 8002004:	f04f 30ff 	mov.w	r0, #4294967295
 8002008:	f7ff ff8e 	bl	8001f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800200c:	4b05      	ldr	r3, [pc, #20]	; (8002024 <SysTick_Config+0x40>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <SysTick_Config+0x40>)
 8002014:	2207      	movs	r2, #7
 8002016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	e000e010 	.word	0xe000e010

08002028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff47 	bl	8001ec4 <__NVIC_SetPriorityGrouping>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203e:	b580      	push	{r7, lr}
 8002040:	b086      	sub	sp, #24
 8002042:	af00      	add	r7, sp, #0
 8002044:	4603      	mov	r3, r0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002050:	f7ff ff5c 	bl	8001f0c <__NVIC_GetPriorityGrouping>
 8002054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	68b9      	ldr	r1, [r7, #8]
 800205a:	6978      	ldr	r0, [r7, #20]
 800205c:	f7ff ff8e 	bl	8001f7c <NVIC_EncodePriority>
 8002060:	4602      	mov	r2, r0
 8002062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff5d 	bl	8001f28 <__NVIC_SetPriority>
}
 800206e:	bf00      	nop
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ffb0 	bl	8001fe4 <SysTick_Config>
 8002084:	4603      	mov	r3, r0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e06c      	b.n	800217c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d106      	bne.n	80020ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2223      	movs	r2, #35	; 0x23
 80020b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff fc8d 	bl	80019d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	4b31      	ldr	r3, [pc, #196]	; (8002184 <HAL_ETH_Init+0xf4>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	4a30      	ldr	r2, [pc, #192]	; (8002184 <HAL_ETH_Init+0xf4>)
 80020c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020c8:	6453      	str	r3, [r2, #68]	; 0x44
 80020ca:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_ETH_Init+0xf4>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80020d6:	4b2c      	ldr	r3, [pc, #176]	; (8002188 <HAL_ETH_Init+0xf8>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	4a2b      	ldr	r2, [pc, #172]	; (8002188 <HAL_ETH_Init+0xf8>)
 80020dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80020e2:	4b29      	ldr	r3, [pc, #164]	; (8002188 <HAL_ETH_Init+0xf8>)
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	4927      	ldr	r1, [pc, #156]	; (8002188 <HAL_ETH_Init+0xf8>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_ETH_Init+0xf8>)
 80020f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6812      	ldr	r2, [r2, #0]
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800210a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800210c:	f7ff feaa 	bl	8001e64 <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002112:	e011      	b.n	8002138 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002114:	f7ff fea6 	bl	8001e64 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002122:	d909      	bls.n	8002138 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2204      	movs	r2, #4
 8002128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	22e0      	movs	r2, #224	; 0xe0
 8002130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e021      	b.n	800217c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1e4      	bne.n	8002114 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 f958 	bl	8002400 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 f9ff 	bl	8002554 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 fa55 	bl	8002606 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	461a      	mov	r2, r3
 8002162:	2100      	movs	r1, #0
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f9bd 	bl	80024e4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2210      	movs	r2, #16
 8002176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40023800 	.word	0x40023800
 8002188:	40013800 	.word	0x40013800

0800218c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4b51      	ldr	r3, [pc, #324]	; (80022e8 <ETH_SetMACConfig+0x15c>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	7c1b      	ldrb	r3, [r3, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <ETH_SetMACConfig+0x28>
 80021ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80021b2:	e000      	b.n	80021b6 <ETH_SetMACConfig+0x2a>
 80021b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	7c5b      	ldrb	r3, [r3, #17]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <ETH_SetMACConfig+0x38>
 80021be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021c2:	e000      	b.n	80021c6 <ETH_SetMACConfig+0x3a>
 80021c4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	7fdb      	ldrb	r3, [r3, #31]
 80021d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80021d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80021da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	7f92      	ldrb	r2, [r2, #30]
 80021e0:	2a00      	cmp	r2, #0
 80021e2:	d102      	bne.n	80021ea <ETH_SetMACConfig+0x5e>
 80021e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e8:	e000      	b.n	80021ec <ETH_SetMACConfig+0x60>
 80021ea:	2200      	movs	r2, #0
                        macconf->Speed |
 80021ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	7f1b      	ldrb	r3, [r3, #28]
 80021f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80021f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80021fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	791b      	ldrb	r3, [r3, #4]
 8002200:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002202:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	f892 2020 	ldrb.w	r2, [r2, #32]
 800220a:	2a00      	cmp	r2, #0
 800220c:	d102      	bne.n	8002214 <ETH_SetMACConfig+0x88>
 800220e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002212:	e000      	b.n	8002216 <ETH_SetMACConfig+0x8a>
 8002214:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002216:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	7bdb      	ldrb	r3, [r3, #15]
 800221c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800221e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002224:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800222c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800222e:	4313      	orrs	r3, r2
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002246:	2001      	movs	r0, #1
 8002248:	f7ff fe18 	bl	8001e7c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002262:	4013      	ands	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002272:	2a00      	cmp	r2, #0
 8002274:	d101      	bne.n	800227a <ETH_SetMACConfig+0xee>
 8002276:	2280      	movs	r2, #128	; 0x80
 8002278:	e000      	b.n	800227c <ETH_SetMACConfig+0xf0>
 800227a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800227c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002282:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800228a:	2a01      	cmp	r2, #1
 800228c:	d101      	bne.n	8002292 <ETH_SetMACConfig+0x106>
 800228e:	2208      	movs	r2, #8
 8002290:	e000      	b.n	8002294 <ETH_SetMACConfig+0x108>
 8002292:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002294:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800229c:	2a01      	cmp	r2, #1
 800229e:	d101      	bne.n	80022a4 <ETH_SetMACConfig+0x118>
 80022a0:	2204      	movs	r2, #4
 80022a2:	e000      	b.n	80022a6 <ETH_SetMACConfig+0x11a>
 80022a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80022ae:	2a01      	cmp	r2, #1
 80022b0:	d101      	bne.n	80022b6 <ETH_SetMACConfig+0x12a>
 80022b2:	2202      	movs	r2, #2
 80022b4:	e000      	b.n	80022b8 <ETH_SetMACConfig+0x12c>
 80022b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022b8:	4313      	orrs	r3, r2
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	4313      	orrs	r3, r2
 80022be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022d0:	2001      	movs	r0, #1
 80022d2:	f7ff fdd3 	bl	8001e7c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	ff20810f 	.word	0xff20810f

080022ec <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	4b3d      	ldr	r3, [pc, #244]	; (80023fc <ETH_SetDMAConfig+0x110>)
 8002306:	4013      	ands	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	7b1b      	ldrb	r3, [r3, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d102      	bne.n	8002318 <ETH_SetDMAConfig+0x2c>
 8002312:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002316:	e000      	b.n	800231a <ETH_SetDMAConfig+0x2e>
 8002318:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	7b5b      	ldrb	r3, [r3, #13]
 800231e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002320:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	7f52      	ldrb	r2, [r2, #29]
 8002326:	2a00      	cmp	r2, #0
 8002328:	d102      	bne.n	8002330 <ETH_SetDMAConfig+0x44>
 800232a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800232e:	e000      	b.n	8002332 <ETH_SetDMAConfig+0x46>
 8002330:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002332:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	7b9b      	ldrb	r3, [r3, #14]
 8002338:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800233a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002340:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	7f1b      	ldrb	r3, [r3, #28]
 8002346:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002348:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	7f9b      	ldrb	r3, [r3, #30]
 800234e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002350:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002356:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800235e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002360:	4313      	orrs	r3, r2
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002370:	461a      	mov	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002382:	2001      	movs	r0, #1
 8002384:	f7ff fd7a 	bl	8001e7c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002390:	461a      	mov	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	791b      	ldrb	r3, [r3, #4]
 800239a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023a0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023a6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023ac:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023b4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023b6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023bc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023be:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023c4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023d2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7ff fd4b 	bl	8001e7c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	f8de3f23 	.word	0xf8de3f23

08002400 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b0a6      	sub	sp, #152	; 0x98
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002408:	2301      	movs	r3, #1
 800240a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800240e:	2301      	movs	r3, #1
 8002410:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002414:	2300      	movs	r3, #0
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800241e:	2301      	movs	r3, #1
 8002420:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800242a:	2301      	movs	r3, #1
 800242c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002436:	2300      	movs	r3, #0
 8002438:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800243c:	2300      	movs	r3, #0
 800243e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002440:	2300      	movs	r3, #0
 8002442:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002446:	2300      	movs	r3, #0
 8002448:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002450:	2300      	movs	r3, #0
 8002452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002456:	2300      	movs	r3, #0
 8002458:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002462:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002466:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002468:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800246c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002474:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002478:	4619      	mov	r1, r3
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fe86 	bl	800218c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002480:	2301      	movs	r3, #1
 8002482:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002484:	2301      	movs	r3, #1
 8002486:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002488:	2301      	movs	r3, #1
 800248a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800248e:	2301      	movs	r3, #1
 8002490:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024ac:	2301      	movs	r3, #1
 80024ae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ba:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024c0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80024c8:	2300      	movs	r3, #0
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024cc:	2300      	movs	r3, #0
 80024ce:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80024d0:	f107 0308 	add.w	r3, r7, #8
 80024d4:	4619      	mov	r1, r3
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f7ff ff08 	bl	80022ec <ETH_SetDMAConfig>
}
 80024dc:	bf00      	nop
 80024de:	3798      	adds	r7, #152	; 0x98
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3305      	adds	r3, #5
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	3204      	adds	r2, #4
 80024fc:	7812      	ldrb	r2, [r2, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002502:	68ba      	ldr	r2, [r7, #8]
 8002504:	4b11      	ldr	r3, [pc, #68]	; (800254c <ETH_MACAddressConfig+0x68>)
 8002506:	4413      	add	r3, r2
 8002508:	461a      	mov	r2, r3
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	3303      	adds	r3, #3
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	061a      	lsls	r2, r3, #24
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	3302      	adds	r3, #2
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	041b      	lsls	r3, r3, #16
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3301      	adds	r3, #1
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	4313      	orrs	r3, r2
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	7812      	ldrb	r2, [r2, #0]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	4b06      	ldr	r3, [pc, #24]	; (8002550 <ETH_MACAddressConfig+0x6c>)
 8002536:	4413      	add	r3, r2
 8002538:	461a      	mov	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	6013      	str	r3, [r2, #0]
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40028040 	.word	0x40028040
 8002550:	40028044 	.word	0x40028044

08002554 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e03e      	b.n	80025e0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68d9      	ldr	r1, [r3, #12]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	00db      	lsls	r3, r3, #3
 8002570:	440b      	add	r3, r1
 8002572:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	2200      	movs	r2, #0
 800257e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	2200      	movs	r2, #0
 8002584:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2200      	movs	r2, #0
 800258a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	3206      	adds	r2, #6
 8002594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d80c      	bhi.n	80025c4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68d9      	ldr	r1, [r3, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	4613      	mov	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	e004      	b.n	80025ce <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	461a      	mov	r2, r3
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	3301      	adds	r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d9bd      	bls.n	8002562 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f8:	611a      	str	r2, [r3, #16]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr

08002606 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002606:	b480      	push	{r7}
 8002608:	b085      	sub	sp, #20
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800260e:	2300      	movs	r3, #0
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	e046      	b.n	80026a2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6919      	ldr	r1, [r3, #16]
 8002618:	68fa      	ldr	r2, [r7, #12]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	440b      	add	r3, r1
 8002624:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2200      	movs	r2, #0
 8002636:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2200      	movs	r2, #0
 800263c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2200      	movs	r2, #0
 8002642:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2200      	movs	r2, #0
 8002648:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002650:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002658:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	3212      	adds	r2, #18
 800266e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d80c      	bhi.n	8002692 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6919      	ldr	r1, [r3, #16]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	60da      	str	r2, [r3, #12]
 8002690:	e004      	b.n	800269c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	461a      	mov	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	3301      	adds	r3, #1
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d9b5      	bls.n	8002614 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691a      	ldr	r2, [r3, #16]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d2:	60da      	str	r2, [r3, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b089      	sub	sp, #36	; 0x24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f6:	2300      	movs	r3, #0
 80026f8:	61fb      	str	r3, [r7, #28]
 80026fa:	e177      	b.n	80029ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026fc:	2201      	movs	r2, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	429a      	cmp	r2, r3
 8002716:	f040 8166 	bne.w	80029e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	2b01      	cmp	r3, #1
 8002724:	d005      	beq.n	8002732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272e:	2b02      	cmp	r3, #2
 8002730:	d130      	bne.n	8002794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	2203      	movs	r2, #3
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002768:	2201      	movs	r2, #1
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4013      	ands	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	091b      	lsrs	r3, r3, #4
 800277e:	f003 0201 	and.w	r2, r3, #1
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b03      	cmp	r3, #3
 800279e:	d017      	beq.n	80027d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d123      	bne.n	8002824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	08da      	lsrs	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3208      	adds	r2, #8
 80027e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	220f      	movs	r2, #15
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	08da      	lsrs	r2, r3, #3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3208      	adds	r2, #8
 800281e:	69b9      	ldr	r1, [r7, #24]
 8002820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2203      	movs	r2, #3
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	69ba      	ldr	r2, [r7, #24]
 8002838:	4013      	ands	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0203 	and.w	r2, r3, #3
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80c0 	beq.w	80029e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b66      	ldr	r3, [pc, #408]	; (8002a04 <HAL_GPIO_Init+0x324>)
 800286c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286e:	4a65      	ldr	r2, [pc, #404]	; (8002a04 <HAL_GPIO_Init+0x324>)
 8002870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002874:	6453      	str	r3, [r2, #68]	; 0x44
 8002876:	4b63      	ldr	r3, [pc, #396]	; (8002a04 <HAL_GPIO_Init+0x324>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002882:	4a61      	ldr	r2, [pc, #388]	; (8002a08 <HAL_GPIO_Init+0x328>)
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	089b      	lsrs	r3, r3, #2
 8002888:	3302      	adds	r3, #2
 800288a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	220f      	movs	r2, #15
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4013      	ands	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a58      	ldr	r2, [pc, #352]	; (8002a0c <HAL_GPIO_Init+0x32c>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d037      	beq.n	800291e <HAL_GPIO_Init+0x23e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a57      	ldr	r2, [pc, #348]	; (8002a10 <HAL_GPIO_Init+0x330>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d031      	beq.n	800291a <HAL_GPIO_Init+0x23a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a56      	ldr	r2, [pc, #344]	; (8002a14 <HAL_GPIO_Init+0x334>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d02b      	beq.n	8002916 <HAL_GPIO_Init+0x236>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a55      	ldr	r2, [pc, #340]	; (8002a18 <HAL_GPIO_Init+0x338>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d025      	beq.n	8002912 <HAL_GPIO_Init+0x232>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a54      	ldr	r2, [pc, #336]	; (8002a1c <HAL_GPIO_Init+0x33c>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d01f      	beq.n	800290e <HAL_GPIO_Init+0x22e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a53      	ldr	r2, [pc, #332]	; (8002a20 <HAL_GPIO_Init+0x340>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d019      	beq.n	800290a <HAL_GPIO_Init+0x22a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a52      	ldr	r2, [pc, #328]	; (8002a24 <HAL_GPIO_Init+0x344>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d013      	beq.n	8002906 <HAL_GPIO_Init+0x226>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a51      	ldr	r2, [pc, #324]	; (8002a28 <HAL_GPIO_Init+0x348>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00d      	beq.n	8002902 <HAL_GPIO_Init+0x222>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a50      	ldr	r2, [pc, #320]	; (8002a2c <HAL_GPIO_Init+0x34c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d007      	beq.n	80028fe <HAL_GPIO_Init+0x21e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4f      	ldr	r2, [pc, #316]	; (8002a30 <HAL_GPIO_Init+0x350>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d101      	bne.n	80028fa <HAL_GPIO_Init+0x21a>
 80028f6:	2309      	movs	r3, #9
 80028f8:	e012      	b.n	8002920 <HAL_GPIO_Init+0x240>
 80028fa:	230a      	movs	r3, #10
 80028fc:	e010      	b.n	8002920 <HAL_GPIO_Init+0x240>
 80028fe:	2308      	movs	r3, #8
 8002900:	e00e      	b.n	8002920 <HAL_GPIO_Init+0x240>
 8002902:	2307      	movs	r3, #7
 8002904:	e00c      	b.n	8002920 <HAL_GPIO_Init+0x240>
 8002906:	2306      	movs	r3, #6
 8002908:	e00a      	b.n	8002920 <HAL_GPIO_Init+0x240>
 800290a:	2305      	movs	r3, #5
 800290c:	e008      	b.n	8002920 <HAL_GPIO_Init+0x240>
 800290e:	2304      	movs	r3, #4
 8002910:	e006      	b.n	8002920 <HAL_GPIO_Init+0x240>
 8002912:	2303      	movs	r3, #3
 8002914:	e004      	b.n	8002920 <HAL_GPIO_Init+0x240>
 8002916:	2302      	movs	r3, #2
 8002918:	e002      	b.n	8002920 <HAL_GPIO_Init+0x240>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_GPIO_Init+0x240>
 800291e:	2300      	movs	r3, #0
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	f002 0203 	and.w	r2, r2, #3
 8002926:	0092      	lsls	r2, r2, #2
 8002928:	4093      	lsls	r3, r2
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002930:	4935      	ldr	r1, [pc, #212]	; (8002a08 <HAL_GPIO_Init+0x328>)
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3302      	adds	r3, #2
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800293e:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <HAL_GPIO_Init+0x354>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	43db      	mvns	r3, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4013      	ands	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002962:	4a34      	ldr	r2, [pc, #208]	; (8002a34 <HAL_GPIO_Init+0x354>)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002968:	4b32      	ldr	r3, [pc, #200]	; (8002a34 <HAL_GPIO_Init+0x354>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43db      	mvns	r3, r3
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4013      	ands	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800298c:	4a29      	ldr	r2, [pc, #164]	; (8002a34 <HAL_GPIO_Init+0x354>)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002992:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <HAL_GPIO_Init+0x354>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	43db      	mvns	r3, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4013      	ands	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029b6:	4a1f      	ldr	r2, [pc, #124]	; (8002a34 <HAL_GPIO_Init+0x354>)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_GPIO_Init+0x354>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d003      	beq.n	80029e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e0:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <HAL_GPIO_Init+0x354>)
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3301      	adds	r3, #1
 80029ea:	61fb      	str	r3, [r7, #28]
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	2b0f      	cmp	r3, #15
 80029f0:	f67f ae84 	bls.w	80026fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f4:	bf00      	nop
 80029f6:	bf00      	nop
 80029f8:	3724      	adds	r7, #36	; 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	40020000 	.word	0x40020000
 8002a10:	40020400 	.word	0x40020400
 8002a14:	40020800 	.word	0x40020800
 8002a18:	40020c00 	.word	0x40020c00
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	40021400 	.word	0x40021400
 8002a24:	40021800 	.word	0x40021800
 8002a28:	40021c00 	.word	0x40021c00
 8002a2c:	40022000 	.word	0x40022000
 8002a30:	40022400 	.word	0x40022400
 8002a34:	40013c00 	.word	0x40013c00

08002a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a48:	787b      	ldrb	r3, [r7, #1]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a54:	e003      	b.n	8002a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	041a      	lsls	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	619a      	str	r2, [r3, #24]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6c:	b08f      	sub	sp, #60	; 0x3c
 8002a6e:	af0a      	add	r7, sp, #40	; 0x28
 8002a70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e10f      	b.n	8002c9c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff f8aa 	bl	8001bf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 f8ad 	bl	8003c1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	687e      	ldr	r6, [r7, #4]
 8002ac8:	466d      	mov	r5, sp
 8002aca:	f106 0410 	add.w	r4, r6, #16
 8002ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ada:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ade:	1d33      	adds	r3, r6, #4
 8002ae0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ae2:	6838      	ldr	r0, [r7, #0]
 8002ae4:	f001 f838 	bl	8003b58 <USB_CoreInit>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e0d0      	b.n	8002c9c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2100      	movs	r1, #0
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 f89b 	bl	8003c3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	73fb      	strb	r3, [r7, #15]
 8002b0a:	e04a      	b.n	8002ba2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b0c:	7bfa      	ldrb	r2, [r7, #15]
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	333d      	adds	r3, #61	; 0x3d
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b20:	7bfa      	ldrb	r2, [r7, #15]
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	333c      	adds	r3, #60	; 0x3c
 8002b30:	7bfa      	ldrb	r2, [r7, #15]
 8002b32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b34:	7bfa      	ldrb	r2, [r7, #15]
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	b298      	uxth	r0, r3
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	440b      	add	r3, r1
 8002b46:	3344      	adds	r3, #68	; 0x44
 8002b48:	4602      	mov	r2, r0
 8002b4a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b4c:	7bfa      	ldrb	r2, [r7, #15]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3340      	adds	r3, #64	; 0x40
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b60:	7bfa      	ldrb	r2, [r7, #15]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	4413      	add	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	3348      	adds	r3, #72	; 0x48
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b74:	7bfa      	ldrb	r2, [r7, #15]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	334c      	adds	r3, #76	; 0x4c
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b88:	7bfa      	ldrb	r2, [r7, #15]
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	3354      	adds	r3, #84	; 0x54
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	7bfa      	ldrb	r2, [r7, #15]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d3af      	bcc.n	8002b0c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	e044      	b.n	8002c3c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bde:	7bfa      	ldrb	r2, [r7, #15]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c06:	2200      	movs	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c0a:	7bfa      	ldrb	r2, [r7, #15]
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c20:	7bfa      	ldrb	r2, [r7, #15]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d3b5      	bcc.n	8002bb2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	687e      	ldr	r6, [r7, #4]
 8002c4e:	466d      	mov	r5, sp
 8002c50:	f106 0410 	add.w	r4, r6, #16
 8002c54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c5c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c60:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c64:	1d33      	adds	r3, r6, #4
 8002c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c68:	6838      	ldr	r0, [r7, #0]
 8002c6a:	f001 f833 	bl	8003cd4 <USB_DevInit>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e00d      	b.n	8002c9c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f001 f9fe 	bl	8004096 <USB_DevDisconnect>

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e267      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d075      	beq.n	8002dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cc2:	4b88      	ldr	r3, [pc, #544]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4b85      	ldr	r3, [pc, #532]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d112      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cda:	4b82      	ldr	r3, [pc, #520]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce6:	d10b      	bne.n	8002d00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce8:	4b7e      	ldr	r3, [pc, #504]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d05b      	beq.n	8002dac <HAL_RCC_OscConfig+0x108>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d157      	bne.n	8002dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e242      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d08:	d106      	bne.n	8002d18 <HAL_RCC_OscConfig+0x74>
 8002d0a:	4b76      	ldr	r3, [pc, #472]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a75      	ldr	r2, [pc, #468]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x98>
 8002d22:	4b70      	ldr	r3, [pc, #448]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a6f      	ldr	r2, [pc, #444]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a6c      	ldr	r2, [pc, #432]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0xb0>
 8002d3c:	4b69      	ldr	r3, [pc, #420]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a68      	ldr	r2, [pc, #416]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b66      	ldr	r3, [pc, #408]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a65      	ldr	r2, [pc, #404]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7ff f882 	bl	8001e64 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d64:	f7ff f87e 	bl	8001e64 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e207      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b5b      	ldr	r3, [pc, #364]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0xc0>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d84:	f7ff f86e 	bl	8001e64 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7ff f86a 	bl	8001e64 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e1f3      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0xe8>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d063      	beq.n	8002e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dba:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b47      	ldr	r3, [pc, #284]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d11c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b44      	ldr	r3, [pc, #272]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1c7      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4937      	ldr	r1, [pc, #220]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	e03a      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <HAL_RCC_OscConfig+0x244>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1a:	f7ff f823 	bl	8001e64 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e22:	f7ff f81f 	bl	8001e64 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e1a8      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e34:	4b2b      	ldr	r3, [pc, #172]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e40:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	4925      	ldr	r1, [pc, #148]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	600b      	str	r3, [r1, #0]
 8002e54:	e015      	b.n	8002e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e56:	4b24      	ldr	r3, [pc, #144]	; (8002ee8 <HAL_RCC_OscConfig+0x244>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5c:	f7ff f802 	bl	8001e64 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e64:	f7fe fffe 	bl	8001e64 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e187      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e76:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0308 	and.w	r3, r3, #8
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d036      	beq.n	8002efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <HAL_RCC_OscConfig+0x248>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fe ffe2 	bl	8001e64 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ea4:	f7fe ffde 	bl	8001e64 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e167      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x200>
 8002ec2:	e01b      	b.n	8002efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ec4:	4b09      	ldr	r3, [pc, #36]	; (8002eec <HAL_RCC_OscConfig+0x248>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fe ffcb 	bl	8001e64 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed0:	e00e      	b.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ed2:	f7fe ffc7 	bl	8001e64 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d907      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e150      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	42470000 	.word	0x42470000
 8002eec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef0:	4b88      	ldr	r3, [pc, #544]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ea      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 8097 	beq.w	8003038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0e:	4b81      	ldr	r3, [pc, #516]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10f      	bne.n	8002f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	4b7d      	ldr	r3, [pc, #500]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	4a7c      	ldr	r2, [pc, #496]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f28:	6413      	str	r3, [r2, #64]	; 0x40
 8002f2a:	4b7a      	ldr	r3, [pc, #488]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3a:	4b77      	ldr	r3, [pc, #476]	; (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d118      	bne.n	8002f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f46:	4b74      	ldr	r3, [pc, #464]	; (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a73      	ldr	r2, [pc, #460]	; (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f52:	f7fe ff87 	bl	8001e64 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f5a:	f7fe ff83 	bl	8001e64 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e10c      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6c:	4b6a      	ldr	r3, [pc, #424]	; (8003118 <HAL_RCC_OscConfig+0x474>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d106      	bne.n	8002f8e <HAL_RCC_OscConfig+0x2ea>
 8002f80:	4b64      	ldr	r3, [pc, #400]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f84:	4a63      	ldr	r2, [pc, #396]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f86:	f043 0301 	orr.w	r3, r3, #1
 8002f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f8c:	e01c      	b.n	8002fc8 <HAL_RCC_OscConfig+0x324>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x30c>
 8002f96:	4b5f      	ldr	r3, [pc, #380]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	4a5e      	ldr	r2, [pc, #376]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	f043 0304 	orr.w	r3, r3, #4
 8002fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa2:	4b5c      	ldr	r3, [pc, #368]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	4a5b      	ldr	r2, [pc, #364]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6713      	str	r3, [r2, #112]	; 0x70
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x324>
 8002fb0:	4b58      	ldr	r3, [pc, #352]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb4:	4a57      	ldr	r2, [pc, #348]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fb6:	f023 0301 	bic.w	r3, r3, #1
 8002fba:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbc:	4b55      	ldr	r3, [pc, #340]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a54      	ldr	r2, [pc, #336]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002fc2:	f023 0304 	bic.w	r3, r3, #4
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d015      	beq.n	8002ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe ff48 	bl	8001e64 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fe ff44 	bl	8001e64 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e0cb      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fee:	4b49      	ldr	r3, [pc, #292]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0ee      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x334>
 8002ffa:	e014      	b.n	8003026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ffc:	f7fe ff32 	bl	8001e64 <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003002:	e00a      	b.n	800301a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003004:	f7fe ff2e 	bl	8001e64 <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e0b5      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301a:	4b3e      	ldr	r3, [pc, #248]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 800301c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1ee      	bne.n	8003004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003026:	7dfb      	ldrb	r3, [r7, #23]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d105      	bne.n	8003038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800302c:	4b39      	ldr	r3, [pc, #228]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	4a38      	ldr	r2, [pc, #224]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8003032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003036:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	699b      	ldr	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80a1 	beq.w	8003184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003042:	4b34      	ldr	r3, [pc, #208]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d05c      	beq.n	8003108 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d141      	bne.n	80030da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b31      	ldr	r3, [pc, #196]	; (800311c <HAL_RCC_OscConfig+0x478>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe ff02 	bl	8001e64 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003064:	f7fe fefe 	bl	8001e64 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e087      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	4b27      	ldr	r3, [pc, #156]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69da      	ldr	r2, [r3, #28]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	019b      	lsls	r3, r3, #6
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	3b01      	subs	r3, #1
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	491b      	ldr	r1, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_RCC_OscConfig+0x478>)
 80030ae:	2201      	movs	r2, #1
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fe fed7 	bl	8001e64 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fe fed3 	bl	8001e64 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e05c      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030cc:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x416>
 80030d8:	e054      	b.n	8003184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030da:	4b10      	ldr	r3, [pc, #64]	; (800311c <HAL_RCC_OscConfig+0x478>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e0:	f7fe fec0 	bl	8001e64 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e8:	f7fe febc 	bl	8001e64 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e045      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_RCC_OscConfig+0x470>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x444>
 8003106:	e03d      	b.n	8003184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d107      	bne.n	8003120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e038      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
 8003114:	40023800 	.word	0x40023800
 8003118:	40007000 	.word	0x40007000
 800311c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <HAL_RCC_OscConfig+0x4ec>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d028      	beq.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003138:	429a      	cmp	r2, r3
 800313a:	d121      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d11a      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003158:	4293      	cmp	r3, r2
 800315a:	d111      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	3b01      	subs	r3, #1
 800316a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800316c:	429a      	cmp	r2, r3
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800

08003194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0cc      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a8:	4b68      	ldr	r3, [pc, #416]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d90c      	bls.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031b6:	4b65      	ldr	r3, [pc, #404]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031be:	4b63      	ldr	r3, [pc, #396]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0b8      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d020      	beq.n	800321e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e8:	4b59      	ldr	r3, [pc, #356]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a58      	ldr	r2, [pc, #352]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003200:	4b53      	ldr	r3, [pc, #332]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4a52      	ldr	r2, [pc, #328]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800320a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800320c:	4b50      	ldr	r3, [pc, #320]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	494d      	ldr	r1, [pc, #308]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	2b00      	cmp	r3, #0
 8003228:	d044      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b47      	ldr	r3, [pc, #284]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d119      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e07f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d003      	beq.n	8003252 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324e:	2b03      	cmp	r3, #3
 8003250:	d107      	bne.n	8003262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003252:	4b3f      	ldr	r3, [pc, #252]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d109      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e06f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	4b3b      	ldr	r3, [pc, #236]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e067      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b37      	ldr	r3, [pc, #220]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4934      	ldr	r1, [pc, #208]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003284:	f7fe fdee 	bl	8001e64 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7fe fdea 	bl	8001e64 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e04f      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b2b      	ldr	r3, [pc, #172]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032b4:	4b25      	ldr	r3, [pc, #148]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d20c      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032c2:	4b22      	ldr	r3, [pc, #136]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ca:	4b20      	ldr	r3, [pc, #128]	; (800334c <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 030f 	and.w	r3, r3, #15
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d001      	beq.n	80032dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e032      	b.n	8003342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b19      	ldr	r3, [pc, #100]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4916      	ldr	r1, [pc, #88]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003306:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	490e      	ldr	r1, [pc, #56]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800331a:	f000 f821 	bl	8003360 <HAL_RCC_GetSysClockFreq>
 800331e:	4602      	mov	r2, r0
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	490a      	ldr	r1, [pc, #40]	; (8003354 <HAL_RCC_ClockConfig+0x1c0>)
 800332c:	5ccb      	ldrb	r3, [r1, r3]
 800332e:	fa22 f303 	lsr.w	r3, r2, r3
 8003332:	4a09      	ldr	r2, [pc, #36]	; (8003358 <HAL_RCC_ClockConfig+0x1c4>)
 8003334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_RCC_ClockConfig+0x1c8>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe fd4e 	bl	8001ddc <HAL_InitTick>

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	40023c00 	.word	0x40023c00
 8003350:	40023800 	.word	0x40023800
 8003354:	080042ac 	.word	0x080042ac
 8003358:	20000000 	.word	0x20000000
 800335c:	20000004 	.word	0x20000004

08003360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003364:	b094      	sub	sp, #80	; 0x50
 8003366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003368:	2300      	movs	r3, #0
 800336a:	647b      	str	r3, [r7, #68]	; 0x44
 800336c:	2300      	movs	r3, #0
 800336e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003370:	2300      	movs	r3, #0
 8003372:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003378:	4b79      	ldr	r3, [pc, #484]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 030c 	and.w	r3, r3, #12
 8003380:	2b08      	cmp	r3, #8
 8003382:	d00d      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003384:	2b08      	cmp	r3, #8
 8003386:	f200 80e1 	bhi.w	800354c <HAL_RCC_GetSysClockFreq+0x1ec>
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x34>
 800338e:	2b04      	cmp	r3, #4
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0x3a>
 8003392:	e0db      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003394:	4b73      	ldr	r3, [pc, #460]	; (8003564 <HAL_RCC_GetSysClockFreq+0x204>)
 8003396:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003398:	e0db      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800339a:	4b73      	ldr	r3, [pc, #460]	; (8003568 <HAL_RCC_GetSysClockFreq+0x208>)
 800339c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800339e:	e0d8      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a0:	4b6f      	ldr	r3, [pc, #444]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033aa:	4b6d      	ldr	r3, [pc, #436]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d063      	beq.n	800347e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033b6:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	099b      	lsrs	r3, r3, #6
 80033bc:	2200      	movs	r2, #0
 80033be:	63bb      	str	r3, [r7, #56]	; 0x38
 80033c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c8:	633b      	str	r3, [r7, #48]	; 0x30
 80033ca:	2300      	movs	r3, #0
 80033cc:	637b      	str	r3, [r7, #52]	; 0x34
 80033ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033d2:	4622      	mov	r2, r4
 80033d4:	462b      	mov	r3, r5
 80033d6:	f04f 0000 	mov.w	r0, #0
 80033da:	f04f 0100 	mov.w	r1, #0
 80033de:	0159      	lsls	r1, r3, #5
 80033e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033e4:	0150      	lsls	r0, r2, #5
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4621      	mov	r1, r4
 80033ec:	1a51      	subs	r1, r2, r1
 80033ee:	6139      	str	r1, [r7, #16]
 80033f0:	4629      	mov	r1, r5
 80033f2:	eb63 0301 	sbc.w	r3, r3, r1
 80033f6:	617b      	str	r3, [r7, #20]
 80033f8:	f04f 0200 	mov.w	r2, #0
 80033fc:	f04f 0300 	mov.w	r3, #0
 8003400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003404:	4659      	mov	r1, fp
 8003406:	018b      	lsls	r3, r1, #6
 8003408:	4651      	mov	r1, sl
 800340a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800340e:	4651      	mov	r1, sl
 8003410:	018a      	lsls	r2, r1, #6
 8003412:	4651      	mov	r1, sl
 8003414:	ebb2 0801 	subs.w	r8, r2, r1
 8003418:	4659      	mov	r1, fp
 800341a:	eb63 0901 	sbc.w	r9, r3, r1
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800342e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003432:	4690      	mov	r8, r2
 8003434:	4699      	mov	r9, r3
 8003436:	4623      	mov	r3, r4
 8003438:	eb18 0303 	adds.w	r3, r8, r3
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	462b      	mov	r3, r5
 8003440:	eb49 0303 	adc.w	r3, r9, r3
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	f04f 0200 	mov.w	r2, #0
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003452:	4629      	mov	r1, r5
 8003454:	024b      	lsls	r3, r1, #9
 8003456:	4621      	mov	r1, r4
 8003458:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800345c:	4621      	mov	r1, r4
 800345e:	024a      	lsls	r2, r1, #9
 8003460:	4610      	mov	r0, r2
 8003462:	4619      	mov	r1, r3
 8003464:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003466:	2200      	movs	r2, #0
 8003468:	62bb      	str	r3, [r7, #40]	; 0x28
 800346a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800346c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003470:	f7fc ff8c 	bl	800038c <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4613      	mov	r3, r2
 800347a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800347c:	e058      	b.n	8003530 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800347e:	4b38      	ldr	r3, [pc, #224]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	099b      	lsrs	r3, r3, #6
 8003484:	2200      	movs	r2, #0
 8003486:	4618      	mov	r0, r3
 8003488:	4611      	mov	r1, r2
 800348a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800348e:	623b      	str	r3, [r7, #32]
 8003490:	2300      	movs	r3, #0
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
 8003494:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003498:	4642      	mov	r2, r8
 800349a:	464b      	mov	r3, r9
 800349c:	f04f 0000 	mov.w	r0, #0
 80034a0:	f04f 0100 	mov.w	r1, #0
 80034a4:	0159      	lsls	r1, r3, #5
 80034a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034aa:	0150      	lsls	r0, r2, #5
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4641      	mov	r1, r8
 80034b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80034b6:	4649      	mov	r1, r9
 80034b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80034bc:	f04f 0200 	mov.w	r2, #0
 80034c0:	f04f 0300 	mov.w	r3, #0
 80034c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034d0:	ebb2 040a 	subs.w	r4, r2, sl
 80034d4:	eb63 050b 	sbc.w	r5, r3, fp
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	00eb      	lsls	r3, r5, #3
 80034e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034e6:	00e2      	lsls	r2, r4, #3
 80034e8:	4614      	mov	r4, r2
 80034ea:	461d      	mov	r5, r3
 80034ec:	4643      	mov	r3, r8
 80034ee:	18e3      	adds	r3, r4, r3
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	464b      	mov	r3, r9
 80034f4:	eb45 0303 	adc.w	r3, r5, r3
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003506:	4629      	mov	r1, r5
 8003508:	028b      	lsls	r3, r1, #10
 800350a:	4621      	mov	r1, r4
 800350c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003510:	4621      	mov	r1, r4
 8003512:	028a      	lsls	r2, r1, #10
 8003514:	4610      	mov	r0, r2
 8003516:	4619      	mov	r1, r3
 8003518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351a:	2200      	movs	r2, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	61fa      	str	r2, [r7, #28]
 8003520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003524:	f7fc ff32 	bl	800038c <__aeabi_uldivmod>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4613      	mov	r3, r2
 800352e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_GetSysClockFreq+0x200>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	0c1b      	lsrs	r3, r3, #16
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	3301      	adds	r3, #1
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003540:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800354a:	e002      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCC_GetSysClockFreq+0x204>)
 800354e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003554:	4618      	mov	r0, r3
 8003556:	3750      	adds	r7, #80	; 0x50
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800355e:	bf00      	nop
 8003560:	40023800 	.word	0x40023800
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003570:	4b03      	ldr	r3, [pc, #12]	; (8003580 <HAL_RCC_GetHCLKFreq+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000000 	.word	0x20000000

08003584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003588:	f7ff fff0 	bl	800356c <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b05      	ldr	r3, [pc, #20]	; (80035a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0a9b      	lsrs	r3, r3, #10
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4903      	ldr	r1, [pc, #12]	; (80035a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40023800 	.word	0x40023800
 80035a8:	080042bc 	.word	0x080042bc

080035ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035b0:	f7ff ffdc 	bl	800356c <HAL_RCC_GetHCLKFreq>
 80035b4:	4602      	mov	r2, r0
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	0b5b      	lsrs	r3, r3, #13
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	4903      	ldr	r1, [pc, #12]	; (80035d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c2:	5ccb      	ldrb	r3, [r1, r3]
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40023800 	.word	0x40023800
 80035d0:	080042bc 	.word	0x080042bc

080035d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e03f      	b.n	8003666 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fe fab0 	bl	8001b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2224      	movs	r2, #36	; 0x24
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003616:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 f829 	bl	8003670 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800362c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695a      	ldr	r2, [r3, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800363c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800364c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2220      	movs	r2, #32
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b0c0      	sub	sp, #256	; 0x100
 8003676:	af00      	add	r7, sp, #0
 8003678:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800367c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800368c:	68d9      	ldr	r1, [r3, #12]
 800368e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	ea40 0301 	orr.w	r3, r0, r1
 8003698:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800369a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	431a      	orrs	r2, r3
 80036b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036c8:	f021 010c 	bic.w	r1, r1, #12
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80036d6:	430b      	orrs	r3, r1
 80036d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	6999      	ldr	r1, [r3, #24]
 80036ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	ea40 0301 	orr.w	r3, r0, r1
 80036f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	4b8f      	ldr	r3, [pc, #572]	; (800393c <UART_SetConfig+0x2cc>)
 8003700:	429a      	cmp	r2, r3
 8003702:	d005      	beq.n	8003710 <UART_SetConfig+0xa0>
 8003704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4b8d      	ldr	r3, [pc, #564]	; (8003940 <UART_SetConfig+0x2d0>)
 800370c:	429a      	cmp	r2, r3
 800370e:	d104      	bne.n	800371a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003710:	f7ff ff4c 	bl	80035ac <HAL_RCC_GetPCLK2Freq>
 8003714:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003718:	e003      	b.n	8003722 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800371a:	f7ff ff33 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 800371e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800372c:	f040 810c 	bne.w	8003948 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003734:	2200      	movs	r2, #0
 8003736:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800373a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800373e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003742:	4622      	mov	r2, r4
 8003744:	462b      	mov	r3, r5
 8003746:	1891      	adds	r1, r2, r2
 8003748:	65b9      	str	r1, [r7, #88]	; 0x58
 800374a:	415b      	adcs	r3, r3
 800374c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800374e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003752:	4621      	mov	r1, r4
 8003754:	eb12 0801 	adds.w	r8, r2, r1
 8003758:	4629      	mov	r1, r5
 800375a:	eb43 0901 	adc.w	r9, r3, r1
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800376a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800376e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003772:	4690      	mov	r8, r2
 8003774:	4699      	mov	r9, r3
 8003776:	4623      	mov	r3, r4
 8003778:	eb18 0303 	adds.w	r3, r8, r3
 800377c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003780:	462b      	mov	r3, r5
 8003782:	eb49 0303 	adc.w	r3, r9, r3
 8003786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003796:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800379a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800379e:	460b      	mov	r3, r1
 80037a0:	18db      	adds	r3, r3, r3
 80037a2:	653b      	str	r3, [r7, #80]	; 0x50
 80037a4:	4613      	mov	r3, r2
 80037a6:	eb42 0303 	adc.w	r3, r2, r3
 80037aa:	657b      	str	r3, [r7, #84]	; 0x54
 80037ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037b4:	f7fc fdea 	bl	800038c <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4b61      	ldr	r3, [pc, #388]	; (8003944 <UART_SetConfig+0x2d4>)
 80037be:	fba3 2302 	umull	r2, r3, r3, r2
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	011c      	lsls	r4, r3, #4
 80037c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80037d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80037d8:	4642      	mov	r2, r8
 80037da:	464b      	mov	r3, r9
 80037dc:	1891      	adds	r1, r2, r2
 80037de:	64b9      	str	r1, [r7, #72]	; 0x48
 80037e0:	415b      	adcs	r3, r3
 80037e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80037e8:	4641      	mov	r1, r8
 80037ea:	eb12 0a01 	adds.w	sl, r2, r1
 80037ee:	4649      	mov	r1, r9
 80037f0:	eb43 0b01 	adc.w	fp, r3, r1
 80037f4:	f04f 0200 	mov.w	r2, #0
 80037f8:	f04f 0300 	mov.w	r3, #0
 80037fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003800:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003804:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003808:	4692      	mov	sl, r2
 800380a:	469b      	mov	fp, r3
 800380c:	4643      	mov	r3, r8
 800380e:	eb1a 0303 	adds.w	r3, sl, r3
 8003812:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003816:	464b      	mov	r3, r9
 8003818:	eb4b 0303 	adc.w	r3, fp, r3
 800381c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800382c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003830:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003834:	460b      	mov	r3, r1
 8003836:	18db      	adds	r3, r3, r3
 8003838:	643b      	str	r3, [r7, #64]	; 0x40
 800383a:	4613      	mov	r3, r2
 800383c:	eb42 0303 	adc.w	r3, r2, r3
 8003840:	647b      	str	r3, [r7, #68]	; 0x44
 8003842:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003846:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800384a:	f7fc fd9f 	bl	800038c <__aeabi_uldivmod>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	4611      	mov	r1, r2
 8003854:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <UART_SetConfig+0x2d4>)
 8003856:	fba3 2301 	umull	r2, r3, r3, r1
 800385a:	095b      	lsrs	r3, r3, #5
 800385c:	2264      	movs	r2, #100	; 0x64
 800385e:	fb02 f303 	mul.w	r3, r2, r3
 8003862:	1acb      	subs	r3, r1, r3
 8003864:	00db      	lsls	r3, r3, #3
 8003866:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800386a:	4b36      	ldr	r3, [pc, #216]	; (8003944 <UART_SetConfig+0x2d4>)
 800386c:	fba3 2302 	umull	r2, r3, r3, r2
 8003870:	095b      	lsrs	r3, r3, #5
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003878:	441c      	add	r4, r3
 800387a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800387e:	2200      	movs	r2, #0
 8003880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003884:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003888:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800388c:	4642      	mov	r2, r8
 800388e:	464b      	mov	r3, r9
 8003890:	1891      	adds	r1, r2, r2
 8003892:	63b9      	str	r1, [r7, #56]	; 0x38
 8003894:	415b      	adcs	r3, r3
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003898:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800389c:	4641      	mov	r1, r8
 800389e:	1851      	adds	r1, r2, r1
 80038a0:	6339      	str	r1, [r7, #48]	; 0x30
 80038a2:	4649      	mov	r1, r9
 80038a4:	414b      	adcs	r3, r1
 80038a6:	637b      	str	r3, [r7, #52]	; 0x34
 80038a8:	f04f 0200 	mov.w	r2, #0
 80038ac:	f04f 0300 	mov.w	r3, #0
 80038b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038b4:	4659      	mov	r1, fp
 80038b6:	00cb      	lsls	r3, r1, #3
 80038b8:	4651      	mov	r1, sl
 80038ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038be:	4651      	mov	r1, sl
 80038c0:	00ca      	lsls	r2, r1, #3
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	4603      	mov	r3, r0
 80038c8:	4642      	mov	r2, r8
 80038ca:	189b      	adds	r3, r3, r2
 80038cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038d0:	464b      	mov	r3, r9
 80038d2:	460a      	mov	r2, r1
 80038d4:	eb42 0303 	adc.w	r3, r2, r3
 80038d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80038e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80038ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80038f0:	460b      	mov	r3, r1
 80038f2:	18db      	adds	r3, r3, r3
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80038f6:	4613      	mov	r3, r2
 80038f8:	eb42 0303 	adc.w	r3, r2, r3
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003902:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003906:	f7fc fd41 	bl	800038c <__aeabi_uldivmod>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <UART_SetConfig+0x2d4>)
 8003910:	fba3 1302 	umull	r1, r3, r3, r2
 8003914:	095b      	lsrs	r3, r3, #5
 8003916:	2164      	movs	r1, #100	; 0x64
 8003918:	fb01 f303 	mul.w	r3, r1, r3
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	3332      	adds	r3, #50	; 0x32
 8003922:	4a08      	ldr	r2, [pc, #32]	; (8003944 <UART_SetConfig+0x2d4>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	095b      	lsrs	r3, r3, #5
 800392a:	f003 0207 	and.w	r2, r3, #7
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4422      	add	r2, r4
 8003936:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003938:	e105      	b.n	8003b46 <UART_SetConfig+0x4d6>
 800393a:	bf00      	nop
 800393c:	40011000 	.word	0x40011000
 8003940:	40011400 	.word	0x40011400
 8003944:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800394c:	2200      	movs	r2, #0
 800394e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003952:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003956:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800395a:	4642      	mov	r2, r8
 800395c:	464b      	mov	r3, r9
 800395e:	1891      	adds	r1, r2, r2
 8003960:	6239      	str	r1, [r7, #32]
 8003962:	415b      	adcs	r3, r3
 8003964:	627b      	str	r3, [r7, #36]	; 0x24
 8003966:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800396a:	4641      	mov	r1, r8
 800396c:	1854      	adds	r4, r2, r1
 800396e:	4649      	mov	r1, r9
 8003970:	eb43 0501 	adc.w	r5, r3, r1
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	00eb      	lsls	r3, r5, #3
 800397e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003982:	00e2      	lsls	r2, r4, #3
 8003984:	4614      	mov	r4, r2
 8003986:	461d      	mov	r5, r3
 8003988:	4643      	mov	r3, r8
 800398a:	18e3      	adds	r3, r4, r3
 800398c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003990:	464b      	mov	r3, r9
 8003992:	eb45 0303 	adc.w	r3, r5, r3
 8003996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800399a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039aa:	f04f 0200 	mov.w	r2, #0
 80039ae:	f04f 0300 	mov.w	r3, #0
 80039b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039b6:	4629      	mov	r1, r5
 80039b8:	008b      	lsls	r3, r1, #2
 80039ba:	4621      	mov	r1, r4
 80039bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c0:	4621      	mov	r1, r4
 80039c2:	008a      	lsls	r2, r1, #2
 80039c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039c8:	f7fc fce0 	bl	800038c <__aeabi_uldivmod>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4b60      	ldr	r3, [pc, #384]	; (8003b54 <UART_SetConfig+0x4e4>)
 80039d2:	fba3 2302 	umull	r2, r3, r3, r2
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	011c      	lsls	r4, r3, #4
 80039da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039de:	2200      	movs	r2, #0
 80039e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80039ec:	4642      	mov	r2, r8
 80039ee:	464b      	mov	r3, r9
 80039f0:	1891      	adds	r1, r2, r2
 80039f2:	61b9      	str	r1, [r7, #24]
 80039f4:	415b      	adcs	r3, r3
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039fc:	4641      	mov	r1, r8
 80039fe:	1851      	adds	r1, r2, r1
 8003a00:	6139      	str	r1, [r7, #16]
 8003a02:	4649      	mov	r1, r9
 8003a04:	414b      	adcs	r3, r1
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a14:	4659      	mov	r1, fp
 8003a16:	00cb      	lsls	r3, r1, #3
 8003a18:	4651      	mov	r1, sl
 8003a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a1e:	4651      	mov	r1, sl
 8003a20:	00ca      	lsls	r2, r1, #3
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	4603      	mov	r3, r0
 8003a28:	4642      	mov	r2, r8
 8003a2a:	189b      	adds	r3, r3, r2
 8003a2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a30:	464b      	mov	r3, r9
 8003a32:	460a      	mov	r2, r1
 8003a34:	eb42 0303 	adc.w	r3, r2, r3
 8003a38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a46:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a48:	f04f 0200 	mov.w	r2, #0
 8003a4c:	f04f 0300 	mov.w	r3, #0
 8003a50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a54:	4649      	mov	r1, r9
 8003a56:	008b      	lsls	r3, r1, #2
 8003a58:	4641      	mov	r1, r8
 8003a5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a5e:	4641      	mov	r1, r8
 8003a60:	008a      	lsls	r2, r1, #2
 8003a62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a66:	f7fc fc91 	bl	800038c <__aeabi_uldivmod>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4b39      	ldr	r3, [pc, #228]	; (8003b54 <UART_SetConfig+0x4e4>)
 8003a70:	fba3 1302 	umull	r1, r3, r3, r2
 8003a74:	095b      	lsrs	r3, r3, #5
 8003a76:	2164      	movs	r1, #100	; 0x64
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	3332      	adds	r3, #50	; 0x32
 8003a82:	4a34      	ldr	r2, [pc, #208]	; (8003b54 <UART_SetConfig+0x4e4>)
 8003a84:	fba2 2303 	umull	r2, r3, r2, r3
 8003a88:	095b      	lsrs	r3, r3, #5
 8003a8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a8e:	441c      	add	r4, r3
 8003a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a94:	2200      	movs	r2, #0
 8003a96:	673b      	str	r3, [r7, #112]	; 0x70
 8003a98:	677a      	str	r2, [r7, #116]	; 0x74
 8003a9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a9e:	4642      	mov	r2, r8
 8003aa0:	464b      	mov	r3, r9
 8003aa2:	1891      	adds	r1, r2, r2
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	415b      	adcs	r3, r3
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003aae:	4641      	mov	r1, r8
 8003ab0:	1851      	adds	r1, r2, r1
 8003ab2:	6039      	str	r1, [r7, #0]
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	414b      	adcs	r3, r1
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ac6:	4659      	mov	r1, fp
 8003ac8:	00cb      	lsls	r3, r1, #3
 8003aca:	4651      	mov	r1, sl
 8003acc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ad0:	4651      	mov	r1, sl
 8003ad2:	00ca      	lsls	r2, r1, #3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4642      	mov	r2, r8
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ae0:	464b      	mov	r3, r9
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	eb42 0303 	adc.w	r3, r2, r3
 8003ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	663b      	str	r3, [r7, #96]	; 0x60
 8003af4:	667a      	str	r2, [r7, #100]	; 0x64
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	f04f 0300 	mov.w	r3, #0
 8003afe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b02:	4649      	mov	r1, r9
 8003b04:	008b      	lsls	r3, r1, #2
 8003b06:	4641      	mov	r1, r8
 8003b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b0c:	4641      	mov	r1, r8
 8003b0e:	008a      	lsls	r2, r1, #2
 8003b10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b14:	f7fc fc3a 	bl	800038c <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <UART_SetConfig+0x4e4>)
 8003b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2164      	movs	r1, #100	; 0x64
 8003b26:	fb01 f303 	mul.w	r3, r1, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <UART_SetConfig+0x4e4>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 020f 	and.w	r2, r3, #15
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4422      	add	r2, r4
 8003b44:	609a      	str	r2, [r3, #8]
}
 8003b46:	bf00      	nop
 8003b48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b52:	bf00      	nop
 8003b54:	51eb851f 	.word	0x51eb851f

08003b58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b58:	b084      	sub	sp, #16
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b084      	sub	sp, #16
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	f107 001c 	add.w	r0, r7, #28
 8003b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d122      	bne.n	8003bb6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d105      	bne.n	8003baa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 faa2 	bl	80040f4 <USB_CoreReset>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	73fb      	strb	r3, [r7, #15]
 8003bb4:	e01a      	b.n	8003bec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 fa96 	bl	80040f4 <USB_CoreReset>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
 8003bde:	e005      	b.n	8003bec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d10b      	bne.n	8003c0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f043 0206 	orr.w	r2, r3, #6
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f043 0220 	orr.w	r2, r3, #32
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c16:	b004      	add	sp, #16
 8003c18:	4770      	bx	lr

08003c1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b083      	sub	sp, #12
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f023 0201 	bic.w	r2, r3, #1
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d115      	bne.n	8003c8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	f7fe f906 	bl	8001e7c <HAL_Delay>
      ms++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fa2e 	bl	80040d8 <USB_GetMode>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d01e      	beq.n	8003cc0 <USB_SetCurrentMode+0x84>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b31      	cmp	r3, #49	; 0x31
 8003c86:	d9f0      	bls.n	8003c6a <USB_SetCurrentMode+0x2e>
 8003c88:	e01a      	b.n	8003cc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d115      	bne.n	8003cbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c9c:	2001      	movs	r0, #1
 8003c9e:	f7fe f8ed 	bl	8001e7c <HAL_Delay>
      ms++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fa15 	bl	80040d8 <USB_GetMode>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <USB_SetCurrentMode+0x84>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b31      	cmp	r3, #49	; 0x31
 8003cb8:	d9f0      	bls.n	8003c9c <USB_SetCurrentMode+0x60>
 8003cba:	e001      	b.n	8003cc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e005      	b.n	8003ccc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b32      	cmp	r3, #50	; 0x32
 8003cc4:	d101      	bne.n	8003cca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e000      	b.n	8003ccc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003cd4:	b084      	sub	sp, #16
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b086      	sub	sp, #24
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003cee:	2300      	movs	r3, #0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	e009      	b.n	8003d08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	3340      	adds	r3, #64	; 0x40
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	2200      	movs	r2, #0
 8003d00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	3301      	adds	r3, #1
 8003d06:	613b      	str	r3, [r7, #16]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b0e      	cmp	r3, #14
 8003d0c:	d9f2      	bls.n	8003cf4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d11c      	bne.n	8003d4e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d22:	f043 0302 	orr.w	r3, r3, #2
 8003d26:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38
 8003d4c:	e00b      	b.n	8003d66 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	2300      	movs	r3, #0
 8003d70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d78:	4619      	mov	r1, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d80:	461a      	mov	r2, r3
 8003d82:	680b      	ldr	r3, [r1, #0]
 8003d84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10c      	bne.n	8003da6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d104      	bne.n	8003d9c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d92:	2100      	movs	r1, #0
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f965 	bl	8004064 <USB_SetDevSpeed>
 8003d9a:	e008      	b.n	8003dae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d9c:	2101      	movs	r1, #1
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f960 	bl	8004064 <USB_SetDevSpeed>
 8003da4:	e003      	b.n	8003dae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003da6:	2103      	movs	r1, #3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 f95b 	bl	8004064 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003dae:	2110      	movs	r1, #16
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f8f3 	bl	8003f9c <USB_FlushTxFifo>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f91f 	bl	8004004 <USB_FlushRxFifo>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	2300      	movs	r3, #0
 8003dda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de2:	461a      	mov	r2, r3
 8003de4:	2300      	movs	r3, #0
 8003de6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	461a      	mov	r2, r3
 8003df0:	2300      	movs	r3, #0
 8003df2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	e043      	b.n	8003e82 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e10:	d118      	bne.n	8003e44 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	461a      	mov	r2, r3
 8003e26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	e013      	b.n	8003e56 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	e008      	b.n	8003e56 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e50:	461a      	mov	r2, r3
 8003e52:	2300      	movs	r3, #0
 8003e54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e62:	461a      	mov	r2, r3
 8003e64:	2300      	movs	r3, #0
 8003e66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e74:	461a      	mov	r2, r3
 8003e76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	613b      	str	r3, [r7, #16]
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d3b7      	bcc.n	8003dfa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	e043      	b.n	8003f18 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ea6:	d118      	bne.n	8003eda <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eba:	461a      	mov	r2, r3
 8003ebc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e013      	b.n	8003eec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	e008      	b.n	8003eec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2300      	movs	r3, #0
 8003eea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2300      	movs	r3, #0
 8003efc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	3301      	adds	r3, #1
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d3b7      	bcc.n	8003e90 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	f043 0210 	orr.w	r2, r3, #16
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	699a      	ldr	r2, [r3, #24]
 8003f58:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <USB_DevInit+0x2c4>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f043 0208 	orr.w	r2, r3, #8
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d107      	bne.n	8003f88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f80:	f043 0304 	orr.w	r3, r3, #4
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f94:	b004      	add	sp, #16
 8003f96:	4770      	bx	lr
 8003f98:	803c3800 	.word	0x803c3800

08003f9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3301      	adds	r3, #1
 8003fae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a13      	ldr	r2, [pc, #76]	; (8004000 <USB_FlushTxFifo+0x64>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d901      	bls.n	8003fbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e01b      	b.n	8003ff4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	daf2      	bge.n	8003faa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	019b      	lsls	r3, r3, #6
 8003fcc:	f043 0220 	orr.w	r2, r3, #32
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a08      	ldr	r2, [pc, #32]	; (8004000 <USB_FlushTxFifo+0x64>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e006      	b.n	8003ff4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d0f0      	beq.n	8003fd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	00030d40 	.word	0x00030d40

08004004 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3301      	adds	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a11      	ldr	r2, [pc, #68]	; (8004060 <USB_FlushRxFifo+0x5c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d901      	bls.n	8004022 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e018      	b.n	8004054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	daf2      	bge.n	8004010 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2210      	movs	r2, #16
 8004032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a08      	ldr	r2, [pc, #32]	; (8004060 <USB_FlushRxFifo+0x5c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d901      	bls.n	8004046 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e006      	b.n	8004054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b10      	cmp	r3, #16
 8004050:	d0f0      	beq.n	8004034 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	00030d40 	.word	0x00030d40

08004064 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	460b      	mov	r3, r1
 800406e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	78fb      	ldrb	r3, [r7, #3]
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004084:	4313      	orrs	r3, r2
 8004086:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80040b0:	f023 0303 	bic.w	r3, r3, #3
 80040b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040c4:	f043 0302 	orr.w	r3, r3, #2
 80040c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	f003 0301 	and.w	r3, r3, #1
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4a13      	ldr	r2, [pc, #76]	; (8004158 <USB_CoreReset+0x64>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e01b      	b.n	800414a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	daf2      	bge.n	8004100 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f043 0201 	orr.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3301      	adds	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <USB_CoreReset+0x64>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d901      	bls.n	800413c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e006      	b.n	800414a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d0f0      	beq.n	800412a <USB_CoreReset+0x36>

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	00030d40 	.word	0x00030d40

0800415c <__libc_init_array>:
 800415c:	b570      	push	{r4, r5, r6, lr}
 800415e:	4d0d      	ldr	r5, [pc, #52]	; (8004194 <__libc_init_array+0x38>)
 8004160:	4c0d      	ldr	r4, [pc, #52]	; (8004198 <__libc_init_array+0x3c>)
 8004162:	1b64      	subs	r4, r4, r5
 8004164:	10a4      	asrs	r4, r4, #2
 8004166:	2600      	movs	r6, #0
 8004168:	42a6      	cmp	r6, r4
 800416a:	d109      	bne.n	8004180 <__libc_init_array+0x24>
 800416c:	4d0b      	ldr	r5, [pc, #44]	; (800419c <__libc_init_array+0x40>)
 800416e:	4c0c      	ldr	r4, [pc, #48]	; (80041a0 <__libc_init_array+0x44>)
 8004170:	f000 f820 	bl	80041b4 <_init>
 8004174:	1b64      	subs	r4, r4, r5
 8004176:	10a4      	asrs	r4, r4, #2
 8004178:	2600      	movs	r6, #0
 800417a:	42a6      	cmp	r6, r4
 800417c:	d105      	bne.n	800418a <__libc_init_array+0x2e>
 800417e:	bd70      	pop	{r4, r5, r6, pc}
 8004180:	f855 3b04 	ldr.w	r3, [r5], #4
 8004184:	4798      	blx	r3
 8004186:	3601      	adds	r6, #1
 8004188:	e7ee      	b.n	8004168 <__libc_init_array+0xc>
 800418a:	f855 3b04 	ldr.w	r3, [r5], #4
 800418e:	4798      	blx	r3
 8004190:	3601      	adds	r6, #1
 8004192:	e7f2      	b.n	800417a <__libc_init_array+0x1e>
 8004194:	080042cc 	.word	0x080042cc
 8004198:	080042cc 	.word	0x080042cc
 800419c:	080042cc 	.word	0x080042cc
 80041a0:	080042d0 	.word	0x080042d0

080041a4 <memset>:
 80041a4:	4402      	add	r2, r0
 80041a6:	4603      	mov	r3, r0
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d100      	bne.n	80041ae <memset+0xa>
 80041ac:	4770      	bx	lr
 80041ae:	f803 1b01 	strb.w	r1, [r3], #1
 80041b2:	e7f9      	b.n	80041a8 <memset+0x4>

080041b4 <_init>:
 80041b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b6:	bf00      	nop
 80041b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ba:	bc08      	pop	{r3}
 80041bc:	469e      	mov	lr, r3
 80041be:	4770      	bx	lr

080041c0 <_fini>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	bf00      	nop
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr
